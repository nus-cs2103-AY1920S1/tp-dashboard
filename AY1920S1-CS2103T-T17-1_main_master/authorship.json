[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Address Book (Level 3)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T17-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-T17-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T17-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T17-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Too overwhelmed by the amount of group projects? Don\u0027t worry! MyProject is here to help. With our vast array of functionality, you would soon be managing your projects with ease."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MyProject is a desktop Project Management application. It has a GUI to display various useful information but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Original source code of AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 6,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    implementation(\"commons-io:commons-io:2.6\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    compile fileTree(include: [\u0027*.jar\u0027], dir: \u0027lib\u0027)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    compile files(\u0027lib/javax.activation.jar\u0027)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi\u0027, version: \u00273.9\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "philipalexanderb": 4,
      "jerryk1997": 1,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "*_MyProject_* was built on top of AddressBook - Level 3, which  was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Chong Chee Yuan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::ccyccyccy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "{empty}[http://chongcheeyuan.me/[homepage]] [https://github.com/ccyccyccy[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/AY1920S1-CS2103T-T17-1/main/blob/master/docs/team/ccyccyccy.adoc[portforlio]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Philip Alexander Boediman"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::philipalexanderb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/philipalexanderb[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/AY1920S1-CS2103T-T17-1/main/blob/master/docs/team/philipalexanderb.adoc[portfolio]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Kwong Chung Yue Jerry"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::jerryk1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "{empty}[https://github.com/jerryk1997[github]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/AY1920S1-CS2103T-T17-1/main/blob/master/docs/team/jerryk1997.adoc[portfolio]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Wang Runding"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::R-D-D-D.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "{empty}[https://github.com/r-d-d-d[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/AY1920S1-CS2103T-T17-1/main/blob/master/docs/team/r-d-d-d.adoc[portfolio]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sng Jia Ming Fadi Faris"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::fadisng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "{empty}[https://github.com/fadisng[github]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/AY1920S1-CS2103T-T17-1/main/blob/master/docs/team/fadisng.adoc[portfolio]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Role: Member"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "ccyccyccy": 5,
      "philipalexanderb": 8,
      "fadisng": 6,
      "jerryk1997": 4,
      "-": 28
    }
  },
  {
    "path": "docs/ChangeUiDisplayActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":User executes a command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if () then ([is help command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":MainWindow executes\\nhandleHelp method;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else ([is not help command])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if () then ([is exit command])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":MainWindow executes\\nhandleExit method;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else ([is not exit command])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if () then ([is back command])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":handleBack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if () then ([current state is PROJECT_LIST])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":Throw CommandException\\ncan\u0027t go back any further;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else([current state is not PROJECT_LIST])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":get previous UiEvent from the stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":changeUiDisplay method is called\\nto go back to the UiEvent\u0027s state;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":remove working project if the\\nprevious state does not have one;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else([is not back command])"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if () then ([change in Ui display needed])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":get the next state base on the command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":generate an UiEvent with the param\\nnext state and the current working project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":changeUiDisplay method is called to go to next state;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "else ([change in Ui display is not needed])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":changeUiDisplay method is called\\nto refresh the current state;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "endif"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "endif"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "endif"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "endif"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "stop"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 43
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T17-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d MyProject V1.4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "By: `T17-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Task feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Within every project, there are tasks to be done or milestones to be achieved within certain deadlines. The diagram below shows the class diagram of the task class and how it interacts with the model."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Class Diagram for Task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::TaskClassDiagram.png[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fadisng"
        },
        "content": "As shown above, each project stores multiple tasks in a list. These tasks can be stored, deleted, edited and sorted very easily."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Here are some task related commands that can be executed by the app."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". addTask - adds a task into the project model."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". deleteTask - removes a task from the project model based on index specified by user"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". editTask - edits a task of the given index with attribute/s to edit e.g deadline/description/whether is done"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". sortTask - sorts the list of tasks based on specification given by user. (more info available in section 3.3)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fadisng"
        },
        "content": "As seen in figure 9, each task consists of 3 parameters namely description, time and a boolean state to show whether the task is done/in progress."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fadisng"
        },
        "content": "A typical task will look like this on the app: +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::TASK.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::addProjectMeeting[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Meeting feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Within every project, there are meetings to be held at certain time."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram below shows the class diagram of the meeting class and how it interacts with the model."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Class Diagram for Meeting"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::MeetingClassDiagram.png[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "As shown above, each project stores multiple meetings in a list. These meetings are automatically sorted based on the time in ascending order."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Here are some meeting related commands that can be executed by the app."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". addProjectMeeting - adds a meeting into the project model."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". deleteProjectMeeting- removes a meeting from the project model based on index specified by user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "As seen in figure 10, each meeting consists of 2 parameters namely description and time to show what is the meeting about"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "and the date and time of the meeting respectively."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "A typical meeting will look like this on the app:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::ProjectMeeting.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::addProjectMeeting[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::memberFeature[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Member feature"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "In every project, it almost certain that there are members. Therefore we have allowed for the users to be able to"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "track who are the members, and how many members there are within each project. Each `Project` stores its members as a list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "of strings representing their names, and similarly each `Person` stores the projects they are involved in"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "as a list of strings representing the project titles. Below you will find 2 diagrams which represents this relationship."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Class diagram of Project"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MemberClassDiagram1.png[picutre, 250]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Class diagram of a Person"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MemberClassDiagram2.png[picture, 250]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Whenever member is mentioned it should be known that it is represented by a `Person`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "In order to facilitate this feature, 4 commands are implemented as a subclass of the `Command` class:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addMember` - Adds a new `Person` to the contacts an records the name as a member of the current working project."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addFromContacts` - Adds a `Person` to the current working project as a member."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `removeMember` - Removes the record of the `Person` as a member of the current working project."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addProfilePicture` - Adds a profile picture to the specified `Person`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "In this section, we will demonstrate how a member is added to the project from your contacts, and also how a member as a new `Person`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "We will start with adding a new `Person` to your contacts, and to your project at the same time."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. The user enters the `addMember` command with the following parameters `n/David p/94328727 e/david97@hotmail.com a/Ang Mo kio"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "avenue 3`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Full user input: `addMember n/David p/94328727 e/david97@hotmail.com a/Ang Mo kio"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "avenue 3`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The user input is parsed into an `ArgumentMultiMap` by `AddMemberCommandParser#parse` so that every attribute of the person can be"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "extracted, and put into a `NewMemberDescriptor` to be used to correctly create the `Person`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`ArgumentMultimap` is a class that stores all the parsed parameters from the user input."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`NewMemberDescriptor` is a class that stores any all the information on the `Person` given by the user to be used"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to create the `Person` subsequently."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. The information of the person is stored in the `NewMemberDescriptor`, and used to create a new instance of the `AddMemberCommand`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Every Project keeps track of which members are involved by storing a list of strings of the names of the members."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Similarly a Person keeps track of which projects they are involved in by storing a list of strings of the project titles."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The following commands are implemented to support this feature:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addMember` - Adds a new person to the contacts as well as to the current working project."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addFromContacts` - Adds a person currently stored in your contacts to the current working project."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `removeMember` - Removes a person from the current working project."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `addProfilePicture` - Adds a profile picture to a person in the contacts."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::memberFeature[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sorting feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Sorts some lists based on specifications provided by the user."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fadisng"
        },
        "content": "There are 3 lists that are able to be sorted so far. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of tasks"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of spending"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of meetings"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The implementation is similar for these 3 methods. It makes use of `SortingOrder`, which is"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fadisng"
        },
        "content": "a container class that stores the current sort order as well as methods to get and set these orders."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`SortingOrder` can be found in the `model` package."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Currently there are 5 different methods to sort the lists."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Alphabetical order"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing order of time"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done and then by increasing order of time"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing price"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Methods 3-4 are only for sorting tasks whereas method 5 is for sort spending."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Methods 1-2 can be used to sort all lists."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fadisng"
        },
        "content": "All sort commands take in a single integer as parameter. As mentioned in the"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fadisng"
        },
        "content": "note above, integers 1-4 are valid input for sortTask, integers 1, 2 and 5 are valid for sortSpending, and"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fadisng"
        },
        "content": "integers 1-2 are valid for sortMeeting."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fadisng"
        },
        "content": "An example command would be `sortTask 1` which sorts the list of tasks by alphabetical order."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The following sequence diagram shows the process of obtaining a list with the new sorting order"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fadisng"
        },
        "content": "and updating the current sort order in `SortingOrder` class."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Sequence Diagram for sortTask"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::SortTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fadisng"
        },
        "content": "These are the stages shown in figure 9. Stages are similar for sort spending as well."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Parses the input to obtain the index."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Goes to `SortingOrder` to change the current sorting order to the one linked to the given index based on the specification shown above."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Obtains list of tasks from model and sorts it. List now maintains this sorting order and displays a sorted list even after adding or editing elements."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Display the newly sorted task list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Activity Diagram for sortTask"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::SortTaskActivityDiagram.png[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The diagram above shows sortTask works. There are 2 possible error messages that can occur. Firstly,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fadisng"
        },
        "content": "if the user inputs an index that is not applicable to the type of items sorted. For example, `sortTask 5`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fadisng"
        },
        "content": "is invalid as index 5 is linked to a price sorting mechanism which is not applicable to sorting tasks. Secondly,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fadisng"
        },
        "content": "an error will be shown if the user attempts to sort the items in the same order is the current sorting order."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fadisng"
        },
        "content": "For example, since the default sorting order for tasks is by increasing order of date, the command `sortTask 2`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fadisng"
        },
        "content": "will be invalid if the sorting order has never been changed before. Otherwise if the input is valid,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fadisng"
        },
        "content": "the sorting will occur and the newly sorted task list will be displayed."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the sort commands"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* **Alternative 1 (current choice):** Store the data in list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Pros: Easy to implement. Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Cons: May have performance issues as list has to be sorted every time a new element is added or edited."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* **Alternative 2:** Store the data in a PriorityQueue."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Pros: Much more efficient in terms of performance and complexity. Internal list will automatically be updated which means"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fadisng"
        },
        "content": "no additional sorting needed when adding or editing new elements."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Cons: Have to create and add all the tasks into another PriorityQueue if the sorting order were to be changed. Harder to implement."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::sendReminder[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Sending Reminder feature"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Sends reminder for tasks and meetings that are due in the number of days given by the user input."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The basic implementation uses javax.Mail to send email to other email addresses. The Mailer class has static method sendEmail"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "which is responsible for sending all kinds of email to a given recipient(s). User\u0027s email account information is"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "stored in the Model class and subsequent queries regarding mailing will use this information that has been stored to send the email."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Currently, only gmail server has been made available for use in sending the emails."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "User Email  Account Information is stored through the signIn command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminder takes in a single integer as parameter. The integer will be the duration in days from the current times in which the meetings and tasks are due."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The following sequence diagram shows the process of sending reminder to the project members."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Sequence Diagram for sendReminder"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SendReminderSequenceDiagram.png[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These are the stages shown in figure 15."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Parses the input to obtain the duration."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the the Meetings and Tasks."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Obtains list of tasks and meetings which are due in the duration time."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Project` to get the Members names."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the members in the project."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the OwnerAccount information."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Sends email to all the members about the upcoming meetings and tasks in the project."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Display the success message."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Activity Diagram for sendReminder"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SendReminderActivityDiagram.png[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram above shows how `sendReminder` works. There are 2 possible error messages for invalid input. Firstly,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if the user inputs nothing as the duration and input cannot be empty error message is shown. Secondly,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "an error will be shown if the user non-numeric or negative or zero number as the duration of time. For a valid input,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "user will be required to checkout then signIn first before executing the command."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the sendReminder commands"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 1:** Storing List\u003cPerson\u003e in the Project for members."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Easy to implement. Do not need to look for the person object in the addressBook from the List of String of"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "members\u0027 names in the project."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Introduces coupling and may cause unwanted bugs due to cyclic dependencies as Project contains Person and"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Person contains Project."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 2:** Stores members as List\u003cString\u003e of members names."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Reduces coupling and and eliminates cyclic dependencies between Project and Person object.."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Have to hash the members object in the addressBook by names and go through the List\u003cString\u003e of members\u0027"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "names one by one to get the Person object of the member. Harder to implement."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::sendReminder[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::broadcastMail[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Broadcast Mail feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Broadcast an email to all members in the project."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Similar to sendReminder, the basic implementation uses javax.Mail to send email to other email addresses. The Mailer class has static method sendEmail"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "which is responsible for sending all kinds of email to a given recipient(s). User\u0027s email account information is"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "stored in the Model class and subsequent queries regarding mailing will use this information that has been stored to send the email."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Currently, only gmail server has been made available for use in sending the emails."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "User Email  Account Information is stored through the signIn command."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMail takes in a two String, an email Subject and Body."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The subject will be the email title which are normally on the email header and the body"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "will be the message body of the email."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The following sequence diagram shows the process of broadcast email to the project members."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Sequence Diagram for broadcastMail"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::BroadcastMailSequenceDiagram.png[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These are the stages shown in figure 15."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Parses the input to obtain the Subject and Body of the email."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Project` to get the Members names."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the the members in the project."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the OwnerAccount information."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Sends email to all the members with header Subject and message Body."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Display the success message."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Activity Diagram for BroadcastMail"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::BroadcastMailActivityDiagram.png[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram above shows how `broadcastMail` works. When the command is executed, it will throw a CommandException if the user"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "has not checked out or have not signed in. Otherwise, broadcast message will be executed normally."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the broadcastMail commands"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The alternatives are similar to sendReminder as the underlying problem lies in sending email"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "to all the members in the project group."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::broadcastMail[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::signIn[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Sign In feature"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Signs in using a Google account for mailing purposes."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The basic implementation uses javax.Mail to check for the validity of the email address and password."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "User\u0027s email account information is stored in the Model class through this command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "In this version, only gmail server has been made available for use in signing in and sending emails."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "signIn takes in two inputs, first is the email address of the user (in gmail), second is the password to the email address."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The following sequence diagram shows the process of signing in to the user\u0027s account."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Sequence Diagram for signIn command"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SignInSequenceDiagram.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These are the stages shown in figure 15."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Parses the input to obtain the Email address and Password."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to check if user has signed in."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Creates OwnerAccount with the address and password."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to store the Email address and Password as `OwnerAccount`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Display the success message."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Activity Diagram for SignIn"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SignInActivityDiagram.png[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram above shows how `signIn` works. The command will result in CommandException to be thrown if user has"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "already signed in with a valid email address (gmail) and password. If the user has not signed in, it will result in CommandException if"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "either the user\u0027s email address or password is incorrect or does not match. Otherwise, the command will be executed and"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "the user\u0027s Account information will be stored."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Algorithm to check validity of the Account in SignIn commands"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 1 (current choice):** Sends an email to a dummy email address cs2103t17@gmail.com."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Easy to implement. Do not need to use external libraries which might be time-consuming and difficult to learn."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Takes a while for the method to be executed as it checks whether it can send an email to the address cs2103t17@gmail.com."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 2:** Use external libraries and utilise more of the javax.Mail API."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Might make the email checking more efficient, thus need only check for the password input."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Would have to use external libraries which will be harder to implement. Only checks for the existence of the email address and does not"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "check for the correctness of the password input."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Eliminating signIn command"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 1 (current choice):** Lets user Signs In using their own Gmail Account."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Allows users to user their own Gmail Account and lets members(recipients) know email"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "sent by the team leaders."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Expose users\u0027 password when users are trying to sign in. Users will need to change the account"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "security settings to let less secure app access the account. Compromises account security."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 2:** Hardcode an account in the application that is responsible for all mailing command."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Do not expose users\u0027 password and Users do not need to change their Account security settings to"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "send the emails."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Members(recipient) receiving email from the users\u0027 may not know the origin of the email."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This may lead to confusion for the project\u0027s members."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::signIn[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// tag::setTimetable[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Timetable input"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature is used to input timetable data, which would then be used in the `generate` command to find a suitable meeting timeslot."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "There are two ways to input member\u0027s timetable:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send a formatted text file to the team leader, which would then be parsed by the system. The file would be a list of newline separated time ranges"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send their NUSMods timetable URL to the team leader, and the system would parse the URL and fetch timetable data using NUSMods API"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "User command would be in the format: `setTimetable INDEX m/member [n/NUSMODS_URL] [f/FILEPATH]`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic is implemented within the `TimetableInput` class, which is invoked by the `SetTimetableCommand` class."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Important functions in `TimetableInput`:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimetableInput#getTimetableFromNUSMods(Url url)` -- Parse URL and fetch timetable data using NUSMods API"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimetableInput#getTimetableFromFile(String filepath)` -- Parse file to obtain timetable data"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is an overview of the classes related to time+table input:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Class diagram for timetable input feature"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/SetTimetableClassDiagram.png[]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`setTimetableCommand` accepts either a filepath or a URL, which is then supplied to `TimetableInput` to fetch the timetable data."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Afterwards, the timetable is passed into `TimetableVisualization` to provide a visual representation of the set timetable. This visualization is then passed back as a `CommandResult` to be displayed to the user."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following sequence diagram illustrates what happens when the user issues the command `setTimetable` to add their timetable from a shared NUSMods timetable."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeline of entire process from user executing their command to getting the result back."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/SetTimetableSequenceDiagram.png[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to input timetable"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 1** (current choice): Input timetable by importing timetable from an already existing platform."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: More practical and convenient for users to input, as opposed to manually typing in all the timetable for every single members."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Feature unreliable as it requires maintainance if the web API changes."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 2:** Input all time ranges manually by user."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Very reliable due to lack of usage of online APIs."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Very impractical. Most users would not want to enter timetable data of all their members one by one, and would probably skip this feature."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We realized that it is very impractical to expect users to input timetable manually all by themselves. No matter how unreliable the web API is, the feature would at least be useful to users. If users have to manually input all the data, we cannot realistically expect this feature to be useful at all."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// end::setTimetable[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// tag::generate[]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Generate meeting timeslot"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The timeslot generator is used to suggest meeting timings by making use of team members\u0027 timetable."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature makes heavy use of the class `TimeRange`, which represents a period of time in a week, e.g. MONDAY 1000 -- MONDAY 1200."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic of this feature is contained within the `TimeSlotGenerator` class:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange)`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `members`: `List\u003cTimetable\u003e` of members of the checked-out `Project`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `desiredMeetingDuration`: How long the meeting would last in hour, expressed as a positive integer"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `restrictedTimeRange`: Sets the limit of generated `TimeRange`, e.g. restrict meeting to working hours, from MONDAY 0900 - MONDAY 1800"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Only the two following methods are exposed:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generate()` -- Generate timeslot suitable for *_all_* `Timetable` supplied. Returns a list of `TimeRange`, or an empty list of `TimeRange` if no such timeslot is available."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generateWithMostMembers()` -- Generate timeslot where *_most_* members of the currently checked out project are available. Returns a list of `TimeRange`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature depends on the timetable stored internally as an attribute of each members:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Class diagram of the `TimeSlotGenerator`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotClassDiagram.png[]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Typical usage of `TimeSlotGenerator` would be look like this:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`List\u003cTimeRange\u003e availableTimeSlots \u003d new TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange).generate()`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following sequence diagram shows the entire process of generating timeslot after the command `generate d/2` is given:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeline of process from user entering the command to the results being displayed to the user."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotSequenceDiagram.png[]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "As shown in the sequence diagram above, the command execution would go through the following stages:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Fetch the data of members in the current project and pass them to the `TimeSlotGenerator`."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `TimeSlotGenerator` will extract their timetable and generate all possible `TimeRange`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Display result for the user to view all the possible timeslots that a meeting can be held."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "If `generate()` returns an empty `List\u003cTimeRange\u003e`, the program should automatically call `generateWithMostMembers()` and return it as result, informing the user that there is no timeslot where all members are available."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following activity diagram summarizes the general flow of the command `generate`:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".`generate` command tries to provide best possible meeting timeslot"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotActivityDiagram.png[]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm Used"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generate()`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Combine all the given `Timetable` into a single `List\u003cTimeRange\u003e combined`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `combined` is then processed further by merging overlapping `TimeRange` into a single `TimeRange`. E.g. `TimeRange(MONDAY, 1000, MONDAY, 1200)` and `TimeRange(MONDAY, 1200, MONDAY,1400)` are merged together to form a single `TimeRange(MONDAY, 1000, MONDAY, 1400)`. `List\u003cTimeRange\u003e merged` is then passed on to the next stage."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `merged` is then inverted, and returns `List\u003cTimeRange\u003e inverted` containing all timeslots where all the members are free."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `inverted` is then processed to ensure that all `TimeRange` falls within `restrictedTimeRange` specified by the user, truncating all `TimeRange` that extends beyond the specified `restrictedTimeRange`, returning `List\u003cTimeRange\u003e truncated`."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". The algorithm then filters `inverted` by rejecting all `TimeRange` that last shorter than `desiredMeetingDuration` specified by the user. This `List\u003cTimeRange\u003e accepted` is then passed back to the caller of this method, and the algorithm terminates."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generateWithMostMembers()`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Iterates over all possible combinations of timetables in descending order of number of timetable."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". For each possible combination, call `TimeSlotGenerator#generate()`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". If `TimeSlotGenerator#generate()` returns an empty list, repeat step 2 again."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Algorithm terminates, returning the combination of List\u003cTimetable\u003e used and available timings `List\u003cTimeRange\u003e` wrapped in a class `TimeSlotWithMember`."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to generate timeslot with most number of available members"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 1 (current choice):** Iterate over all possible combinations of timetables, sorted in descending order of number of timetables, and call `TimeSlotGenerator#generate()` on each of these combinations."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: May have performance issues in terms of speed. This implementation takes O(2^n^) time for _n_  members."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 2:** Use a more sophisticated algorithm to shorten generation duration"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Will be much more efficient"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Harder to implement, and more specialize towards only doing a single task. Tough to maintain and adapt for other usage."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We went with options 1 as there is no real difference in speed if the number of members is restricted to below 15 members, which many projects do not normally exceed. It is much easier to understand and maintain by other developers as well."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// end::generate[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Finance feature"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The finance feature allows the user to keep track of the budgets of"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the project and view them in a graph. The graphs are achieved"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "using JavaFX built in bar and pie chart. The user is also able to store"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the information in an excel sheet as well. This is done using"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the Apache POI API. The documentation of this library can"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "be seen at https://poi.apache.org/apidocs/[here]."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This logic of the feature is based on the the construction of different classes."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".This class diagram depicts the interaction among classes under finance feature."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::FinanceClassDiagram.png[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The fact that `Budget` contains two money object is that it maintains"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "two attribute `amount` and `remainingAmount` as these are usually"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the crucial information the user wants to see."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`Money` is represented as an object. As it is shared by the"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`Spending` class and the `Budget` class and they all require to"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "check the validity of a given string to convert it to `BigDecimal`."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[[Implementation-Checkout]]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Checkout"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This allows user to checkout to a project from a list of project to work on it."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Almost every command regarding the project require the user to checkout first."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "For it to work, the ModelManager class is holding an additional `Optional\u003cProject\u003e`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "attribute and the model supports three new methods:"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `setWorkingProject()` -- Sets the attribute to the argument of the method."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `getWorkingProject()` -- Returns the current project."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `isCheckedOut()` -- Checks whether the current working project is empty."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `removeWorkingProject` -- Sets the attribute to `Optional.empty()`."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "A typical use of the command can be seen in the sequence diagram below."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::CheckoutSequenceDiagram.png[]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[[Implementation-Change-in-UI-display]]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Change in UI display"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The first step of changing UI display is to find out"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "whether a change in UI is needed given a command from user."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This is done in the CommandResult class constructor. If a command"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "word matches actions that is email related or help or exit,"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the flag will indicate that a change in UI is not needed."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Next, a class to represent the state of UI is needed to remember"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a history which is the `UiEvent` class.UiEvent is a class that represent"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a type of UiDisplay as an event. It stores the current state of the"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "application\u0027s UI and the current working project index if it exists."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Whenever a command is executed, a new UiEvent will be generated and stored in history"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if this command lead to a state"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that is different from the current one."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The `viewHistory` is stored in the `MainWindow` class as a stack of UiEvents"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and the class also maintains a currentStatePointer. When a `back` command"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "is executed, it can check back on what is the previous state."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#changeUiDisplay` -- Change the Ui and change the current state."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#getPreviousState` -- Pops the stack and peek to look for the previous state."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#handleBack` -- Change the Ui display to the previous state."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#getState` -- Get the state given a command word."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Given below is an example of how the UI behave at each step."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 1. The user launches the application and the `viewHistory` will be initialized with the"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`PROJECT_LIST` state. The `currentStatePointer` is currently pointing to"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that single address book state."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState0.png[]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 2. The user executes `checkout 1` command to checkout to project 1 to work on."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "During the execution of the `checkout` command, when commandresult is created,"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it detects that there is a need to change the Ui and the flag is made to true."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "In the `MainWindow`, since a change is needed, `MainWindow#changeUiDisplay` is called"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "to change the display to `PROJECT_OVERVIEW` which is found out using"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the `MainWindow#getState` method. It also set the `currentState` to be `PROJECT_OVERVIEW`."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The UiEvent with the state of `PROJECT_LIST` and an empty index will be stored"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "in the `viewHistory` stack."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState1.png[]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 3. The user now decide to add a budget by `addBudget b/ equipment 3000.00`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This command does need a change in Ui display but the state of this command"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "is exactly the same as the previous command thus `MainWindow#changeUiDisplay`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "will be called with the same state."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Thus, the method `MainWindow#changeUiDisplay` is still called but this time"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it is called to update the information in the current display and set the"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "current state to be still the current state. Thus, the `currentStatePointer` does"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "not move."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState2.png[]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If a command fails its execution, a `commandResult` wont be generated thus no change in Ui will happen."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 4. The user now wants to have a better view of the budgets and executes"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`listBudget`. Same step follows through the checkout command."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState3.png[]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 5. The user now decides to go back to the home page and executes"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "two consecutive `back` command. At the execute stage in `MainWindow`,"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it detects it is a back command and `MainWindow#handleBack` is called."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This method will then pop the current state by `MainWindow#getPreviousState`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and call `MainWindow#changeUiDisplay` to display the previous Ui."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState4.png[]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState5.png[]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".This diagram shows how the Ui reacts to an user\u0027s input"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayActivityDiagram.png[]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If the `currentStatePointer` is at `PROJECT_LIST`, then there are"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "no previous UI states to go back. Under such situation, an error will be returned."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::performanceTracking[]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Performance Tracking"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "We allow users to be able to track the performance of every member in the project, by using information that the user has"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "already input into MyProject."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The `Performance` of each `Person` is consolidated and stored in a `PerformanceOverview` object inside the model."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`Performance` of a `Person` stores the information such as tasks assigned to the person, which are specific to the person. The actual performance"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "of the person can only be calculated in `PerformanceOverview` with information from the `Project` as well."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`PerformanceOverview` is a separate model we have implemented, which consolidates all the data from each `Person` involved"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "in the specific project, as well as from the project itself. The following is a class diagram for `PerformanceOverview`."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::PerformanceOverviewClassDiagram.png[picture,250]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "A typical `PerformanceOverview` is created using the following constructor:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`PerformanceOverview(project, memberList)`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `project` - This is the `Project` that the user is concerned about."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `memberList` - This is the `List\u003cPerson\u003e` which consists of all the `Person`(s) involved with this project. Note that they each"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "have their own `Performance` as well."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "All the calculations of the various components constituting the performance of an individual is calculated within the `PerformanceOverview`,"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "and the results are accessed using each of the following commands:"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `PerformanceOverview#getAttendanceOf(Person person)` - Gets the number of meetings attended by the `Person`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `PerformanceOverview#getRateOfAttendanceOf(Person person)` - Gets the percentage of meetings attended by the `Person`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `PerformanceOverview#getNumOfTaskDoneOf(Person person)` - Gets the number of tasks completed by this `Person`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". `PerformanceOverview#getTaskCompletionRateOf(Person person)` - Gets the percentage of the assigned tasks, which the `Person` completed"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Internally, every attribute of the performance of an individual a HashMap for that particular attribute. For example, the task completion"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "rate of every individual is stored in a `HashMap\u003cString, RateOfTaskCompletion\u003e` where the key is the string of the name of the member, while"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the value is the rate of task completion. Every other attribute is stored in similar fashion."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Next, we will demonstrate the process of using this feature to see the performance of each member. The following sequence diagram"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "shows the entire process of calculating the performance of member and showing it, after the `showPerformanceOverview` command"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "is input by the user."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Sequence diagram of the `showPerformanceOverview` command execution"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::ShowPerformanceOverviewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "With reference to the sequence diagram above, here are the steps of the command execution:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. The user input is parsed, and a `ShowPerformanceOverviewCommand` is created."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. The execution of the `ShowPerformanceOverviewCommand` fetches the `Project` that the user is working on, and also"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the `Person`(s) involved in the project and returns them as a `List\u003cPerson\u003e`."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. The `List\u003cPerson\u003e` and `Project` are used to create the `PerformanceOverview`. Here you can see that when a `PerformanceOverview` is created"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "there are 4 methods being called internally. This is where all the necessary information is taken from the project and members, and used to"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "calculate the different attributes of the member\u0027s performance. It is also in those 4 methods, where the HashMaps are created."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 4. The `PerformanceOverview` is set in the `Model`, and displayed to the user subsequently."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The following activity diagram summarizes the general flow of the execution of the `showPerformanceOverview` command:"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Activity diagram for `showPerformanceOverview`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::ShowPerformanceOverviewActivityDiagram.png[picture, 400]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "As shown in the activity diagram, there are only 2 main flows during the execution of this command. If there are members"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "in the project, the performance of the members can be calculated, and the performance overview will be displayed"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to the user. If there are no members in the project, the user will be shown an error message to tell them that"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the performance overview cannot be computed."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "**Data structure of `PerformanceOverview`**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* **Alternative 1(Current implementation):** Currently, every attribute is stored and paired to the member using a HashMap. The key"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "is the string representation of the name of the members, and the value is the attribute itself."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "*** In order to add a new attribute to measure performance, there is only a need to add a new HashMap, a method to calculate the values,"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "and a method to retrieve the values."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "*** It is more difficult to iterate through all HashMaps to retrieve the values based on your preferred ordering."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::performanceTracking[]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* university students (will be expanded to working adults as well in future versions)"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* handles many different projects at once"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* unable to keep track of tasks and deadlines"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* loves visual aids such as charts and graphs to display information"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* needs a single app to store all kinds of different information"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "fadisng"
        },
        "content": "*Value proposition*: One stop project management app to store and display"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "fadisng"
        },
        "content": "different projects with user-friendly commands using a command line interface."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |give my projects names |uniquely identify all my different projects"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |store ongoing tasks for each project |conveniently delegate and manage the tasks that need to be done for each project"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |prioritise the tasks within a project |easily manage the progress of my project"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |assign a status to a task |keep track of which tasks are done and which are still ongoing"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |allocate tasks to my members and store this information |conveniently delegate tasks and ensure there are no overlaps"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |easily get an overview of what my members are currently doing |so that I know which member is responsible for which tasks within the project"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |be able to remind my members of upcoming meetings |ensure smoother team meetings as they are updated on the time and location, and there would be no unnecessary delays"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |backup my save file |"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |which members must be at a particular meeting |schedule a meeting even if there are no dates where every member is available"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |get a list of possible dates with attendance of each members |choose the optimal date with more relevant members"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |set a range of timings where meetings can be set |schedule meetings at timings customised to my own requirements"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |track the project\u0027s expenditure |ensure that the budget for the project will not be exceeded"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |sort tasks based on deadlines and show the list |know which are the tasks that are to be completed as soon as possible"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |team manager |access the list of valid commands that I can use |"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |find an optimal meeting location based on each team members\u0027 location |optimise the convenience of the team meeting locations for each team member"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |remind members of their deadlines for their allocated tasks |make sure the tasks are completed promptly"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |find a date that everyone is free for team meetings |"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |categorise the projects based on my preferences |better organise the projects"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |set an agenda for meetings |I can avoid meetings that are unproductive due to lack of things to do"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |send standardised emails to every team member containing the most updated project details |keep all my members up to date with the latest information when needed"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`*` |Team Manager |send the minutes from a meeting to each member |keep each member updated on what was discussed during the meeting"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |change the theme of the application |make it look the way I want it to"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |be recommended locations which are conducive for the meetings |"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |export a project as a word document |use it easily with other third party applications as needed"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - Add a project"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User requests to add a project."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. MyProject adds the project with respect to the arguments passed in by user."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. The arguments passed in are incomplete/wrong."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 2a1. MyProject shows an error message."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Checkout to a project to work on"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User requests to list projects."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. MyProject shows a list of projects."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. User requests to switch to a project in the list to work on."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "fadisng"
        },
        "content": "4. MyProject switches to the project for the user."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject shows an error message."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Edit a project"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. User requests to edit current project."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. MyProject requests for details of change."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "fadisng"
        },
        "content": "4. User enters the requested details."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "fadisng"
        },
        "content": "5. MyProject edits the details of the project and displays the information of the edited project."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3a. The given details do not match the given format."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject requests for the data and displays the format to be input."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a2. User enters new data."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Edit a member"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. User requests a list of members."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. MyProject shows a list members in this project."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "fadisng"
        },
        "content": "4. User chooses a member to edit based on the index and uses the corresponding prefix to change the desired attribute."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "5. MyProject makes the changes and displays the member with the updated attributes."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject shows an error message."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3b. The prefix used does not match any of the predefined prefixes."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3b1. MyProject shows an error message."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: [.underline]#UC05# - Send reminder"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Preconditions: User has the e-mail addresses of all the team members, user has an email account and team members has the e-mail address of the user."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "2. User selects the uncompleted tasks in the project."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "3. User sends reminder to the members in charge of the tasks to complete by the specified deadline."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "4. Team members reply for acknowledgement."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "5. User receives acknowledgement."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3a. All the tasks in the project has been completed."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1.  User requests for for availability for the next meeting time."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 5a. Team members do not receive the reminder e-mail."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 5a1. User does not receive acknowledgement reply."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 5a2. User resend the reminders to team members who do not reply."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes from step 6."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Store team members’ availability"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. Team members send user their respective timetable as a text file."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. Team leader stores timetable for the respective team member."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Steps 1 - 2 are repeated for each team member, until all team members’ timetables are stored."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* 2a. Text file invalid."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 2a1. MyProject prompts team leader that given file is invalid."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "fadisng"
        },
        "content": "**\t2a2. Team leader requests for resubmission of timetable from team member."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - Generate time slot where all team members are available for meeting"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#stores all team members’ availability (UC06)#."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. Team leader request for a meeting within a specific range of time."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. MyProject displays a time frame where all team members are available."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. No time slot exists such that all team members are available."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "fadisng"
        },
        "content": "   Expected: Shows the GUI with a set of sample projects. The window size may not be optimum."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Sending Reminders"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Prerequisites: Checkout to a project using the checkout command. Sign in using the Gmail Account using the signIn command."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: sendReminder d/0 +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: no reminders are sent as the duration is 0, no meetings or tasks are due in 0 days."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: sendReminder d/-1 +"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: no reminders are sent as the duration cannot be a negative number."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Other incorrect sendReminder commands to try: sendReminder d/hello (where duration is an alphabet), sendReminder d/0.9 ("
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "duration can only take numeric character whereas 0.9 contains \".\"), sendReminder d/ (duration cannot be empty)"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Broadcasting Email"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Prerequisites: Checkout to a project using the checkout command. Sign in using the Gmail Account using the signIn command."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: broadcastMail su/ me/ +"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: An email with empty Header and empty Message body will be sent to all members in the project."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: broadcastMail su/0.%$\u002689 me/lkjhsd +"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: An email with header \"0.%$\u002689\" and message body \"lkjhsd\" will be sent to all members in the project."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. There is no incorrect broadcastMail commands as the header and the message body can be anything that the user likes."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Signing In"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Prerequisites: Enable access to less secure app in the Google Account security settings. Disable the two-step verification method in the"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Google Account security settings. Use google account email address."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: signIn ac/hello@yahoo.com pa/12345678 +"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: failed to sign in as the input would expect a gmail domain to be keyed in."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input: signIn ac/hello hello pa/123213 +"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: failed to sign in as the email address keyed in is not in the correct email format."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Command input signIn ac/ pa/"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Expected output: failed to sign in as an empty email address is not a valid format for an email address."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".. Other incorrect commands for signIn: signIn ac/cs2103t17@gmail.com pa/ (failed to sign in as the"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "password for the email address is wrong) signIn ac/111111 pa/111111 (failed to sign in"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "due to invalid format for email address)"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  .. Prerequisities: Checkout to a project using the `checkout` command. Multiple tasks in the task list."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  .. Test case: `editTask 1 d/` +"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     Expected: First task is marked as done(cross changes to a tick)."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  .. Test case: `editTask 2 s/Do parts of the parser` +"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     Expected: The description of the second task is edited. Since d/ is not included in the input, the task is unchecked."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  .. Test case `editTask 3 d/` +"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     Expected: No task is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  .. Other incorrect editTask commands to try: `editTask x` (where x is negative or larger than the list size), `editTask c/1/1/2019 1500` (Wrong time format)"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sorting a task"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. Prerequisites: Checkout to a project using the `checkout` command. Multiple tasks in the task list sorted according to the default order of increasing time(index 2)."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. Test case: `sortTask 4` +"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  Expected: Tasks will automatically be sorted by which tasks are done/not done and then by increasing order of time."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. Test: `sortTask 1`"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Expected: Tasks will automatically be sorted by alphabetical."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. Test: `addTask c/05/05/2019 1200 s/Allocate roles"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "fadisng"
        },
        "content": "  Expected: Task will be added to the first index as the list is sorted by alphabetical order and \u0027Allocate roles\u0027 has the highest priority."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. Incorrect sortTask commands to try: `sortTask x`(where x is not within the range mentioned which is between integers 1-4)"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Adding a member from contacts"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Prerequisites: Checkout to a project using the `checkout` command. You also need to have multiple `Person`(s)"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "in your contacts."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `addFromContacts 1` +"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: First person in your contacts is added your your project."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `addFromContacts 2 3` +"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: Adds both the second and third person into your project."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `addFromContacts 2000`"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: No members are added, error message is shown saying the index is invalid."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Other incorrect addFromContacts commands to try: `addFromContacts` (this is an incorrect format since no index is specified) +"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`addFromContacts -1` (This is an invalid format since index should be positive)"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Assigning a task to members"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Prerequisites: Checkout to a project using the `checkout` command. There are one or more tasks in your project. There"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "are one or more members in your project."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `assignTask 1 1` +"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: First task listed in the project is assigned to the first person listed in the project as a member."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `assignTask 1 2 3` +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: First task listed in the project is assigned to both the second and third person listed in the project."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Test case: `assignTask` +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Expected: No tasks are assigned and error message for invalid format is shown."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".. Other incorrect `assignTask` commands to try: `assignTask 2000 1` (this should be an incorrect task index specified) +"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`assignTask -1 2 3` (this is an incorrect format as indexes should be positive)."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Set timetable to person"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".. Test case: `setTimetable 1 n/https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27` +"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Expected: Data is fetch from the internet and added successfully. Scroll down on the result box to view visualization of timetable set."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".. Test case: `setTimetable 1 n/https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D1` +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Expected: Error message should show due to invalid URL. System should pinpoint which module is invalid on the URL"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Generate timetable"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Assuming timetable is added as above, with person at index 1 in the checked out project"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".. Test case: `generate d/2 r/MONDAY 0800 MONDAY 1000` +"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Expected: Time slots generated successfully. Should see visualization on result panel."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".. Test case: `generate d/2 r/MONDAY 0900 MONDAY 1100` +"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Expected: Unable to generate any time slots."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".. Other test cases to try out"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "... Other timetables added to other members in the same project, and use generate command."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 207,
      "ccyccyccy": 147,
      "philipalexanderb": 216,
      "fadisng": 155,
      "jerryk1997": 211,
      "-": 353
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 122
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 83
    }
  },
  {
    "path": "docs/ShowPerformanceOverviewActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "skinparam  centre"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":User wants to see the performance overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                for the current project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "if () then ([project has members])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":Obtains relevant information from the members in the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                 project and the project itself;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":Calculate the every attribute of performance for each member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":Display performance overview;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "else ([project has no members])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":Shows error message that performance cannot be  calculated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     with no members in the project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 20
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d MyProject V1.4 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T17-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "By: `T17-1`      Since: `Oct 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Content*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Introduction:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MyProject (MP) is for team leaders who prefer to use a desktop app for managing their projects."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MP is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "With MP it is a one-stop app to store and manage your projects and their relevant information,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "this is especially useful if you are always managing multiple projects across different teams."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MP has unique functions such as sending emails to members within the app and financial tracking capabilities etc."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Currently our app is optimized  for students to use but we intend to expand further to working adults as well."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Interested? Jump to the Section 2, “QuickStart” to get started. Enjoy!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Quick Start:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Download the latest release https://github.com/AY1920S1-CS2103T-T17-1/main/releases[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for MyProject."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. list : lists all contacts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. exit : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Please do not modify the data file or corrupt it in any way. MyProject will not work as intended if you do!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".The home page of MyProject listing all the projects you have"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::home-page.png[]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Parameters enclosed in square brackets[] are optional."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Basic Commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Here are some basic commands to start and navigate around the app."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Provides a url to this user guide for a more comprehensive list and explanation for each command. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Checkout a project: `checkout`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Checkout a project to begin working on the project immediately."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    Commands which require a project to be checked out first will be tagged using [Checkout]."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `checkout INDEX`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number used to identify the project in the project list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `checkout 1`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Return to previous: `back`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "If you want to return to the previous view page of the app, simply type the command `back`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `back`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". `checkout 1`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". `back`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the app: `exit`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Once you\u0027re done with using the app, you can use this command to close the app."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Adding Items"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with adding information to the application."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Add a project: `addProject`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a new project into your list of projects. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addProject n/PROJECT_TITLE s/PROJECT_DESCRIPTION`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `addProject n/CS2103 project s/Software engineering project`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Add a person: `add`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a person to your contacts."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "When you add a person to your contacts, it will automatically change to displaying your list of contacts. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Add a profile picture"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Unlike other commands, we have implemented this feature to be one of the easies to use. Simply drag a picture over to the panel which the person is at, and the picture will shown as the person\u0027s profile picture in your contacts!"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::addMember[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new member: `addMember` [Checkout]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This command is similar to adding a person to your contacts shown previously, except that you have to be"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "checked out into a project, and the person will be added to the working project as well. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addMember n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/address] [t/tag]...`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adding a member only requires his/her name!"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "However it will be good to add as much information as possible."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addMember n/John Doe a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addMember n/Betsy Crowe e/betsycrowe@example.com t/friend`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide, using the second example."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1: You type in the `addMember` command, followed by all the information you want to store, which in this case"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "is her email and also her tag as a friend. With this, before you press enter your screen should look like this:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`AddMemberCommand` user input"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AddMemberCommandInput.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "If your screen looks like the picture above, just press enter and you\u0027re done! Adding a new member is just a simple"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "one step process."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "After you press enter you will be able to see the member reflected in the project like this:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`AddMemberCommand` success project overview display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::ProjectOverviewAddMember.png[picture, 400]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "And you will also be able to see her in your contacts like this:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".New Member displayed in your contacts as a new person added."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::PersonListAddMember.png[picture, 400]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "If you look closely at Figure 5. you will see that some of the information does not really seem right. That is because"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "you have not input it yet, but don\u0027t worry you can always do that later with our `edit` command which you will further down"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the guide."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::addMember[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::addFromContacts[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Add from your contacts: `addFromContacts` [Checkout]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This command helps to add a person you already saved in your contacts into your project, reducing the need"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to type his information all over again. All you need to do is enter the index he is listed at. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addFromContacts INDEX...`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number which the person is listed at, and it should be a positive integer eg. 1, 2, 3, ...."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You can put multiple indexes to add multiple people to your project at once isn\u0027t that convenient! E.g. `addFromContacts 1 3 5`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addFromContacts 1`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. Find the person you want to add, and take note of the index which the person is listed at. Referring to the picture"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "below, let\u0027s say you want to add \u0027Bernice Yu\u0027 into your project. Notice her index is 2."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Finding the person to add"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AddFromContactsFindPerson.png[picture, 400]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. Type in the `addFomContacts` command with the index `2`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`addFromContacts` command input."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AddFromContactsCommandInput.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. Press enter and you\u0027re done! Refer to the picture below to see what your screen should look like."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AddFromContactsCommandSuccess.png[picutre, 400]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::addFromContacts[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// tag::setTimetable[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Set a timetable: `setTimetable`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Need to keep track of your team members\u0027 schedule? Use this command to record down their timetable easily!"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Timetable set can be used to generate available meeting timeslots using the command `generate`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`setTimetable INDEX [n/NUSMODS_SHARE_URL] [f/FILEPATH_TO_TIMETABLE]`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Assigns timetable to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* The index refers to the index number shown in the displayed person list using the command `list`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "****"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `setTimetable 3 f//home/john/Desktop/aliceTimetable.txt` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Set Alice\u0027s timetable to Alice, who has index 3 in the list of persons."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "File should be formatted as a newline separated list of time ranges, e.g: +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MONDAY 1000 MONDAY 1200 +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MONDAY 1400 MONDAY 1600 +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TUESDAY 1100 TUESDAY 1500"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `setTimetable 2 n/https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Set timetable to the person with index 2 on the list of persons, by retrieving timetable data from NUSMods."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is a step-by-step instruction to guide you through the process of setting a timetable to Alex, through the use of NUSMods:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 1: Type `list` and enter to view the list of persons. Identify the index of the person you wish to set the timetable to."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".List of person in the application"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-1.png[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 2: Type `setTimetable`, followed by the index of the person you wish to set the timetable to, and the URL of the share link."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".User enters timetable of team member"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-2.png[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 3: Press enter, and you would see the following message. You can even scroll down to view a simple visualization of the timetable set!"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".`setTimetable` command success"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3a.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Visualization of timetable set"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3b.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Even if you accidentally entered a wrong URL, MyProject would prompt you helpfully!"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Error message when entered URL is invalid"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3-error.png[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// end::setTimetable[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Add a task: `addTask` [Checkout]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds an unchecked task to the list of tasks of your current working project. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `addTask s/DESCRIPTION c/dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addTask s/Finish GUI c/06/10/2019 1600`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Whenever you add a time with the prefix c/, the format should be dd/MM/yyyy HHmm e.g"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fadisng"
        },
        "content": "10/12/2019 1600. MyProject will inform you if you attempt to add invalid days such as 30th February."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::addProjectMeeting[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Add a project meeting: `addProjectMeeting` [Checkout]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a new project meeting to the current working project.  +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `Format: addProjectMeeting c/ dd/MM/yyyy HHmm s/MEETING_DESCRIPTION`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`dd/MM/yyyy HHmm` refers to the date and time the meeting is to be held. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`MEETING_DESCRIPTION` refers to the purpose of the meeting."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Let\u0027s say that you plan to have a meeting on the 19th November 2019, you want to keep track of this meeting"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "by recording it down in the MyProject app."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "To add a project meeting:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. Type `addProjectMeeting c/19/11/2019 1300 s/Discussion on version 2` and press enter to execute it.Note that"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "this project meeting will be held after the 4th meeting on 16/11/2019 1700 and before the 5th meeting on 29/11/2019 1300."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:addProjectMeeting1.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "2. Success message with the respective information about the meeting will be displayed. The meeting added will"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "be automatically sorted according to the dates and times in ascending order. Thus, the new meeting added will"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "be placed as number 5."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:addProjectMeeting2.png[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::addProjectMeeting[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Editing"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with editing information shown on the application."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a person : `edit`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a task : `editTask` [Checkout]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Edits an existing task in the task list of the current project. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `editTask INDEX [s/DESCRIPTION] [c/dd/MM/yyyy HHmm] [d/]` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* If `d/` is not provided in the input, the task will automatically be unchecked."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `editTask 1 c/05/05/2019 1600 d/` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Edits the date and time to `05/05/2019 1600` and checks the task."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `editTask 2` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Unchecks the task."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Deleting"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with removing information within the application."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person: `delete`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Deletes the specified person from your contacts. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::removeMember[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a member: `removeMember` [Checkout]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Removes the specified person from the current working project. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `removeMember INDEX`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` refers to the index that the person is listed at under the members section of the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "project overview."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `removeMember 1`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. Find the person you want to remove from the project. Let\u0027s say you want to remove \u0027Bernice Yu\u0027 because"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "she just dropped your module. Notice her index is at 1"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Finding the person you want to remove"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::RemoveMemberFindingPerson.png[picture, 400]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. Type in the `removeMember` command with the index of `1`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`removeMember` command user input."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::RemoveMemberCommandInput.png[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. Press enter and you\u0027re done! She is now no longer a member of your project."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::removeMember[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a task: `deleteTask` [Checkout]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Deletes the specified task from the current working project.  +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `deleteTask INDEX`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number used to identify this task in the task list."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `deleteTask 1`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::deleteMeeting[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a meeting: `deleteMeeting` [Checkout]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Deletes the specified meeting from the current working project.  +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `deleteMeeting INDEX`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`INDEX` is the number used to identify this meeting in the meeting list."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* `deleteMeeting 1`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::deleteMeeting[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Listing Information"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d List your contacts: `list`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Shows you the list of contacts you have currently along with their respective information. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d List your budgets: `listBudget` [Checkout]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "fadisng"
        },
        "content": "See the summary of all budget which shows how much money is left with that budget and where is this budget used. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `listBudget`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".Present budget in a pie chart depicting all expenses under the budget and the remaining amount."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::listbudget-command.png[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Finding"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Find a person by name: `find`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Meeting"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "For every project, you can add meetings to it, and below you will be able to find more useful commands"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "associated with this functionality."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// tag::generate[]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Generate meeting timing: `generate` [Checkout]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Need to decide on a meeting timing, but having trouble finding a time where all members are free? This command can help suggest meeting timings!"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Prerequisite:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Members have been assigned to the project using `addFromContacts` or `addMember`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Timetables have been assigned to the members with the command `setTimetable`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`generate` would *not* give an error if some members do not have timetable assigned to them. Ensure that you have done `setTimetable` for each of the members in the project before using `generate`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format: `generate d/DURATION [r/TIMERANGE]`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `generate d/2 r/MONDAY 0900 MONDAY 1800` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Generates all possible meeting timeslots that lasts at least 2 hours, within the time frame of Monday 9am to Monday 6pm."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is a step-by-step instruction to guide you through generating a meeting timeslot that lasts for at least 1 hours, between Monday 1000 to Monday 1800:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 1: To generate a meeting timing for a project, you first need to `checkout` that project."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeslot will be generated for the checked out project"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-1.png[]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 2: Enter the command with your desired duration of the meeting, and the time range to generate within"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Enter parameters for `generate` command"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-2.png[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 3: Press enter, and you will see the following result:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Suggested timeslots shown on the GUI"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-3.png[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "If MyProject is unable to find a timeslot where all members are free, it would try to find another timeslot where most members are free"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Result shown when not all members are available. Members available would be listed."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-alt.png[]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// end::generate[]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Email"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Tired of switching between applications? We got you covered, below you will find some commands which support sending"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "emails right here within the application."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Do keep in mind that the user Account in our current version is only compatible with Gmail Account and please ensure that the Access to less secure app in the security setting is enabled before signing in!"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::email[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Sign in to your account: `signIn`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Signs in to the your email account. +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `signIn ac/ACCOUNT_EMAIL_ADDRESS pa/PASSWORD`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`ACCOUNT_EMAIL_ADDRESS` refers to the sender\u0027s/user\u0027s email address."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`PASSWORD` refers to the password to the sender\u0027s/user\u0027s email address."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* `signIn ac/example@gmail.com pa/12345678`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Please Turn on the access to less secure app in your account\u0027s security setting."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This command is required to be executed before the remainder of the email commands can be executed. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The correctness of the email address used and the password will be checked."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Log out from your account: `logOut`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Logs out from your email account. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `logOut`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* `logOut`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Send an email: `sendMail`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sends an email to the specified person in your contacts. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `sendMail r/RECIPIENT_EMAIL su/SUBJECT me/MESSAGE_BODY`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`RECIPIENT_EMAIL` refers to the email address of the recipients. +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`SUBJECT` refers to the email header. +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`MESSAGE_BODY` refers to the email body."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* `sendMail r/example@gmail.com su/Test me/HelloWorld!`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "We will not check the correctness of the person\u0027s email address"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Broadcast an email: `broadcastMail` [Checkout]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sends an email to all members in the current working project. +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `broadcastMail su/SUBJECT me/MESSAGE_BODY`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`SUBJECT` refers to the email header. +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`MESSAGE_BODY` refers to the email body."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Let\u0027s say that a new task has just been added and you want to inform your group members of the new task. Instead of switching to another"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "application to inform your group members, you can simply use the `broadcastMail` command to inform everyone in the group."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "To broadcast Email:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "1. Type `broadcastMail su/New Task Added me/Finalise UG and DG before 17th November` and press enter to execute it."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Note that the `SUBJECT` will be sent as the email header and the `MESSAGE_BODY` will be sent as the email body."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:broadcastMail1.png[]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "2. A success message will be displayed in the box saying \"Mail have been sent successfully!\""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:broadcastMail2.png[]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "3. Members will receive the email that looks like the following:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:broadcastMail3.png[]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "We will not check the correctness of the members\u0027 email addresses"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Send reminder: `sendReminder` [Checkout]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Sends a reminder to all members from the current working project of the upcoming Meeting and Task that is due. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `sendReminder d/DURATION`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`DURATION` is the number of days from the current time within which the Tasks are due and The Meetings are held."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Let\u0027s say that you have several meetings and task for the coming week, and you want to remind your group of the upcoming meetings"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "and the tasks that are supposed to be done by the week."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Instead of typing all the meetings and tasks for the coming week all over again, you can just easily send these lists to their email"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "addresses from the application."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "To send reminder:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "1. Type `sendReminder d/7` and press enter to execute it.Note that the date at the time this screenshot was taken is 10/11/2019, thus,"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "only meeting meetings 2-4 and task 1-3 will be sent as reminders to the members."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:sendReminder1.png[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "2. A success message will be displayed in the box saying \"Reminders have been sent!\""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:sendReminder2.png[]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "3. Members will receive an email with the tasks due and meetings happening within the next 7 days."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:sendReminder3.png[]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "We will not check the correctness of the members\u0027 email addresses"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::email[]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Sorting"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The following section provides a set of commands which help with sorting the information inside the"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "fadisng"
        },
        "content": "application. MyProject makes it very easy and user-friendly by making all sort commands follow the same"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "fadisng"
        },
        "content": "format and index/order pairing as shown below!"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "All commands in this section follow this set of index/order pairing, where applicable:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Alphabetical order"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Increasing order of time"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done and then by increasing order of time"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing price"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The default sorting order for the following lists is by increasing order of time(index 2). Whenever MyProject"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "fadisng"
        },
        "content": "is closed, the ordering will return to the default order."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Sort tasks: `sortTask` [Checkout]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This command sorts the tasks in the task list of the current working project. +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `sortTask INDEX`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` refers to the index of the list provided in the highlighted section above which corresponds to the type of sorting you wish to apply."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "fadisng"
        },
        "content": "For example, index 1 corresponds to sorting by alphabetical order. For the case of sorting tasks, only numbers between 1 and 4 are applicable."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Let\u0027s say you have added many different tasks with different deadlines and progresses into MyProject. +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The default sorting order that MyProject offers is by increasing order of time(index 2). However you wish to group those tasks that are done in one group and those not done in another group and"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "fadisng"
        },
        "content": "then further sort each group by increasing order of time(index 4) to track the progress of your tasks. +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Simply type in the command `sortTask 4` and all the tasks in the list will immediately be sorted accordingly. +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "fadisng"
        },
        "content": "In addition, whenever you add a new task(Section 3.2.4) or edit the details of an existing task(Section 3.3.2), MyProject will automatically insert"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "fadisng"
        },
        "content": "the newly added or edited task into the correct position based on this new sorting order so you don\u0027t have to continuously type this command whenever"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "fadisng"
        },
        "content": "you wish to add or edit tasks! +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Here is a step by step process on how to do this."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Firstly, since this command is labeled with [Checkout] at the start, ensure that you `checkout` to a project first."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Notice how the tasks in the task list are currently at the default sorting order which is by increasing order of time."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask1.png[]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Next, enter the command `sortTask 4` into the command line and press enter. You can choose any index from 1-4 depending"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "fadisng"
        },
        "content": "on which type of sorting order you wish to sort by based on the specifications provided in the highlighted section above."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask2.png[]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". The following success message will be displayed if the input was entered correctly. Check that the type of sorting"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "fadisng"
        },
        "content": "displayed in the success message is the one you actually wanted. +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The tasks in the task list will then be immediately sorted accordingly as shown in the white box."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask3.png[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Now let\u0027s say the deadline for task 2(Do UG) is pushed forward by a week and you\u0027ve just completed it. Type in the command"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`editTask 2 d/ c/04/12/2019 0000`(check out section 3.3.2 for more details on the editTask command) into the command line and press enter. +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The task will be edited accordingly and immediately be sorted into the correct position as shown below."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask4.png[]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Sort spending: `sortSpending` [Checkout]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Sorts the spending in the budget list of the current working project based on given specification. The implementation is"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "fadisng"
        },
        "content": "slightly different from sortTask. MyProject will not show you the list of spending immediately after entering"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "fadisng"
        },
        "content": "the command `sortSpending`. Enter the command `listBudget` to view the newly sorted list of spending. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `sortSpending INDEX`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` refers to which type of sorting you want to do. In this case, only integers 1, 2 and 5 are applicable.(Refer to the highlighted section above)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `sortSpending 5` (Sorts the spending by increasing prices)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Sort meeting: `sortMeeting` [Checkout]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Sorts the meetings in the meeting list of the current working project based on given specification. The implementation is"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "fadisng"
        },
        "content": "exactly the same as sortTask. Refer to the sortTask section for a more detailed explanation. +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `sortMeeting INDEX`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` refers to which type of sorting you want to do. In this case, only integers 1 and 2 are applicable.(Refer to the highlighted section above)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `sortMeeting 1` (Sorts the meetings by alphabetical order)"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Imagine today you just attended the Budget meeting"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and your Organization is kind enough to provide you with"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "budgets for your event! How delightful! What’s better is"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that you can record this information in MyProject!"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add budget: `addBudget` [Checkout]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Let\u0027s say the organization gave you budgets on equipment and"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "manpower, let\u0027s first add these budgets to the project."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `addBudget b/NAME_OF_BUDGET ex/AMOUNT_OF_BUDGET`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::addBudget.png[]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "After adding the budgets, we will be able to see a summary of"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "them at project overview. Currently it only shows the amount"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "remaining which is the same as the amount you typed just now"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "because you haven\u0027t spent anything yet."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::projectOverview.png[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add expense: `addExpense` [Checkout]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `addExpense INDEX_OF_BUDGET s/DESCRIPTION ex/AMOUNT SPEND c/dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "One month later..."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have gone through quite a few meetings with the planning"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "committee and made some orders online and receive some invoices,"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "what\u0027s next? To record all these expenses, simply use the command"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "addExpense to add it under the budget. In order to do that, you"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "need the index of the budgets which you may already forgot, but"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "you may simply type listBudgets to view them again."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::addExpense.png[]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d List budgets: `listBudget` [Checkout]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "List information about the budgets. +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `listBudget`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "In the diagram below, you are seeing the pie chart representation of the budgets."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "It will usually show all the expenses made and the amount remaining for this budget."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "However, if you have already overshot the budget, the pie chart will show"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "overshot instead of remaining to remind you!"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::listBudget.png[]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "After all that have been done, a breakdown of the budget situation"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "will be available at the project overview with a stacked bar graph"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "indicating the amount remaining and the amount spent."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::projectOverviewFinal.png[]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Budget"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `deleteBudget INDEX_OF_BUDGET`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Of course you may make a mistake in typing in information about a budget"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "or your sponsors does not want to fund that budget anymore. Simplt type"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`deleteBudget` with the index to delete it!"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Excel sheet storage"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Keeping the planning committee updated regarding budget is always"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a challenge isn\u0027t it? Fret not, MyProject is here to help! Every update on"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the budget information will be recorded in an excel sheet located"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "in the budgets folder. It creates a sheet per project and display"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the budgets and expenses under the budget in a table form. You"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "can easily send this comprehensible document to your team members"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "to update them!"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::excelSheet.001.jpeg[]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// tag::performanceTracking[]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Performance tracking"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Knowing that it is hard to keep track of what every needs to do, or has done so far, MyProject gives you a simple"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "way of tracking the performance of each member as well. The following section will give you all the details you need"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to know about this feature."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Assigning a task: `assignTask` [Checkout]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This command allows you to assign a task to one or more of your members in the project. +"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `assignTask TASK_INDEX PERSON_INDEX...`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`TASK_INDEX` refers to the index at which the task is displayed at."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`PERSON_INDEX` refers to the index at which the member is displayed at. (You can input more than 1 index)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `assignTask 1 1`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You can assign a task to multiple people easily just by including all of their indexes E.g. `assignTask 1 1 3 5` this assigns task 1 to member 1,3 and 5."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. Find the task you want to assign and the members you want to assign the task to, and take note of their"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "indexes."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Finding the task to assign and the members to assign to"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AssignTaskFinding.png[picutre,  400]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. Type in the `assignTask` command along with the correct indexes."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Typing the `assignTask` command with the correct input"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AssignTaskCommandInput.png[picutre, 400]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. Press enter and you\u0027re done! You will now see the tasks reflected under the respective members in your contacts."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You will see a success message:"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`assignTask` command success message"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::AssignTaskCommandMessageSuccess.png[picture, 400]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "And also see the task reflected under the members:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".How the assigned task is shown"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::PersonListAssignedTask.png[picture, 400]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Unassigning a task: `unassignTask`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "With the ability to assign task, naturally you should be able to unassign a task as well, and you can do that with this"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "command. +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `unassignTask PERSON_INDEX TASK_INDEX...`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`PERSON_INDEX` refers to the index of the person as displayed in your contacts"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`TASK_INDEX` refers to the indexes of the tasks as displayed under the specific person"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `unassignTask 1 1`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You can unassign one or more tasks at once from a person by specifying all the task indexes. E.g. `unassignTask 1 1 3 5`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "this unassigns tasks 1, 3, and 5 from the first person."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. Identify the tasks you want to unassign and the person you want to unassign the tasks from, and take note"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "of their indexes."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Finding the tasks to unassign, and the person to unassign the tasks from."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::UnassignTaskFinding.png[picutre, 400]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. Type in the `unassignTask` command with the relevant inputs"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`unassignTask` command input"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::UnassignTaskCommandInput.png[picture, 400]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. Press enter and you\u0027re done!"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You will see a success message:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`unassignTask` command success message"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::UnassignTaskMessageSuccess.png[picture, 400]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "And you will no longer see the tasks reflected under the person."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Mark attendance: `markAttendance` [Checkout]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "MyProject also allows you to mark the attendance of one or more members for a meeting. +"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `markAttendance MEETING_INDEX PERSON_INDEX...`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`MEETING_INDEX` refers to the index of the meeting as displayed in the project overview"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`PERSON_INDEX` refers to the index of the person as displayed in the project overview"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `markAttendance 1 1`"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You can mark the attendance of multiple people at once, just by specifying all the indexes of the persons E.g. `markAttendance 1 1 3 4`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "this marks the attendance for meeting 1 for members 1, 3 and 4."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "To help you better understand how to use this command, here is a step-by-step guide."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 1. Identify the meeting you want to mark attendance for, and the members who were present."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Finding the meeting to mark attendance for and the members to mark attendance of"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MarkAttendanceFinding.png[picture, 400]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 2. Type in the `markAttendance` command with the relevant inputs."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`markAttendance` command input"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MarkAttendanceCommandInput.png[picture,500]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Step 3. Press enter and you\u0027re done!"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "You will see a success message:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".`markAttendance` command success message"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MarkAttendanceMessageSuccess.png[]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "And the meeting will show up under the information of the person like this:"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ".Showing attendance marked"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::PersonListMarkAttendance.png[picture, 400]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing performance overview: `showPerformanceOverview`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "After assigning the tasks and marking the attendance of members, you can use this command to give you a comprehensive"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "view of how each member is performing within the project isn\u0027t that convenient! +"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `showPerformanceOverview`"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "There are 4 attributes that we calculate for every member which constitutes their performance:"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Number of tasks completed"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Percentage of assigned tasks completed (Rate of task completion)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Number of meetings attended"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Percentage of total number of meetings attended (Rate of attendance)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Refer to the pictures below to understand more about how we display this information in a organised manner to you."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Table showing the number of task each member completed:"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::NumTaskTable.png[]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Table showing the percentage of their assigned tasks each member completed:"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::TaskCompletionTable.png[]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Table showing the number of meetings each member attended:"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::NumMeetingsTable.png[]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Table showing the percentage of the total number of meetings each member attended:"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::MeetingRateTable.png[]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Lastly you can also view each member individually after scrolling through the tables:"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::IndividualPerformances.png[performance, 300,400]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "// end::performanceTracking[]"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 84,
      "ccyccyccy": 97,
      "fadisng": 179,
      "philipalexanderb": 130,
      "jerryk1997": 357,
      "-": 104
    }
  },
  {
    "path": "docs/diagrams/BackSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Alice -\u003e Bob: Authentication Request"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Bob --\u003e Alice: Authentication Response"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Alice -\u003e Bob: Another authentication Request"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Alice \u003c-- Bob: another authentication Response"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7
    }
  },
  {
    "path": "docs/diagrams/BroadcastMailActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": User wants to broadcast message to members;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([not checked out])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw CommandException"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "          not checked out;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([Checked out])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([is signed in])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Obtain current list of members;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Obtain ownerAccount for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "user\u0027s email and password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":sends email with given Subject and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "           message Body by user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Display success message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([not signed in])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Throw CommandException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            not signed in;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 27
    }
  },
  {
    "path": "docs/diagrams/BroadcastMailSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":BroadcastMailCommandParser\" as BroadcastMailCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":BroadcastMailCommand\" as BroadcastMailCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Mailer\" as Mailer LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Project PROJECT_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Project\" as Project PROJECT_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[-\u003e LogicManager : execute(\"broadcastMail Subject, Body\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"broadcastMail Subject, Body\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create BroadcastMailCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e BroadcastMailCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate BroadcastMailCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate BroadcastMailCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e BroadcastMailCommandParser : parse(Subject, Body)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate BroadcastMailCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create BroadcastMailCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommandParser -\u003e BroadcastMailCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate BroadcastMailCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand --\u003e BroadcastMailCommandParser : Subject, Body"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate BroadcastMailCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommandParser --\u003e AddressBookParser : Subject, Body"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate BroadcastMailCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "destroy BroadcastMailCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser --\u003e LogicManager : Subject, Body"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e BroadcastMailCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate BroadcastMailCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand -\u003e Project : getMemberNames()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Project"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Project--\u003e BroadcastMailCommand : List\u003cString\u003e MemberNames"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Project"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand -\u003e Model : getMembers()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e BroadcastMailCommand : List\u003cPerson\u003e members"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand -\u003e Model : getOwnerAccount()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e BroadcastMailCommand : OwnerAccount"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "loop for each members in the project"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   BroadcastMailCommand -\u003e Mailer : sendMail()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   activate Mailer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   Mailer -\u003e BroadcastMailCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   deactivate Mailer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand-\u003e CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "CommandResult --\u003e BroadcastMailCommand : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "BroadcastMailCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate BroadcastMailCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 95
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package Initial_State {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 18
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package After_Checkout_Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package After_AddBudget_Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package After_ListBudget_Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package After_First_Back_Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17
    }
  },
  {
    "path": "docs/diagrams/ChangeUiDisplayState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package After_Second_Back_Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State1 as \"__e0:PROJECT_LIST__\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State2 as \"__e1:PROJECT_OVERVIEW__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class State3 as \"__e2:PROJECT_FINANCE__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 18
    }
  },
  {
    "path": "docs/diagrams/CheckoutSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \":CheckoutCommandParser\" as CheckoutCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \"c:CheckoutCommand\" as CheckoutCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[-\u003e LogicManager : execute(\"checkout 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"checkout 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "create CheckoutCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "AddressBookParser -\u003e CheckoutCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate CheckoutCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate CheckoutCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "AddressBookParser -\u003e CheckoutCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate CheckoutCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "create CheckoutCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommandParser -\u003e CheckoutCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate CheckoutCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommand --\u003e CheckoutCommandParser : c"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate CheckoutCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommandParser --\u003e AddressBookParser : c"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate CheckoutCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "destroy CheckoutCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "LogicManager -\u003e CheckoutCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate CheckoutCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommand -\u003e Model : setWorkingProject(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Model --\u003e CheckoutCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CommandResult --\u003e CheckoutCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "CheckoutCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate CheckoutCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 69
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 21\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/FinanceClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Package Project \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Finance {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Budget {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "-name: String"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Spending {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "-description: String"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Money {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "-amount: BigDecimal"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Class Time {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "+time: String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "+date: Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Finance *--\u003e \"*\" Budget"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Project *--\u003e \"1\" Finance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Budget *--\u003e \"*\" Spending"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Budget *--\u003e \"2\" Money"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Spending *--\u003e \"1\" Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Spending *--\u003e \"1\" Money"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29
    }
  },
  {
    "path": "docs/diagrams/GenerateSlotClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027@enduml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBook *-down-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Project --\u003e \"member *\" Person"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Person -\u003e \"1\" Timetable"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TimeSlotGenerator -down-\u003e Timetable"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 34
    }
  },
  {
    "path": "docs/diagrams/GenerateSlotSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":GenerateSlotCommandParser\" as GenerateSlotCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \"g:GenerateSlotCommand\" as GenerateSlotCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":TimeSlotGenerator\" as TimeSlotGenerator LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[-\u003e LogicManager : execute(\"generate d/2\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"generate d/2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create GenerateSlotCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e GenerateSlotCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e GenerateSlotCommandParser : parse(\"d/2\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create GenerateSlotCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser -\u003e GenerateSlotCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand --\u003e GenerateSlotCommandParser : g"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser --\u003e AddressBookParser : g"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "destroy GenerateSlotCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser --\u003e LogicManager : g"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e GenerateSlotCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand -\u003e Model : getMembers()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Model --\u003e GenerateSlotCommand : members"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "loop for each timetable combination \u0026\u0026 timeRanges.isEmpty()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    create TimeSlotGenerator"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    GenerateSlotCommand -\u003e TimeSlotGenerator"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    activate TimeSlotGenerator"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TimeSlotGenerator --\u003e GenerateSlotCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    deactivate TimeSlotGenerator"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    GenerateSlotCommand -\u003e TimeSlotGenerator : generate()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    activate TimeSlotGenerator"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TimeSlotGenerator --\u003e GenerateSlotCommand : List\u003cTimeRange\u003e timeRanges"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    deactivate TimeSlotGenerator"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "CommandResult --\u003e GenerateSlotCommand : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 85
    }
  },
  {
    "path": "docs/diagrams/MeetingClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class ProjectList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Package Project \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Meeting {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Time {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "+time: String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "+date: Date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Class Description {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "+description: String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "ProjectList *--\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "UniqueProjectList o--\u003e \"*\" Project"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Project *--\u003e \"*\" Meeting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Meeting *--\u003e \"1\" Time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Meeting *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 28
    }
  },
  {
    "path": "docs/diagrams/MemberClassDiagram1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "scale 540 height"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "scale 420 width"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class ProjectList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Package Project \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class Project {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "-members: List\u003cString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "hide e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ProjectList -\u003e e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "e *--\u003e UniqueProjectList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ProjectList *--\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "UniqueProjectList o--\u003e \"*\" Project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 23
    }
  },
  {
    "path": "docs/diagrams/MemberClassDiagram2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "scale 540 height"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "scale 420 width"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Package Person \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class Person {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "-projects: List\u003cString\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "hide e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "AddressBook -\u003e e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "e *--\u003e UniquePersonList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 24
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class ProjectList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Interface ReadOnlyProjectList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Package Project {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Meeting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Finance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectList .up.|\u003e ReadOnlyProjectList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ModelManager o--\u003e \"1\" ProjectList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectList *--\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "UniqueProjectList o--\u003e \"*\" Project"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Meeting"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Person"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"1\" Title"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Finance"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ModelManager -\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ModelManager --\u003e\"1\" Project : filtered list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 31,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/PerformanceOverviewClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "scale 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class PerformanceOverview{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "-memberList: List\u003cPerson\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "-project: Project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class Project{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Class Person{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview o--\u003e \"1..*\" Person"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview o--\u003e \"1\" Project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 18
    }
  },
  {
    "path": "docs/diagrams/SendReminderActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": User wants to send reminder of meetings and"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "tasks due in specific number of day to members;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([valid input])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([not checked out])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw CommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "          not checked out;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([Checked out])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([not signed in])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Throw CommandException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            not signed in;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([is signed in])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":   Obtain current list of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " tasks and and meetings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":    Check for meetings and tasks which"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "are due within the specific number of days;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Obtain current list of members;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Obtain ownerAccount for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "user\u0027s email and password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Send the list of meetings and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "tasks to members via email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Display success message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([invalid input])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Checks for type of invalid input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([Empty Input])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw ParseException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "      for empty input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([Non-numeric input or negative integer])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw ParseException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "      for invalid input;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "stop"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 44
    }
  },
  {
    "path": "docs/diagrams/SendReminderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":SendReminderCommandParser\" as SendReminderCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":SendReminderCommand\" as SendReminderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Mailer\" as Mailer LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Project PROJECT_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Project\" as Project PROJECT_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[-\u003e LogicManager : execute(\"SendReminder 3\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"SendReminder 3\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create SendReminderCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e SendReminderCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SendReminderCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SendReminderCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e SendReminderCommandParser : parse(3)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SendReminderCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create SendReminderCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommandParser -\u003e SendReminderCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SendReminderCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand --\u003e SendReminderCommandParser : 3"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SendReminderCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommandParser --\u003e AddressBookParser : 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SendReminderCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "destroy SendReminderCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e SendReminderCommand : execute()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SendReminderCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e Model : getListOfMeetings()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model--\u003e SendReminderCommand : meetingsList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e Model : getTasks()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e SendReminderCommand : tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e Project : getMemberNames()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Project"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Project--\u003e SendReminderCommand : List\u003cString\u003e MemberNames"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Project"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e Model : getMembers()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e SendReminderCommand : Members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e Model : getOwnerAccount()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e SendReminderCommand : OwnerAccount"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "loop for each members in the project"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   SendReminderCommand -\u003e Mailer : sendMail()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   activate Mailer"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   Mailer -\u003e SendReminderCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "   deactivate Mailer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "CommandResult --\u003e SendReminderCommand : result"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SendReminderCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 107
    }
  },
  {
    "path": "docs/diagrams/ShowPerformanceOverviewSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \"p:ShowPerformanceOverviewCommand\" as  ShowPerformanceOverviewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "participant \":PerformanceOverview\" as PerformanceOverview MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[-\u003e LogicManager : execute(\"showPerformanceOverview\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"showPerformanceOverview\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "create ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "AddressBookParser -\u003e ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand --\u003e AddressBookParser : p"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "LogicManager -\u003e ShowPerformanceOverviewCommand : execute(model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand -\u003e Model : getWorkingProject()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Model --\u003e ShowPerformanceOverviewCommand : currWorkingProject"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand -\u003e Model : getMembersOf(currWorkingProject)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Model --\u003e ShowPerformanceOverviewCommand : memberList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "create PerformanceOverview"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand -\u003e PerformanceOverview : new PerformanceOverview(currWorkingProject, memberList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate PerformanceOverview"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview -\u003e PerformanceOverview : makeAttendanceMap()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview -\u003e PerformanceOverview : makeAttendanceRateMap()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview -\u003e PerformanceOverview : makeTaskDoneMap()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview -\u003e PerformanceOverview : makeCompletionRateMap()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "PerformanceOverview --\u003e ShowPerformanceOverviewCommand : overview"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate PerformanceOverview"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand -\u003e Model : setPerformanceOverview(overview)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Model --\u003e ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "CommandResult --\u003e ShowPerformanceOverviewCommand : result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "ShowPerformanceOverviewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate ShowPerformanceOverviewCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 82
    }
  },
  {
    "path": "docs/diagrams/SignInActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": User sign in using his/her"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Email address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([SignedIn])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw CommandException"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Already signed in;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([not Signed In])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if () then ([invalid email and password])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ": Throw CommandException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "          Invalid Email and Password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "else ([valid email and password])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":creates OwnerAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":       Stores information"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "in Model as OwnerAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":Display success message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "stop"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 27
    }
  },
  {
    "path": "docs/diagrams/SignInSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":SignInCommandParser\" as SignInCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":SignInCommand\" as SignInCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[-\u003e LogicManager : execute(\"signIn Account, Password\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"signIn Account, Password\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create SignInCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e SignInCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SignInCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SignInCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser -\u003e SignInCommandParser : parse(Account, Password)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SignInCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create SignInCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommandParser -\u003e SignInCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SignInCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommand --\u003e SignInCommandParser : Account, Password"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SignInCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommandParser --\u003e AddressBookParser : Subject, Body"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SignInCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "destroy SignInCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "AddressBookParser --\u003e LogicManager : Account, Password"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "LogicManager -\u003e SignInCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate SignInCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommand -\u003e Model : isSignIn()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e SignInCommand : isSignIn"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommand -\u003e Model : signIn()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Model --\u003e SignInCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommand-\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "CommandResult --\u003e SignInCommand : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SignInCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate SignInCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 75
    }
  },
  {
    "path": "docs/diagrams/SortTaskActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":User wants to sort tasks to a specific ordering;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "if () then ([valid input])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":Obtain current list of tasks and \\n sort according to specifications given;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":Updates the current sorting type in SortingOrder class;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":Display sorted task list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "else ([invalid input])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ": Checks for type of invalid input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "if () then ([Index not linked to any ordering])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ": Display incorrect index error message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "else ([Current sort type same as input])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ": Display same sort type error message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 19
    }
  },
  {
    "path": "docs/diagrams/SortTaskSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":SortTaskParser\" as SortTaskParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \"c:SortTaskCommand\" as SortTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "participant \":SortingOrder\" as SortingOrder LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[-\u003e LogicManager : execute(\"sortTask 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"sortTask 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "create SortTaskParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "AddressBookParser -\u003e SortTaskParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortTaskParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortTaskParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "AddressBookParser -\u003e SortTaskParser : parse(1)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortTaskParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "create SortTaskCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskParser -\u003e SortTaskCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortTaskCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand --\u003e SortTaskParser : c"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortTaskCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskParser --\u003e AddressBookParser : c"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortTaskParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "destroy SortTaskParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "AddressBookParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "LogicManager -\u003e SortTaskCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortTaskCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand -\u003e SortingOrder : setCurrentTaskSortingOrder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortingOrder"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortingOrder --\u003e SortTaskCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortingOrder"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand -\u003e Model : getTasks()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Model --\u003e SortTaskCommand : tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand -\u003e SortTaskCommand : sortTask()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate SortTaskCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand --\u003e SortTaskCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortTaskCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "CommandResult --\u003e SortTaskCommand : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "SortTaskCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate SortTaskCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 81
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Interface ProjectListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class JsonSerializableProjectList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class JsonProjectListStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "StorageManager o--\u003e ProjectListStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonProjectListStorage .left.|\u003e ProjectListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonProjectListStorage .down.\u003e JsonSerializableProjectList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonAdaptedPerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .right.\u003e JsonAdaptedMeeting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .left.\u003e JsonAdaptedFinance"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 14,
      "-": 22
    }
  },
  {
    "path": "docs/diagrams/TaskClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class ProjectList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Package Project \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "+isDone: boolean"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Time {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "+time: String"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "+date: Date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Description {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "+description: String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectList *-right\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "UniqueProjectList o-right\u003e \"*\" Project"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *-down\u003e \"*\" Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Task *--\u003e \"1\" Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Task *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 29
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class ProjectListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class ProjectCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class BudgetListPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class ProjectOverview"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "class State \u003c\u003cenumeration\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ADDRESS_BOOK"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "PROJECT_LIST"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "PROJECT_OVERVIEW"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "PROJECT_FINANCE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MainWindow *--down-\u003e ProjectListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MainWindow *---down-\u003e BudgetListPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MainWindow *-left-\u003e ProjectOverview"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MainWindow *-left-\u003e State"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectListPanel -down-\u003e ProjectCard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MainWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectOverview --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "BudgetListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectCard --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ProjectCard ..\u003e Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 21,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/set-timetable/SetTimetableSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":SetTimetableCommandParser\" as SetTimetableCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \"a:SetTimetableCommand\" as SetTimetableCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":TimetableVisualization\" as TimetableVisualization LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[-\u003e LogicManager : execute(\"setTimetable 1 n/NUSMODS_URL\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"setTimetable 1 n/NUSMODS_URL\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create SetTimetableCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e SetTimetableCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate SetTimetableCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate SetTimetableCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e SetTimetableCommandParser : parse(\"1 n/NUSMODS_URL\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate SetTimetableCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create SetTimetableCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommandParser -\u003e SetTimetableCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate SetTimetableCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand --\u003e SetTimetableCommandParser : a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate SetTimetableCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommandParser --\u003e AddressBookParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate SetTimetableCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "destroy SetTimetableCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e SetTimetableCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate SetTimetableCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create TimetableVisualization"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand -\u003e TimetableVisualization"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate TimetableVisualization"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TimetableVisualization --\u003e SetTimetableCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate TimetableVisualization"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand -\u003e TimetableVisualization : visualize()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate TimetableVisualization"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TimetableVisualization --\u003e SetTimetableCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate TimetableVisualization"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "destroy TimetableVisualization"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand -\u003e Model : setPerson()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Model --\u003e SetTimetableCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "CommandResult --\u003e SetTimetableCommand : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "SetTimetableCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate SetTimetableCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 86
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!define PROJECT_COLOR #FF7F50"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!define PROJECT_COLOR_T1 #FFA500"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "!define PROJECT_COLOR_T2 #FF8C00"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 4,
      "-": 75
    }
  },
  {
    "path": "docs/team/ccyccyccy.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d Chong Chee Yuan - Project Portfolio for MyProject"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d Introduction to the project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "My team of 4 NUS SoC students and I were tasked to enhance a command line addressbook application. We decided to convert it into a one-stop project management app called *_MyProject_*."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MyProject is meant to aid NUS students in managing multiple projects within a single desktop application that can fufill all their needs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Aside from basic features such as setting of tasks and deadlines, MyProject also boasts several tools to aid users in better managing their projects. Notable features include:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Keep track of members\u0027 progress"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Send out email reminders"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Record meeting minutes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Track project budget"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Generate meeting timings (My Contributions)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This is what our project look like:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Graphical User Interface for MyProject"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This document serves to record down my contributions to the project in detail."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "*Enhancement*: Implemented `setTimetable` and `generate` command. `setTimetable` records down a member\u0027s schedule, while `generate` suggests timings to schedule meetings on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *What it does*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** The `setTimetable` command is primarily used to support the `generate` command by recording members\u0027 schedule. The `setTimetable` command  is made extremely convenient for NUS students due to our integration with NUSMods timetable sharing feature, allowing users to simply input a NUSMods timetable sharing URL, instead of having to enter all the timings manually."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** The `generate` command suggest the most suitable timeslots to schedule project meetings on, based on the timetable of members added using the `setTimetable` command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *Justification*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Team leaders often have trouble scheduling team meetings, having to run to every single members and ask for their availability at a certain timeslot. This process is often time consuming and inefficient. With this enhancement, team leaders can avoid this issue entirely by simply entering a database of team members\u0027 timetables into *_MyProject_* using the command `setTimetable`, and generate meeting timeslots using the command `generate`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *Highlights*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** I tried to make this enhancement to be very convenient to use, with only 2 commands required for this functionality to work. This led to the high variety of errors that the `generate` and `setTimetable` command can occur. As such, I had to provide a robust error catching mechanism to identify what the user did wrongly and provide suggestion on how to make the command work."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** This enhancement was also challenging because the current Java data and time libraries do not fully address my needs for a weekly recurring type of timetable, thus I had to implement it myself, which proves to be more of a challenge than expected. However, this proved to be worth the time, as it forms the backbone of the entire enhancement. This allowed for my enhancement to be extremely extendable so that we can easily provide for more sources of input, such as input from .ics files."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *Credits*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Credits to the NUSMods team for provide such a comprehensive API to retrieve module information."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "*Code contributed*: Click https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dccyccyccy\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dccyccyccy\u0026tabRepo\u003dAY1920S1-CS2103T-T17-1%2Fmain%5Bmaster%5D[here] to view a sample of my code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Enhancement to existing features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Update UI and README to better represent MyProject https://github.com/AY1920S1-CS2103T-T17-1/main/pull/181[#181]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Project Management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Managed issue tracker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Release all software releases"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Handled Travis integration on Github"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Fix bugs introduced by other group members https://github.com/AY1920S1-CS2103T-T17-1/main/pull/17[#17]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Reviewed PR made by teammates https://github.com/AY1920S1-CS2103T-T17-1/main/pull/13[#13]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Integrated Coveralls to the project to keep track of code coverage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We had to provide a user guide as an instruction for how to use our software. The user guide consist of mainly different commands and the various arguments they take."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is the section of user guide that I contributed for my enhancement which describes the commands required for my enhancements to work."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Set a timetable: `setTimetable`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Need to keep track of your team members\u0027 schedule? Use this command to record down their timetable easily!"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Timetable set can be used to generate available meeting timeslots using the command `generate`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`setTimetable INDEX [n/NUSMODS_SHARE_URL] [f/FILEPATH_TO_TIMETABLE]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "****"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Assigns timetable to the person at the specified `INDEX`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* The index refers to the index number shown in the displayed person list using the command `list`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `setTimetable 3 f//home/john/Desktop/aliceTimetable.txt` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Set Alice\u0027s timetable to Alice, who has index 3 in the list of persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "File should be formatted as a newline separated list of time ranges, e.g: +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MONDAY 1000 MONDAY 1200 +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "MONDAY 1400 MONDAY 1600 +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TUESDAY 1100 TUESDAY 1500"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `setTimetable 2 n/https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Set timetable to the person with index 2 on the list of persons, by retrieving timetable data from NUSMods."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is a step-by-step instruction to guide you through the process of setting a timetable to Alex, through the use of NUSMods:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 1: Type `list` and enter to view the list of persons. Identify the index of the person you wish to set the timetable to."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".List of person in the application"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-1.png[]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 2: Type `setTimetable`, followed by the index of the person you wish to set the timetable to, and the URL of the share link."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".User enters timetable of team member"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-2.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 3: Press enter, and you would see the following message. You can even scroll down to view a simple visualization of the timetable set!"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".`setTimetable` command success"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3a.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Visualization of timetable set"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3b.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Even if you accidentally entered a wrong URL, MyProject would prompt you helpfully!"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Error message when entered URL is invalid"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/set-timetable-step-3-error.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Generate meeting timing: `generate` [Checkout]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Need to decide on a meeting timing, but having trouble finding a time where all members are free? This command can help suggest meeting timings!"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Prerequisite:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Members have been assigned to the project using `addFromContacts` or `addMember`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Timetables have been assigned to the members with the command `setTimetable`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`generate` would *not* give an error if some members do not have timetable assigned to them. Ensure that you have done `setTimetable` for each of the members in the project before using `generate`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format: `generate d/DURATION [r/TIMERANGE]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `generate d/2 r/MONDAY 0900 MONDAY 1800` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Generates all possible meeting timeslots that lasts at least 2 hours, within the time frame of Monday 9am to Monday 6pm."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is a step-by-step instruction to guide you through generating a meeting timeslot that lasts for at least 1 hours, between Monday 1000 to Monday 1800:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 1: To generate a meeting timing for a project, you first need to `checkout` that project."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeslot will be generated for the checked out project"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-1.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 2: Enter the command with your desired duration of the meeting, and the time range to generate within"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Enter parameters for `generate` command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-2.png[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Step 3: Press enter, and you will see the following result:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Suggested timeslots shown on the GUI"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-step-3.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "If MyProject is unable to find a timeslot where all members are free, it would try to find another timeslot where most members are free"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Result shown when not all members are available. Members available would be listed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::generate/generate-alt.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The developer guide is used by future developers for reference when they continue developing on MyProject."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The section below is the portion of the developer guide that I contributed to, which are directly related to my enhancement."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Timetable input"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature is used to input timetable data, which would then be used in the `generate` command to find a suitable meeting timeslot."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "There are two ways to input member\u0027s timetable:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send a formatted text file to the team leader, which would then be parsed by the system. The file would be a list of newline separated time ranges"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send their NUSMods timetable URL to the team leader, and the system would parse the URL and fetch timetable data using NUSMods API"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "User command would be in the format: `setTimetable INDEX m/member [n/NUSMODS_URL] [f/FILEPATH]`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic is implemented within the `TimetableInput` class, which is invoked by the `SetTimetableCommand` class."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Important functions in `TimetableInput`:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimetableInput#getTimetableFromNUSMods(Url url)` -- Parse URL and fetch timetable data using NUSMods API"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimetableInput#getTimetableFromFile(String filepath)` -- Parse file to obtain timetable data"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below is an overview of the classes related to time+table input:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Class diagram for timetable input feature"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/SetTimetableClassDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`setTimetableCommand` accepts either a filepath or a URL, which is then supplied to `TimetableInput` to fetch the timetable data."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Afterwards, the timetable is passed into `TimetableVisualization` to provide a visual representation of the set timetable. This visualization is then passed back as a `CommandResult` to be displayed to the user."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following sequence diagram illustrates what happens when the user issues the command `setTimetable` to add their timetable from a shared NUSMods timetable."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeline of entire process from user executing their command to getting the result back."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::set-timetable/SetTimetableSequenceDiagram.png[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to input timetable"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 1** (current choice): Input timetable by importing timetable from an already existing platform."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: More practical and convenient for users to input, as opposed to manually typing in all the timetable for every single members."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Feature unreliable as it requires maintainance if the web API changes."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 2:** Input all time ranges manually by user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Very reliable due to lack of usage of online APIs."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Very impractical. Most users would not want to enter timetable data of all their members one by one, and would probably skip this feature."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We realized that it is very impractical to expect users to input timetable manually all by themselves. No matter how unreliable the web API is, the feature would at least be useful to users. If users have to manually input all the data, we cannot realistically expect this feature to be useful at all."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Generate meeting timeslot"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The timeslot generator is used to suggest meeting timings by making use of team members\u0027 timetable."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature makes heavy use of the class `TimeRange`, which represents a period of time in a week, e.g. MONDAY 1000 -- MONDAY 1200."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic of this feature is contained within the `TimeSlotGenerator` class:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange)`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `members`: `List\u003cTimetable\u003e` of members of the checked-out `Project`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `desiredMeetingDuration`: How long the meeting would last in hour, expressed as a positive integer"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `restrictedTimeRange`: Sets the limit of generated `TimeRange`, e.g. restrict meeting to working hours, from MONDAY 0900 - MONDAY 1800"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Only the two following methods are exposed:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generate()` -- Generate timeslot suitable for *_all_* `Timetable` supplied. Returns a list of `TimeRange`, or an empty list of `TimeRange` if no such timeslot is available."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generateWithMostMembers()` -- Generate timeslot where *_most_* members of the currently checked out project are available. Returns a list of `TimeRange`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature depends on the timetable stored internally as an attribute of each members:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Class diagram of the `TimeSlotGenerator`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotClassDiagram.png[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Typical usage of `TimeSlotGenerator` would be look like this:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`List\u003cTimeRange\u003e availableTimeSlots \u003d new TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange).generate()`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following sequence diagram shows the entire process of generating timeslot after the command `generate d/2` is given:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".Timeline of process from user entering the command to the results being displayed to the user."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotSequenceDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "As shown in the sequence diagram above, the command execution would go through the following stages:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Fetch the data of members in the current project and pass them to the `TimeSlotGenerator`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `TimeSlotGenerator` will extract their timetable and generate all possible `TimeRange`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Display result for the user to view all the possible timeslots that a meeting can be held."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "If `generate()` returns an empty `List\u003cTimeRange\u003e`, the program should automatically call `generateWithMostMembers()` and return it as result, informing the user that there is no timeslot where all members are available."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following activity diagram summarizes the general flow of the command `generate`:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".`generate` command tries to provide best possible meeting timeslot"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotActivityDiagram.png[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm Used"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generate()`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Combine all the given `Timetable` into a single `List\u003cTimeRange\u003e combined`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `combined` is then processed further by merging overlapping `TimeRange` into a single `TimeRange`. E.g. `TimeRange(MONDAY, 1000, MONDAY, 1200)` and `TimeRange(MONDAY, 1200, MONDAY,1400)` are merged together to form a single `TimeRange(MONDAY, 1000, MONDAY, 1400)`. `List\u003cTimeRange\u003e merged` is then passed on to the next stage."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `merged` is then inverted, and returns `List\u003cTimeRange\u003e inverted` containing all timeslots where all the members are free."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `inverted` is then processed to ensure that all `TimeRange` falls within `restrictedTimeRange` specified by the user, truncating all `TimeRange` that extends beyond the specified `restrictedTimeRange`, returning `List\u003cTimeRange\u003e truncated`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". The algorithm then filters `inverted` by rejecting all `TimeRange` that last shorter than `desiredMeetingDuration` specified by the user. This `List\u003cTimeRange\u003e accepted` is then passed back to the caller of this method, and the algorithm terminates."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generateWithMostMembers()`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Iterates over all possible combinations of timetables in descending order of number of timetable."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". For each possible combination, call `TimeSlotGenerator#generate()`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". If `TimeSlotGenerator#generate()` returns an empty list, repeat step 2 again."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Algorithm terminates, returning the combination of List\u003cTimetable\u003e used and available timings `List\u003cTimeRange\u003e` wrapped in a class `TimeSlotWithMember`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to generate timeslot with most number of available members"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 1 (current choice):** Iterate over all possible combinations of timetables, sorted in descending order of number of timetables, and call `TimeSlotGenerator#generate()` on each of these combinations."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: May have performance issues in terms of speed. This implementation takes O(2^n^) time for _n_  members."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 2:** Use a more sophisticated algorithm to shorten generation duration"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Will be much more efficient"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Harder to implement, and more specialize towards only doing a single task. Tough to maintain and adapt for other usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We went with options 1 as there is no real difference in speed if the number of members is restricted to below 15 members, which many projects do not normally exceed. It is much easier to understand and maintain by other developers as well."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 304
    }
  },
  {
    "path": "docs/team/fadisng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d Fadi Sng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d PROJECT: MyProject"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Background"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "My team consists of a group of 5 NUS computer science students working on this project as part of a software engineering project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The task was to enhance a basic Command Line Interface(CLI) addressbook app into an app that suits the needs of a target group of people."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "We decided to morph it into a project management app for students as it is more relatable and we could"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "make changes based on our own personal needs as students which are representative of the target group. Our app,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "_MyProject_ is for students, by students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "_MyProject_ is a one stop project management app for team leaders to store and manage your multiple projects"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "through the use of a CLI. _MyProject_ provides a centralized platform to store, edit and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "display all your important information in a simple and intuitive manner. _MyProject_ has unique functions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "such as sending emails to members within the app as well as financial tracking capabilities. Currently our main"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "target group is for university students, but we intend to develop further to accommodate working adults as well in the future."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This is what _MyProject_ looks like after you `checkout` to a chosen project:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".The graphical user interface for _MyProject_."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::fadisngppp2.png[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "My role in creating the basic project model was to implement the task feature. Every project has different"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "tasks with different deadlines and my goal was to make storing, accessing and displaying these tasks in the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "most user-friendly way possible, while keeping the user interactions as simple as possible."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "In addition, my enhancement to the project as a whole was implementing the sorting mechanisms for the different"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "types of information that can be displayed such as the list of tasks and spending. This was to allow for users to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "choose how they want to organize their information while ensuring that the commands to sort all these information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "follow the same format so that it is easy for users to remember these commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The following sections illustrates these enhancements in more detail as well as the relevant documentation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "I have added to the user and developer guides."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* *Major enhancement*: Added *the ability to sort the different types of information according to user preferences*."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** What it does: Allows the user to choose which kind of sorting order they\u0027d like out of a pre-specified list of sorting orders(this list is shown in the highlighted section below) for the different types of information displayed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Justification: This feature improves the product significantly because the main goal of _MyProject_ was to provide a platform to store and display all these important information in an organized and systematic manner."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Giving the user such options to sort all these information helps them locate what they need easily."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Highlights: The type of sorting order is maintained until the app is closed. What this means is that whenever you add or edit items into the displayed list, that item will automatically be inserted into the correctly sorted position."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This reduces the need for users to continuously enter the sort command whenever they add or edit the list of items. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Another noteworthy highlight is that all sort commands follow the same format. For example `sortTask 1` and `sortSpending 1` will sort both lists by alphabetical order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Therefore users only need to remember the command for 1 sort command and the rest follows suit!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Challenges: The main challenge of this feature was that I needed to know how the other features were implemented before I can write the code to sort them. For example, I needed to wait"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "for the completion of the meeting feature before I could implement the sorting feature for the list of meetings displayed. This also required"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "me to understand the internal workings of other features like how these items are stored and displayed so that I could implement the appropriate methods to sort them."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* *Minor enhancement*: Added the tasks feature for the project model including basic commands such as adding, deleting and editing tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* *Code contributed*: Please click the link to see a sample of my code: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dfadisng\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "*** Generally in charge of issuing and assigning issues/tasks on GitHub for each milestone."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "*** Created the project model on GitHub and kept track of the progresses. https://github.com/AY1920S1-CS2103T-T17-1/main/projects/1[Project model on GitHub]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "*** Edited target user profile in DG."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "*** Edited images originally from addressbook to include the new features implemented by the whole team in DG."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": " For example, edited the storage class diagram to include all the new storage classes that were added. https://github.com/AY1920S1-CS2103T-T17-1/main/pull/52[#52]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "_MyProject_ uses most of the original addressbook features, therefore most of the addressbook user guide is still intact"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "and present in _MyProject_\u0027s user guide."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|_Given below are some sections I contributed to the User Guide, but not all. These are sections that I believe"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "are representative of my skills. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sorting"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The following section provides a set of commands which help with sorting the information inside the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "application. _MyProject_ makes it very easy and user-friendly by making all sort commands follow the same"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "format and index/order pairing as shown below!"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "All commands in this section follow this set of index/order pairing, where applicable:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Alphabetical order"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing order of time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done and then by increasing order of time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing price"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The default sorting order for the lists that can be sorted is by increasing order of time(index 2). Whenever _MyProject_"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "is closed, the ordering will return to the default order."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "These are the lists that can currently be sorted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Tasks"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Spending"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Meetings"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Sort tasks: `sortTask` [Checkout]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This command sorts the tasks in the task list of the current working project. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `sortTask INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` refers to the index of the list provided in the highlighted section above which corresponds to the type of sorting you wish to apply."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "For example, index 1 corresponds to sorting by alphabetical order. For the case of sorting tasks, only numbers between 1 and 4 are applicable."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Let\u0027s say you have added many different tasks with different deadlines and progresses into _MyProject_. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The default sorting order that _MyProject_ offers is by increasing order of time(index 2). However you wish to group those tasks that are done in one group and those not done in another group and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": "then further sort each group by increasing order of time(index 4) to track the progress of your tasks. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Simply type in the command `sortTask 4` and all the tasks in the list will immediately be sorted accordingly. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "In addition, whenever you add a new task(Section 3.2.4) or edit the details of an existing task(Section 3.3.2), _MyProject_ will automatically insert"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "the newly added or edited task into the correct position based on this new sorting order so you don\u0027t have to continuously type this command whenever"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fadisng"
        },
        "content": "you wish to add or edit tasks! +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Here is a step by step process on how to do this."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Firstly, since this command is labeled with [Checkout] at the start, ensure that you `checkout` to a project first."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Notice how the tasks in the task list are currently at the default sorting order which is by increasing order of time. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask1.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Next, enter the command `sortTask 4` into the command line and press enter. You can choose any index from 1-4 depending"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fadisng"
        },
        "content": "on which type of sorting order you wish to sort by based on the specifications provided in the highlighted section above. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask2.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". The following success message will be displayed if the input was entered correctly. Check that the type of sorting"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fadisng"
        },
        "content": "displayed in the success message is the one you actually wanted. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The tasks in the task list will then be immediately sorted accordingly as shown in the white box. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask3.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Now let\u0027s say the deadline for task 2(Do UG) is pushed forward by a week and you\u0027ve just completed it. Type in the command"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`editTask 2 d/ c/04/12/2019 0000`(check out section 3.3.2 for more details on the editTask command) into the command line and press enter. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The task will be edited accordingly and immediately be sorted into the correct position as shown below. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image:sortTask4.png[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Task feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Within every project, there are tasks to be done or milestones to be achieved within certain deadlines. The diagram below shows the class diagram of the task class and how it interacts with the model."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Class Diagram for Task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::TaskClassDiagram.png[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fadisng"
        },
        "content": "As shown in figure 2, each project stores multiple tasks in a list. These tasks can be stored, deleted, edited and sorted very easily."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Here are some task related commands that can be executed by the app."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". addTask - adds a task into the project model."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". deleteTask - removes a task from the project model based on index specified by user"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". editTask - edits a task of the given index with attribute/s to edit e.g deadline/description/whether is done"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". sortTask - sorts the list of tasks based on specification given by user. (more info available in section 3.3)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fadisng"
        },
        "content": "As seen in figure 2, each task consists of 3 parameters namely description, time and a boolean state to show whether the task is done/in progress."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fadisng"
        },
        "content": "A typical task will look like this on the app: +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::TASK.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sorting feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Sorts some lists based on specifications provided by the user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fadisng"
        },
        "content": "There are 3 lists that are able to be sorted so far. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of tasks"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of spending"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Sort list of meetings"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The implementation is similar for these 3 methods. It makes use of `SortingOrder`, which is"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fadisng"
        },
        "content": "a container class that stores the current sort order as well as methods to get and set these orders."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`SortingOrder` can be found in the `model` package."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Currently there are 5 different methods to sort the lists."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Alphabetical order"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing order of time"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done and then by increasing order of time"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing price"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Methods 3-4 are only for sorting tasks whereas method 5 is for sort spending."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Methods 1-2 can be used to sort all lists."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fadisng"
        },
        "content": "All sort commands take in a single integer as parameter. As mentioned in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fadisng"
        },
        "content": "note above, integers 1-4 are valid input for sortTask, integers 1, 2 and 5 are valid for sortSpending, and"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fadisng"
        },
        "content": "integers 1-2 are valid for sortMeeting."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fadisng"
        },
        "content": "An example command would be `sortTask 1` which sorts the list of tasks by alphabetical order."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The following sequence diagram shows the process of obtaining a list with the new sorting order"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fadisng"
        },
        "content": "and updating the current sort order in `SortingOrder` class."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Sequence Diagram for sortTask"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::SortTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fadisng"
        },
        "content": "These are the stages shown in figure 3. Stages are similar for sort spending as well."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Parses the input to obtain the index."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Goes to `SortingOrder` to change the current sorting order to the one linked to the given index based on the specification shown above."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Obtains list of tasks from model and sorts it. List now maintains this sorting order and displays a sorted list even after adding or editing elements."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Display the newly sorted task list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fadisng"
        },
        "content": "The diagram below shows sortTask works. There are 2 possible error messages that can occur. Firstly,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fadisng"
        },
        "content": "if the user inputs an index that is not applicable to the type of items sorted. For example, `sortTask 5`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fadisng"
        },
        "content": "is invalid as index 5 is linked to a price sorting mechanism which is not applicable to sorting tasks. Secondly,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fadisng"
        },
        "content": "an error will be shown if the user attempts to sort the items in the same order is the current sorting order."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fadisng"
        },
        "content": "For example, since the default sorting order for tasks is by increasing order of date, the command `sortTask 2`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fadisng"
        },
        "content": "will be invalid if the sorting order has never been changed before. Otherwise if the input is valid,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fadisng"
        },
        "content": "the sorting will occur and the newly sorted task list will be displayed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".Activity Diagram for sortTask"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::SortTaskActivityDiagram.png[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the sort commands"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* **Alternative 1 (current choice):** Store the data in list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Pros: Easy to implement. Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Cons: May have performance issues as list has to be sorted every time a new element is added or edited."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* **Alternative 2:** Store the data in a PriorityQueue."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Pros: Much more efficient in terms of performance and complexity. Internal list will automatically be updated which means"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fadisng"
        },
        "content": "no additional sorting needed when adding or editing new elements."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** Cons: Have to create and add all the tasks into another PriorityQueue if the sorting order were to be changed. Harder to implement."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Conclusion/Reflection"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Takeaways"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Shown below is the list of takeaways from this project:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Being new to large scale software engineering projects, I learnt how to read and understand"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fadisng"
        },
        "content": "an already established software and further develop it into a product that suits the need"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fadisng"
        },
        "content": "of a target audience."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". I learnt how to write different types of documentations meant for different readers. For example,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fadisng"
        },
        "content": "writing a user guide meant for users which requires step by step processes on how to use our app properly."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Looking back, my team and I could\u0027ve had better planning from the start as we began to run into certain"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fadisng"
        },
        "content": "problems further down the road such as lack of features to implement due to poor planning on what kind"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fadisng"
        },
        "content": "of product we intend to create."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Challenges"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fadisng"
        },
        "content": "A major challenge I faced was learning how to use GitHub and several other tools which were used for this project. Having no background in coding and only being exposed to coding in NUS modules such as CS2030 and CS2040, all these external tools to help with large scale programming were foreign to me and it took me a long time to get accustomed to it. However I am definitely thankful for this opportunity to be exposed to these tools which will help me in the future."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Overall this was a positive experience for me despite the slightly heavy workload as many things that I\u0027ve learnt from this project would be essential in the future for me as a programmer and it has created a foundation for me to work on."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fadisng"
        },
        "content": "---"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fadisng": 274
    }
  },
  {
    "path": "docs/team/jerryk1997.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d Jerry Kwong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Project: MyProject"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Project background"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "_MyProject_ is a command line desktop application that I helped design and implement as part of a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "team, for a school project for the NUS School of Computing. My team consisted of 5 computing students"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "including me, and the task for this project was to modify a given application called the AddressBook into"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "our own application, that serves a different purpose. As second year university students, we have always found"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "it difficult to manage many different types of information across many different projects during our first"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "year, and hence we decided to modify the AddressBook application into _MyProject_."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "_MyProject_ is a desktop application with a command line interface, which aims to be a one-stop project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "management application that will satisfy all the project management needs of a student. Our application specialises"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "in storing, processing and displaying the information of the projects in a meaningful way to help students"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "better manage their workload when it comes to dealing with multiple different projects at the same time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "_MyProject_ provides basic functionality such as storing the members, meetings and tasks of a given project,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "and also storing the contact information of the members. _MyProject_ also boasts more complex functions such as"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "calculating optimal meeting times based on the NUSMODS timetable of each member, and also tracking the finances"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "of the project with different types of budgets."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "A typical usage of the project looks like this:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::TypicalProjectScreen.png[picture,400]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "My team worked together tirelessly to put this application together. Each of us are in charge of different parts of the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "application\u0027s functionality, and my role in the team was to integrate the Person model in the original AddressBook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "application into our application, and use it as a way to keep track of the member\u0027s information."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "In addition to that, I also implemented a way for the application to track each member\u0027s performance in terms"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "of a few tangible attributes such as by keeping track of how many tasks they have done. This is to allow anyone using"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the application to optimise their workflow, and better manage the progress of their project since they would know"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "who has done what tasks and how much each member is contributing to the team. This would also aid in more even work distribution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "In the next section, I will summarise all my contributions to the project."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Major enhancements: Added the performance overview functionality of _MyProject_."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** What it does: This feature consolidates all the information available, and uses it to calculate the performance of each member."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The information is stored, and displayed to the user when the the user executes the `showProjectOverview` command. The calculated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "attributes of the performance is then displayed in the form of tables for easy comparison between the members. It will also show"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the individual performances of each member by itself. To see a clearer view of this, you may look at my contributions to the user guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "which will be in the subsequent sections."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Justifications: This feature allows the user to conveniently keep track of what each member has done and their"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "contributions to the project. This can help with distributing the workload between the members, and also helps"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "if there is a need to assign credit to each member for their amount of work done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Highlights: This feature does not require any additional storage as it is only calculated when the user requests for it,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "and all the information is already available within the `Person` and `Project` objects themselves. The feature also"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "provides both an overview of their performances for easy comparison and a more individual view where the attributes are"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "grouped and listed according to each member should there be a need to check the specific member\u0027s performance. The user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "also only has to type in the `showPerformanceOverview` command and everything else will be handled internally because"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "all the information needed is already supplied during the day to day interactions with the application when the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`assignTask` to members and `markAttendance` for meetings. (Both of which are commands that can be executed by the user)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Challenges: One of the challenges I faced when implementing this feature is finding a way to implement the `PerformanceOverview` model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "I initially considered making it an attribute of the existing `Project` model which my teammate implemented, however I quickly realised that"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "this would not be feasible, as calculating the performance of a member requires a information from both the `Project` and `Person`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Therefore I chose to implement `PerformanceOverview` as a new model instead which created less dependencies between the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`Project` and `Person` models, and also reduced the need for the `Project` model to be associated with the `Person` model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Minor enhancements: I also added the functionality to keep track of the members information within the application, such as what"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "projects they are involved in, and the commands to add and remove members from projects. To facilitate my performance overview"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "functionality, I also implemented 3 more commands which are the `assignTask`, `unassignTask` and `markAttendance` command. This is"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to supply the application with useful information to be used in the performance calculations when the performance overview"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "is requested by the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Code contributed: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djerryk1997\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c- Click this link to see my code contributions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Other contributions:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "*** Helped to report and sometimes fix the bugs which I found during the routine testing of our application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "*** Did the first round of general formatting of our user guide which included fixing the inconsistent formatting, and improving"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "the overall organisation and style of the whole user guide. See more here -\u003e [https://github.com/AY1920S1-CS2103T-T17-1/main/pull/69/files[Pull request #69]]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddMember]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddFromContacts]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._ +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "hello world"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmemberFeature]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dperformanceTracking]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fadisng": 5,
      "jerryk1997": 108
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._ +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "hello world"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 2,
      "-": 71
    }
  },
  {
    "path": "docs/team/philipalexanderb.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d Philip Alexander Boediman - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ":stylesdir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d PROJECT: MyProject"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d Background"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Our experiences as Computer Science (CS) students who are involved in a lot of projects have motivated us, a team of"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "5 NUS SoC students, to develop *_MyProject_* - an all-in-one project management application that helps the user manage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "his/her projects\u0027 administrative stuff in a single application. For students, by students, *_MyProject_* mainly targets team leaders w\\"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "who are responsible for directing and keeping track of the projects as well as students who are involved in a lot of projects in general."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "As a start, we were given the source code for a fully functional Addressbook application. The task of our project was to enhance"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "this Addressbook into something useful that can help a particular group of people."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*MyProject* has various features to aid team leaders in project management. Some of the more prominent features include:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Keep track of members\u0027 performance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Generate meeting timings"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Keep track of project\u0027s finances"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Record meeting minutes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Keep track of ongoing and upcoming tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Send out reminders for upcoming meetings and tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* Broadcast email for important announcements (My Contributions)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "My main role was to design email related features. The following sections illustrate the enhancements that I have made as well as the relevant documentation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "that I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This section shows a summary of my coding, documentation and other helpful contribution towards the team project."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Credits to https://javaee.github.io/javamail/ for providing the JavaMail library and the javax.Mail API."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Code Contributed:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Please click the link to see my sample code: link:https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dphilipalexanderb\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Major Enhancement - Email feature"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancements Implemented:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `signIn` command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* lets user signs in using his/her Google account."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `logOut` command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* lets user signs out from his/her Google account."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `sendMail` command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* sends a personal email to one member in the project / contact list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `broadcastMail` command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* sends a personalised broadcast message to all members in the current project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `sendReminder`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* sends a reminder to all members in the project of the upcoming meeting and tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "which are due in specific number of days defined by user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Team leaders often have information that they want to convey to the team members about updates or changes made to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "the project or remind team members of the upcoming meeting or tasks. There might be several applications in which"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "the project groups are formed in the social media platforms. Team leaders may have to switch between different applications"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "to locate the project group in this platform and this process is oftentimes time-consuming. With this enhancements,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "team leaders will be able to relay his message to his members in a single application, *_MyProject_*, where all the informations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "on his various projects are stored."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Highlights"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These enhancements are extremely useful and use very intuitive command formats which are very similar to the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "normal GUI that user normally encounters and are very easy to remember. Some of the challenges faced were in understanding how the javax.Mail"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "works which was outside the coverages of the course. These enhancements are extendable as we can further enhance to support"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "more email domains which users wish to use as well as send attachments. Overall, the enhancements can support all the basic one-way mailing features which"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "are sufficient for the optimisation of the team leaders\u0027 works."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Secondary Enhancement - Meeting attribute in the project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancements Implemented:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `AddProjectMeeting` command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* lets user adds a meeting to ."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "- `DeleteProjectMeeting` command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* lets user signs out from his/her Google account."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Every projects will definitely have meetings, thus team leaders can easily keep track of upcoming meetings"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "in the projects that he/she has."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Highlights"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This enhancements is extremely useful as meeting is a very crucial part in a project\u0027s progress. Meetings"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "added by the user will automatically be sorted based on the meeting time (earliest to latest)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Project Management"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*** Tested team members\u0027 features and reported bugs for amendment."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*** Implemented Time class which are widely used in the project. link:https://github.com/AY1920S1-CS2103T-T17-1/main/commit/dc82af6eabbe26f3f425e8ac8a889337acca54a4[#31]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*** Updated the Test classes so that it fits our current model. link:https://github.com/AY1920S1-CS2103T-T17-1/main/commit/6ebb6b09d4db4ca4807c2b117513a4246bececd3[#201]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Documentation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*** Proof-reading the project\u0027s User Guide and Developer Guide and made changes to it that suit our Project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "*** Helped the team update some of the documentations link:https://github.com/AY1920S1-CS2103T-T17-1/main/commit/f14924a90ef2c04c4aa7fb38b524074241f289af[#222]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-T17-1/main/commit/f7ac69bdd9b17f2ddcc5d3b82f80a47ddb7d0208[#189]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "We had to provide a user guide for users to familiarise themselves with our application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The user guide consists of easy navigation to certain parts of the user guide, features implemented"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "in our application and a summary of commands available in our application. Below is the section of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "user guide that I contributed for my features."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Project Meeting"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Add a project meeting: `addProjectMeeting` [Checkout]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Adds a new project meeting to the current working project.  +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `Format: addProjectMeeting [c/ dd/MM/yyyy HHmm] [s/MEETING_DESCRIPTION]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`dd/MM/yyyy HHmm` refers to the date and time the meeting is to be held. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`MEETING_DESCRIPTION` refers to the purpose of the meeting."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Let\u0027s say that you plan to have a meeting on the 19th November 2019, you want to keep track of this meeting"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "by recording it down in the MyProject app."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "To add a project meeting:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "1. Type `addProjectMeeting c/19/11/2019 1300 s/DIscussion on version 2` and press enter to execute it.Note that"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "this project meeting will be held after the 4th meeting on 16/11/2019 1700 and before the 5th meeting on 29/11/2019 1300."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:addProjectMeetingPPP1.png[addProjectMeetingPPP1, 400]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "2. Success message with the respective information about the meeting will be displayed. The meeting added will"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "be automatically sorted according to the dates and times in ascending order. Thus, the new meeting added will"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "be placed as number 5 and the previous meeting with number 5 will be move to number 6."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Email Features"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Tired of switching between applications? We got you covered, below you will find some commands which support sending"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "emails right here within the application."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Do keep in mind that the user Account in our current version is only compatible with Gmail Account and please ensure that the Access to less secure app in the security setting is enabled before signing in!"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// tag::email[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Sign in to your account: `signIn`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Signs in to the your email account. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `signIn ac/ACCOUNT_EMAIL_ADDRESS pa/PASSWORD`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`ACCOUNT_EMAIL_ADDRESS` refers to the sender\u0027s/user\u0027s email address."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`PASSWORD` refers to the password to the sender\u0027s/user\u0027s email address."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* `signIn ac/example@gmail.com pa/12345678`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Please Turn on the access to less secure app in your account\u0027s security setting."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This command is required to be executed before the remainder of the email commands can be executed. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The correctness of the email address used and the password will be checked."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Send reminder: `sendReminder`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Prerequisites: Checkout to a project using the checkout command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Sends a reminder to all members from the current working project of the upcoming Meeting and Task that is due. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Format: `sendReminder d/DURATION`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "`DURATION` is the number of days from the current time within which the Tasks are due and The Meetings are held."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Let\u0027s say that you have several meetings and task for the coming week, and you want to remind your group of the upcoming meetings"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "and the tasks that are supposed to be done by the week."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Instead of typing all the meetings and tasks for the coming week all over again, you can just easily send these lists to their email"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "addresses from the application."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "To send reminder:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "1. Type `sendReminder d/7` and press enter to execute it.Note that the date at the time this screenshot was taken is 10/11/2019, thus,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "only meeting meetings 2-4 and task 1-3 will be sent as reminders to the members."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image:sendReminderPPP1.png[sendReminderPPP1, 350]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "2. A success message will be displayed in the box saying \"Reminders have been sent!\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "3. Members will receive an email with the tasks due and meetings happening within the next 7 days."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "We will not check the correctness of the members\u0027 email addresses"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "// end::email[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "|_Below is the section of developer guide that I contributed for my features. They showcase the complexity of my"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "features as well as my thought process while trying to implement the features._"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Meeting feature"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Within every project, there are meetings to be held at certain time."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram below shows the class diagram of the meeting class and how it interacts with the model."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Class Diagram for Meeting"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::MeetingClassDiagram.png[MeetingClassDiagram, 200]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "As shown above, each project stores multiple meetings in a list. These meetings are automatically sorted based on the time in ascending order."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Here are some meeting related commands that can be executed by the app."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". addProjectMeeting - adds a meeting into the project model."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". deleteProjectMeeting- removes a meeting from the project model based on index specified by user"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "As seen in figure 1, each meeting consists of 2 parameters namely description and time to show what is the meeting about"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "and the date and time of the meeting respectively."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Sending Reminder feature"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Sends reminder for tasks and meetings that are due in the number of days given by the user input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The basic implementation uses javax.Mail to send email to other email addresses. The Mailer class has static method sendEmail"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "which is responsible for sending all kinds of email to a given recipient(s). User\u0027s email account information is obtained"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "from the Model class to send the emails. Currently, only gmail server has been made available for use in sending the emails."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "User Email  Account Information is stored through the signIn command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "SendReminder takes in a single integer as parameter. The integer will be the duration in days from the current times in which the meetings and tasks are due."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The following sequence diagram shows the process of sending reminder to the project members."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Sequence Diagram for sendReminder"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SendReminderSequenceDiagram.png[SendReminderSequenceDiagram, 800]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These are the stages shown in figure 2."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Parses the input to obtain the duration."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the the Meetings and Tasks."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Obtains list of tasks and meetings which are due in the duration time."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Project` to get the Members names."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the members in the project."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to get the OwnerAccount information."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Sends email to all the members about the upcoming meetings and tasks in the project."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Display the success message."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Activity Diagram for sendReminder"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SendReminderActivityDiagram.png[SendReminderActivityDiagram, 700]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The diagram above shows how `sendReminder` works. There are 2 possible error messages for invalid input. Firstly,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "if the user inputs nothing as the duration and input cannot be empty error message is shown. Secondly,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "an error will be shown if the user non-numeric or negative or zero number as the duration of time. For a valid input,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "user will be required to checkout then signIn first before executing the command."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the sendReminder commands"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 1:** Storing List\u003cPerson\u003e in the Project for members."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Easy to implement. Do not need to look for the person object in the addressBook from the List of String of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "members\u0027 names in the project."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Introduces coupling and may cause unwanted bugs due to cyclic dependencies as Project contains Person and"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Person contains Project."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 2:** Stores members as List\u003cString\u003e of members names."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Reduces coupling and and eliminates cyclic dependencies between Project and Person object.."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Have to hash the members object in the addressBook by names and go through the List\u003cString\u003e of members\u0027"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "names one by one to get the Person object of the member. Harder to implement."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Sign In feature"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Description of feature"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Signs in using a Google account for mailing purposes."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The basic implementation uses javax.Mail to check for the validity of the email address and password."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "User\u0027s email account information is stored in the Model class through this command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "In this version, only gmail server has been made available for use in signing in and sending emails."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "signIn takes in two inputs, first is the email address of the user (in gmail), second is the password to the email address."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "The following sequence diagram shows the process of signing in to the user\u0027s account."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ".Sequence Diagram for signIn command"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "image::SignInSequenceDiagram.png[SignInSequenceDiagram, 550]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "These are the stages shown in figure 4."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Parses the input to obtain the Email address and Password."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to check if user has signed in."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Creates OwnerAccount with the address and password."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Goes to `Model` to store the Email address and Password as `OwnerAccount`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ". Display the success message."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Eliminating signIn command"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 1 (current choice):** Lets user Signs In using their own Gmail Account."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Allows users to user their own Gmail Account and lets members(recipients) know email"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "sent by the team leaders."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Expose users\u0027 password when users are trying to sign in. Users will need to change the account"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "security settings to let less secure app access the account. Compromises account security."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "* **Alternative 2:** Hardcode an account in the application that is responsible for all mailing command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Pros: Do not expose users\u0027 password and Users do not need to change their Account security settings to"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "send the emails."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "** Cons: Members(recipient) receiving email from the users\u0027 may not know the origin of the email."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "This may lead to confusion for the project\u0027s members."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 317,
      "fadisng": 1
    }
  },
  {
    "path": "docs/team/r-d-d-d.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d Wang Runding - Project Portfolio for MyProject"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ":stylesdir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "My team developed a one-stop app to store and manage projects and their"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "relevant information for project team leaders. Team leaders refers to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "those who are in charge of planning an event such as concert, sports"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "event and software engineering project. We realise that many students in NUS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "are involved in such events but all of them face some common problems."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "These problems range from arranging a meeting, keeping track of the finance information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and delegating tasks. Thus, we have MyProject as the solution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MyProject* has a few distinctive features to help them out which includes:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* An address book to record contact details of the planning committee members"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* Generating common free slot among members for meeting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* Keeping track of budgets information"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* Updating the members with regards to the project via email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* Monitoring members\u0027 performance in terms of attendance and amount of tasks done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d Summary of contribution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "What I did for the project is generating ideas and implementing change"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "in UI display feature as well as finance tracker feature."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "At the apps home page, a list of projects that the user is currently involved in will be shown."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If the user wish to work on a particular project, simple checkout to that project"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "with the command checkout followed by the index of the project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::RDHome.png[Home,320,240]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "After checking out, a project overview will be shown which contains the important information about the project."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Below is how a typical project overview look like."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::RDProjectOverview.png[Overview,320,240]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Features added: Finance tracker."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- What it does: It allows user to monitor the budget situation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "for a project. For example the umbrella organization of a cca"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "set the budgets for an event which includes equipment with an"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "amount of 1000 dollars. The user can add this Budget to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "project. When an expense is made under this budget, let’s say"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "200 dollars are used to rent fog machines for the event which"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "can be claimed under equipment budget. The user can add this expense under the equipment Budget."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "MyProject will minus away this amount from the budget and calculate the remaining amount. At any time, the user can view a detailed summary of the budgets in a pie-chart format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "indicating all the expenses under a budget and an overview of how much are left for each budget in the project overview."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "A even more convenient function is that it generates an excel sheet that corresponds to the budgets data. It can be used for sending out to the rest of the planning committee members to update them."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Rationale: In many projects, finance information is only restricted to the treasurer but it is actually important for members in the planning committee to know about it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "For example, the publicity in charge may reconsider the props he’s going to use after viewing the budget situation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Thus, monitoring the budgets information is essential for the team leader to know the situation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and to update the members if needed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Highlights: As a beginner of JavaFX, understanding the concept of how UI works was challenging especially given a rather advanced set up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The implementation of the budget is actually a finance object containing a list of budgets"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "objects which each contains a list of spending objects. This implementation requires"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a lot of interaction with jackson which is also a challenge."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Lastly, playing with Apache POI was really fun. I get to create and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "style excel sheets and learn about using other\u0027s API along the way."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Features added: Change of Ui/checkout feature"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- What it does: Allows the user to switch to a project to work on it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "As the user types a command, the display of the application will change to a state that"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "best fits what the user would want to see after typing that command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Rational: Users would expect to see different information given different commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If he adds an expense, he may want to see information with regards to finance"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "thus displaying the list of budgets maybe more suitable than displaying the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "project overview."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Highlights: The logic and maintaining design pattern is the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "hard part for this as different commands needs different interfaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and the switching between interface that involves switching to and from"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the current working project."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Other contribution:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Idea generation:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The idea of the project stemmed from my personal experience and as a team we together make it a success."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Helping out team mates: During the process, I helped some team members to brainstorm certain part of their features such as email."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Reviewing of PRs: Made some constructive feedback on 2 of my teammates\u0027 PR."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "- Building the foundation of the app: As we are building a whole new model, I"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "volunteered to construct the basis of the app which is the project model. It has"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the ability that is similar to address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d Contribution to User Guide"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Since I\u0027m in charge of the finance feature I\u0027m demonstrating"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "how I document this portion in UG."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Imagine today you just attended the Budget meeting"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and your Organization is kind enough to provide you with"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "budgets for your event! How delightful! What’s better is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that you can record this information in MyProject!"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add budget: `addBudget` [Checkout]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Let\u0027s say the organization gave you budgets on equipment and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "manpower, let\u0027s first add these budgets to the project."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `addBudget [b/NAME_OF_BUDGET ex/AMOUNT_OF_BUDGET]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::addBudget.png[addBudget,320,240]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "After adding the budgets, we will be able to see a summary of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "them at project overview. Currently it only shows the amount"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "remaining which is the same as the amount you typed just now"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "because you haven\u0027t spent anything yet."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::projectOverview.png[Overview,320,240]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add expense: `addExpense` [Checkout]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `addExpense [INDEX_OF_BUDGET] [s/DESCRIPTION] [ex/AMOUNT SPEND] [c/dd/MM/yyyy HHmm]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "One month later..."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Now you have gone through quite a few meetings with the planning"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "committee and made some orders online and receive some invoices,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "what\u0027s next? To record all these expenses, simply use the command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "addExpense to add it under the budget. In order to do that, you"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "need the index of the budgets which you may already forgot, but"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "you may simply type listBudgets to view them again."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::addExpense.png[addExpense,320,240]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d List budgets: `listBudget` [Checkout]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "List information about the budgets. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `listBudget`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "In the diagram below, you are seeing the pie chart representation of the budgets."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "It will usually show all the expenses made and the amount remaining for this budget."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "However, if you have already overshot the budget, the pie chart will show"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "overshot instead of remaining to remind you!"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::listBudget.png[listBudget,320,240]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "After all that have been done, a breakdown of the budget situation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "will be available at the project overview with a stacked bar graph"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "indicating the amount remaining and the amount spent."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::projectOverviewFinal.png[Overview,320,240]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Excel sheet storage"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Keeping the planning committee updated regarding budget is always"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a challenge isn\u0027t it? Fret not, MyProject is here to help! Every update on"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the budget information will be recorded in an excel sheet located"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "in the budgets folder. It creates a sheet per project and display"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the budgets and expenses under the budget in a table form. You"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "can easily send this comprehensible document to your team members"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "to update them!"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::excelSheet.001.jpeg[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d Contribution to Developer Guide"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This section is rather intuitive for the user but it is not really the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "case for developers thus I would like to feature my documentation of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "this part in the developer guide."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Checkout"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This allows user to checkout to a project from a list of project to work on it."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Almost every command regarding the project require the user to checkout first."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "For it to work, the ModelManager class is holding an additional `Optional\u003cProject\u003e`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "attribute and the model supports three new methods:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `setWorkingProject()` -- Sets the attribute to the argument of the method."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `getWorkingProject()` -- Returns the current project."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `isCheckedOut()` -- Checks whether the current working project is empty."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `removeWorkingProject` -- Sets the attribute to `Optional.empty()`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "A typical use of the command can be seen in the sequence diagram below."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::CheckoutSequenceDiagram.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[[Implementation-Change-in-UI-display]]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Change in UI display"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The first step of changing UI display is to find out"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "whether a change in UI is needed given a command from user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This is done in the CommandResult class constructor. If a command"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "word matches actions that is email related or help or exit,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the flag will indicate that a change in UI is not needed."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Next, a class to represent the state of UI is needed to remember"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a history which is the `UiEvent` class.UiEvent is a class that represent"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "a type of UiDisplay as an event. It stores the current state of the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "application\u0027s UI and the current working project index if it exists."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Whenever a command is executed, a new UiEvent will be generated and stored in history"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "if this command lead to a state"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that is different from the current one."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The `viewHistory` is stored in the `MainWindow` class as a stack of UiEvents"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and the class also maintains a currentStatePointer. When a `back` command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "is executed, it can check back on what is the previous state."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#changeUiDisplay` -- Change the Ui and change the current state."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#getPreviousState` -- Pops the stack and peek to look for the previous state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#handleBack` -- Change the Ui display to the previous state."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* `MainWindow#getState` -- Get the state given a command word."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Given below is an example of how the UI behave at each step."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 1. The user launches the application and the `viewHistory` will be initialized with the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`PROJECT_LIST` state. The `currentStatePointer` is currently pointing to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "that single address book state."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState0.png[state,320,240]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 2. The user executes `checkout 1` command to checkout to project 1 to work on."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "During the execution of the `checkout` command, when commandresult is created,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it detects that there is a need to change the Ui and the flag is made to true."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "In the `MainWindow`, since a change is needed, `MainWindow#changeUiDisplay` is called"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "to change the display to `PROJECT_OVERVIEW` which is found out using"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "the `MainWindow#getState` method. It also set the `currentState` to be `PROJECT_OVERVIEW`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "The UiEvent with the state of `PROJECT_LIST` and an empty index will be stored"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "in the `viewHistory` stack."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState1.png[state,480,360]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 3. The user now decide to add a budget by `addBudget b/ equipment 3000.00`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This command does need a change in Ui display but the state of this command"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "is exactly the same as the previous command thus `MainWindow#changeUiDisplay`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "will be called with the same state."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Thus, the method `MainWindow#changeUiDisplay` is still called but this time"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it is called to update the information in the current display and set the"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "current state to be still the current state. Thus, the `currentStatePointer` does"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "not move."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState2.png[state,480,360]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If a command fails its execution, a `commandResult` wont be generated thus no change in Ui will happen."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 4. The user now wants to have a better view of the budgets and executes"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "`listBudget`. Same step follows through the checkout command."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState3.png[state,480,360]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Step 5. The user now decides to go back to the home page and executes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "two consecutive `back` command. At the execute stage in `MainWindow`,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "it detects it is a back command and `MainWindow#handleBack` is called."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "This method will then pop the current state by `MainWindow#getPreviousState`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "and call `MainWindow#changeUiDisplay` to display the previous Ui."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState4.png[state,480,360]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayState5.png[state,480,360]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".This diagram shows how the Ui reacts to an user\u0027s input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "image::ChangeUiDisplayActivityDiagram.png[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "If the `currentStatePointer` is at `PROJECT_LIST`, then there are"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "no previous UI states to go back. Under such situation, an error will be returned."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 263
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "fadisng": 1,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectListStorage projectListStorage \u003d new JsonProjectListStorage(userPrefs.getProjectListFilePath(), userPrefs.getBudgetsExcelFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, projectListStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Optional\u003cReadOnlyProjectList\u003e projectListOptional;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ReadOnlyProjectList initialProjects;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListOptional \u003d storage.readProjectList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (!addressBookOptional.isPresent() || !projectListOptional.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d projectListOptional.orElseGet(SampleDataUtil::getSampleProjectList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d new ProjectList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d new ProjectList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            logger.warning(\"Problem while parsing using SimpleDateFormat dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            initialProjects \u003d new ProjectList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialProjects);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 10,
      "jerryk1997": 12,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_NOT_CHECKED_OUT \u003d \"Please checkout to a project before proceeding\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"Image file does not exist\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INDEX \u003d \"Same index is specified more than once\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_NO_MEMBER_SPECIFIED \u003d \"No members are specified\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_TASK_DISPLAYED_INDEX \u003d \"The index provided is invalid. Index should be an integer in the range of 1 and 4\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_SPENDING_DISPLAYED_INDEX \u003d \"The index provided is invalid. Index should be an integer between 1 and 2 or 5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_MEETING_DISPLAYED_INDEX \u003d \"The index provided is invalid. Index should be an integer in the range of 1 and 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "fadisng": 6,
      "jerryk1997": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ExcelUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.apache.poi.hssf.usermodel.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.apache.poi.ss.usermodel.CellStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.apache.poi.ss.util.CellRangeAddress;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ExcelUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static void writeBudgetsToFile(Path file, ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFWorkbook wb \u003d new HSSFWorkbook();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        FileOutputStream out \u003d new FileOutputStream(file.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Project project : projectList.getProjectList()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            List\u003cBudget\u003e budgets \u003d project.getFinance().getBudgets();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFSheet sheet \u003d wb.createSheet(project.getTitle().title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            createHeaders(wb, sheet, budgets);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            fillInnerParts(wb, sheet, budgets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            for (int i \u003d 0; i \u003c budgets.size() * 3; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                sheet.autoSizeColumn(i, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        wb.write(out);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static void createHeaders(HSSFWorkbook wb, HSSFSheet sheet, List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // create 3 cell styles"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFCellStyle title \u003d wb.createCellStyle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFCellStyle upperBorder \u003d wb.createCellStyle();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // create 2 fonts objects"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFFont titleFont \u003d wb.createFont();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFFont normalFont \u003d wb.createFont();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //set font 1 to 12 point type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        titleFont.setFontHeightInPoints((short) 14);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // make it bold"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //arial is the default font"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //set cell style"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setFont(titleFont);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //set a thin border"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setBorderBottom(title.BORDER_THIN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //set the cell format to text see DataFormat for a full list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setDataFormat(HSSFDataFormat.getBuiltinFormat(\"text\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //align center"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setAlignment(CellStyle.ALIGN_CENTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setVerticalAlignment(CellStyle.VERTICAL_CENTER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //create upper border"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        upperBorder.setBorderTop(upperBorder.BORDER_THIN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFRow budgetName \u003d sheet.createRow(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        HSSFRow expenseHeader \u003d sheet.createRow(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgetName.setHeight((short) 0x249);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // create budget header"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFCell cell \u003d budgetName.createCell(counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            cell.setCellStyle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            cell.setCellValue(budget.getName() + String.format(\" ($%s)\", budget.getMoney().toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sheet.addMergedRegion(new CellRangeAddress(0, 0, counter, counter + 2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // create spending header"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFCell expense \u003d expenseHeader.createCell(counter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            expense.setCellStyle(upperBorder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            expense.setCellValue(\"Expense\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFCell time \u003d expenseHeader.createCell(counter + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            time.setCellStyle(upperBorder);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            time.setCellValue(\"Date\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFCell amount \u003d expenseHeader.createCell(counter + 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            amount.setCellStyle(upperBorder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            amount.setCellValue(\"Amount\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            counter +\u003d 3;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static void fillInnerParts(HSSFWorkbook wb, HSSFSheet sheet, List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int max \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (budget.getSpendings().size() \u003e max) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                max \u003d budget.getSpendings().size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (int i \u003d 0; i \u003c max + 1; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            HSSFRow row \u003d sheet.createRow(i + 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (budget.getSpendings().size() \u003e\u003d i + 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    Spending spending \u003d budget.getSpendings().get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    // create name of expense"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    HSSFCell expense \u003d row.createCell(counter);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    expense.setCellValue(spending.getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    //create date of expense"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    HSSFCell time \u003d row.createCell(counter + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    time.setCellValue(spending.getTime().toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    //create amount of expense"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    HSSFCell amount \u003d row.createCell(counter + 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    amount.setCellValue(spending.getMoney().getAmount().doubleValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    counter +\u003d 3;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                } else if (budget.getSpendings().size() \u003d\u003d i) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    HSSFCell cell \u003d row.createCell(counter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    cell.setCellValue(String.format(\"Total remaining: ($%s)\", budget.getRemainingMoney().toString()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    HSSFCellStyle alignRight \u003d wb.createCellStyle();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    alignRight.setAlignment(CellStyle.ALIGN_RIGHT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    cell.setCellStyle(alignRight);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    sheet.addMergedRegion(new CellRangeAddress(i + 2, i + 2, counter, counter + 2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    counter +\u003d 3;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    counter +\u003d 3;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            counter \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IllegalValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    CommandResult executeImageDrop(File imgFile, Person person) throws CommandException, ParseException, IllegalValueException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the ProjectList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see seedu.address.model.Model#getProjectList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of projects */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an Optional\u003cProject\u003e which is the current working project."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cProject\u003e getWorkingProject();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Remove the working project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void removeWorkingProject();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Sets the working project."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setWorkingProject(Project project);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    PerformanceOverview getPerformanceOverview();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Add a view history."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addUiEvent(UiEvent event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the previous history."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent getPreviousEvent();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Reset the view history because some condition is triggered."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void eraseHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 53,
      "jerryk1997": 7,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // Stores all the changes in Ui display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Stack\u003cUiEvent\u003e viewHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            storage.saveProjectList(model.getProjectList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            storage.saveBudgetsToExcel(model.getProjectList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult executeImageDrop(File imgFile, Person person) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person curr : model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (curr.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String commandText \u003d \"addProfilePicture \" + index + \" f/\" + imgFile.getPath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        commandResult \u003d execute(commandText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getProjectList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getProjectListFilePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getWorkingProject();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeWorkingProject() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.removeWorkingProject();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(project);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PerformanceOverview getPerformanceOverview() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return model.getPerformanceOverview();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addUiEvent(UiEvent event) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.viewHistory.push(event);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent getPreviousEvent() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        viewHistory.pop();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return viewHistory.peek();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void eraseHistory() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        viewHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 60,
      "jerryk1997": 31,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/UiEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.ui.State;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UiEvent is an event that has happened in the Ui display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UiEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private State state;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Optional\u003cInteger\u003e projectIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent(State state, Optional\u003cInteger\u003e projectIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public State getState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cInteger\u003e getProjectIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Adds a budget type to the project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBudget\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a budget type to the project\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_BUDGET + \"BUDGET\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_EXPENSE + \"EXPENSE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_BUDGET + \"equipment \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_EXPENSE + \"3000.00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budgets added\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"This budget already exists in the project\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (model.hasBudget(budget)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        currWorkingProject.getFinance().addBudget(budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(currWorkingProject.getTitle(), //title"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                currWorkingProject.getDescription(), currWorkingProject.getMemberNames(), //description + members"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                currWorkingProject.getTasks(), new Finance(currWorkingProject.getFinance().getBudgets()), currWorkingProject.getGeneratedTimetable()); //tasks and budget"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedProject.getListOfMeeting().addAll(currWorkingProject.getListOfMeeting());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setProject(currWorkingProject, editedProject);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof AddBudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 budget.equals(((AddBudgetCommand) other).budget));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58,
      "ccyccyccy": 2,
      "fadisng": 1,
      "jerryk1997": 4,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFromContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddFromContactsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addFromContacts\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Adds the person identified by the index number used in the displayed person list to the working project.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_EXISTING_SUCCESS \u003d \"Added %1$s to %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEMBER \u003d \"Member already exists in the project.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddFromContactsCommand(List\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.targetIndexList \u003d targetIndexList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e indexChecker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (containsInvalidIndexes(targetIndexList, lastShownList)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            int invalidIndex \u003d getInvalidIndex(targetIndexList, lastShownList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \" Invalid index: \" + invalidIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (containsDuplicateIndexes(targetIndexList)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INDEX + \" Duplicate index: \" + getDuplicateIndex(targetIndexList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            personsToAdd.add(lastShownList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //Finds the person in the address book, and gets the name as a string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e namesToAdd \u003d getNames(personsToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        //Find the project to edit, and the title of the project as a string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String projectToEditTitle \u003d projectToEdit.getTitle().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String name : namesToAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            int index \u003d targetIndexList.get(namesToAdd.indexOf(name)).getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (memberListToEdit.contains(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MEMBER + \" Duplicate Member: \" + name + \" is specified by index \" + index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedMemberList.addAll(namesToAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                projectToEdit.getDescription(), editedMemberList, projectToEdit.getTasks(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new Finance(projectToEdit.getFinance().getBudgets()), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedProject.getListOfMeeting().addAll(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e editedPersons \u003d addProjToPersons(personsToAdd, editedProject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        setPersons(personsToAdd, editedPersons, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String names \u003d getAsStringPersons(personsToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_EXISTING_SUCCESS, names, projectToEditTitle), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cString\u003e getNames(List\u003cPerson\u003e personsToAdd) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e namesToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : personsToAdd) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            namesToAdd.add(person.getName().fullName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return namesToAdd;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cPerson\u003e addProjToPersons(List\u003cPerson\u003e personsToAdd, Project projectToAdd) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e editedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : personsToAdd) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cString\u003e projectList \u003d person.getProjects();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            projectList.add(projectToAdd.getTitle().title);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getProfilePicture(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    person.getAddress(), person.getTags(), person.getTimetable(), person.getPerformance());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            editedPerson.getProjects().addAll(projectList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            editedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return editedPersons;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "jerryk1997": 60,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddMemberCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMember\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the working project \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE \" + \"]\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL \" + \"]\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS \" + \"]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member %1$s added to \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"%2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MISSING_FIELDS \u003d \"New member %1$s added to \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"%2$s\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"(Please remember to fill in remaining information for member)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the project\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_WRONG_ADD_COMMAND \u003d \"This person already exists in the address book, \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"please use addFromContacts instead.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NewMemberDescriptor toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Creates an AddMemberCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddMemberCommand(NewMemberDescriptor newMemberDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newMemberDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d newMemberDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String projectToEditTitle \u003d projectToEdit.getTitle().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToAdd \u003d createNewMember(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        personToAdd.getProjects().add(projectToEditTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (model.hasPerson(personToAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_ADD_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (projectToEdit.hasMember(personToAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Adding person to address book and project"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.addPerson(personToAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.add(personToAdd.getName().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(editedMemberList, SortingOrder.getCurrentSortingOrderForMember());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                editedMemberList, projectToEdit.getTasks(), projectToEdit.getFinance(), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (toAdd.isAnyFieldNotEdited()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_MISSING_FIELDS, personToAdd.getName().toString(), projectToEdit), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, personToAdd.getName().toString(), projectToEdit), COMMAND_WORD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createNewMember(NewMemberDescriptor newMemberDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d newMemberDescriptor.getName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d newMemberDescriptor.getPhone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d newMemberDescriptor.getEmail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture profilePicture \u003d newMemberDescriptor.getProfilePicture();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d newMemberDescriptor.getAddress();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (newMemberDescriptor.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            tags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            tags \u003d newMemberDescriptor.getTags().get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Person(name, phone, email, profilePicture, address, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NewMemberDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone \u003d new Phone(\"00000000\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email \u003d new Email(\"no_email@added\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        private ProfilePicture profilePicture \u003d new ProfilePicture(\"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address \u003d new Address(\"-none-\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public NewMemberDescriptor() {}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public NewMemberDescriptor(NewMemberDescriptor toCopy) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setProfilePicture(toCopy.profilePicture);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldNotEdited() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return phone.value.equals(\"00000000\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    || email.value.equals(\"no_email@added\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    || address.value.equals(\"-none-\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Phone getPhone() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return phone;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Email getEmail() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return email;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return profilePicture;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Address getAddress() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return address;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof NewMemberDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            NewMemberDescriptor e \u003d (NewMemberDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 2,
      "fadisng": 2,
      "philipalexanderb": 1,
      "jerryk1997": 74,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProfilePictureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.ProfilePicture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddProfilePictureCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProfilePicture\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a profile picture to the person specified by the index. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_FILE_PATH + \"File path to the image\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_FILE_PATH + \"downloads/profile_picture\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_ADD_PROFILE_PICTURE_SUCCESS \u003d \"Profile picture added for %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final File imgFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddProfilePictureCommand(Index index, File imgFile) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.imgFile \u003d imgFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String filePath \u003d StorageManager.copyImageToData(imgFile, personToEdit.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                profilePicture, personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getTimetable(), personToEdit.getPerformance());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_PROFILE_PICTURE_SUCCESS, editedPerson.getName().toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "jerryk1997": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddProjectCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProject\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a project to the project list. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_NAME + \"PROJECT_TITLE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"PROJECT_DESCRIPTION \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_NAME + \"CS2103 TP \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_DESCRIPTION + \"To create an app to manage projects\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 40,
      "philipalexanderb": 3,
      "fadisng": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectMeetingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class AddProjectMeetingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProjectMeeting\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the project. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_TIME + \"dd/MM/yyyy hhmm \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_TIME + \"29/09/2019 1900 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DESCRIPTION + \"milestone discussion\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"Meeting is already set in this project.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_MEETING_CLASH \u003d \"Meeting time clash with an existing meeting\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_MEETING_DESCRIPTION_EXISTS \u003d \"Meeting with the same description already exists\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Meeting toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    Constructor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public AddProjectMeetingCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        toAdd \u003d meeting;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cTask\u003e taskList \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e newMeetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        newMeetingList.addAll(meetingList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (newMeetingList.contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            for (Meeting meeting: newMeetingList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                if (meeting.getTime().equals(toAdd.getTime())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    throw new CommandException(MESSAGE_MEETING_CLASH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                } else if (meeting.getDescription().equals(toAdd.getDescription())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    throw new CommandException(MESSAGE_MEETING_DESCRIPTION_EXISTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        newMeetingList.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(newMeetingList, SortingOrder.getCurrentSortingOrderForMeeting());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), members, taskList, projectToEdit.getFinance(), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(newMeetingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || (other instanceof AddProjectMeetingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProjectMeetingCommand) other).toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "ccyccyccy": 1,
      "philipalexanderb": 71,
      "fadisng": 7,
      "jerryk1997": 7,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSpendingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Adds a budget type to the project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddSpendingCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Spending toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExpense\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an expense to the specific budget\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \" index of the budget you want to add\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_EXPENSE + \"EXPENSE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_TIME + \"TIME\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \" 1 s/bought pizza for the team ex/60.00 c/20/10/2019 1600\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddSpendingCommand(Index index, Spending toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cBudget\u003e budgets \u003d currWorkingProject.getFinance().getBudgets();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d budgets.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgets.get(index.getZeroBased()).addSpending(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(budgets.get(index.getZeroBased()).getSpendings(), SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project editedProject \u003d new Project(currWorkingProject.getTitle(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                currWorkingProject.getDescription(), currWorkingProject.getMemberNames(), currWorkingProject.getTasks(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new Finance(budgets), currWorkingProject.getGeneratedTimetable());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(currWorkingProject.getListOfMeeting());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setProject(currWorkingProject, editedProject);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 68,
      "ccyccyccy": 2,
      "fadisng": 4,
      "philipalexanderb": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Adds a Task field of a project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds this task to the current project \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"s/DESCRIPTION c/TIME in the form dd/MM/yyyy hhmm\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \" s/Finish GUI\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \" c/05/09/2019 1600\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"Added Task: %1$s to current project.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in this project.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskToEdit \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskArrayList.addAll(taskToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskArrayList.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(taskArrayList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                projectToEdit.getMemberNames(), taskArrayList, projectToEdit.getFinance(), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (projectToEdit.hasTask(task)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TASK_SUCCESS, task), COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof AddTaskCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        AddTaskCommand e \u003d (AddTaskCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return task.equals(e.task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "ccyccyccy": 1,
      "fadisng": 75,
      "philipalexanderb": 1,
      "jerryk1997": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AssignTaskCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assignTask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \": Assigns the task identified by the index number used in the displayed task list\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \" to the person(s) identified by the remaining indexe(s)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: TASK_INDEX PERSON_INDEX... (INDEX must be positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3 5 (TASK_INDEX: 1, PERSON_INDEX:3, 5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_TASK_ASSIGNMENT_SUCCESS \u003d \"Assigned task(%1$s) to %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Task is already assigned to %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AssignTaskCommand(List\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get(); // Gets the working project"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e taskList \u003d currWorkingProject.getTasks(); // Gets the list of tasks in the project"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e personNameList \u003d model.getWorkingProject().get().getMemberNames(); // Gets the names of the members in the project"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e(); // This is the list of Persons representing the members"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Finding the members of the project from the address book"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String personName : personNameList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String[] nameKeywords \u003d personName.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            //Filters the model person list one by one based on each name to find the relevant Person object "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            // since project only keeps members as strings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            personList.add(model.getFilteredPersonList()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    .filtered(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords))).get(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Index taskIndex \u003d targetIndexes.remove(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (taskIndex.getZeroBased() \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Task taskToAssign \u003d taskList.get(taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToAssign \u003d new ArrayList\u003c\u003e(); //List of persons to assign the task to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e personIndexList \u003d targetIndexes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (personIndexList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MEMBER_SPECIFIED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        // Finds all the persons who will be assigned the task and adds them to personsToAssign list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index personIndex : personIndexList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (personIndex.getZeroBased() \u003e\u003d personList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \": \" + personIndex.getOneBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            personsToAssign.add(personList.get(personIndex.getZeroBased()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Assigning task to all Persons"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e assignedPersons \u003d assignTaskTo(personsToAssign, taskToAssign, currWorkingProject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        setPersons(personsToAssign, assignedPersons, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TASK_ASSIGNMENT_SUCCESS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskToAssign.getDescription().toString(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                getAsStringPersons(assignedPersons)), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cPerson\u003e assignTaskTo(List\u003cPerson\u003e personsToAssign, Task taskToAssign, Project currWorkingProject) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e assignedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d currWorkingProject.getTitle().title;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person personToAssign : personsToAssign) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Performance previousPerformance \u003d personToAssign.getPerformance();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment \u003d previousPerformance.getTaskAssignment();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            //Puts the task into the list of tasks of the respective project"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (taskAssignment.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                for (Task task : taskAssignment.get(projectTitle)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    Logger.getGlobal().warning(task.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Logger.getGlobal().warning(taskToAssign.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Logger.getGlobal().warning(Boolean.toString(taskAssignment.get(projectTitle).contains(taskToAssign)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                if (taskAssignment.get(projectTitle).contains(taskToAssign)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_DUPLICATE_ASSIGNMENT, personToAssign.getName().fullName));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskAssignment.get(projectTitle).add(taskToAssign); // Add tha task to the list of tasks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskAssignment.put(projectTitle, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskAssignment.get(projectTitle).add(taskToAssign);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cTask\u003e\u003e updatedTaskAssignment \u003d previousPerformance.getTaskAssignment();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Performance updatedPerformance \u003d previousPerformance.setTasksAssigned(updatedTaskAssignment);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person editedPerson \u003d new Person(personToAssign.getName(), personToAssign.getPhone(), personToAssign.getEmail(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    personToAssign.getProfilePicture(), personToAssign.getAddress(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    personToAssign.getTags(), personToAssign.getTimetable(), updatedPerformance);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            editedPerson.getProjects().addAll(personToAssign.getProjects());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            assignedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return assignedPersons;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "jerryk1997": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Changes the UI to the previous display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": go back to the previous display \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BackCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new CommandResult(\"\", COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 24,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BroadcastMailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Mailer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class BroadcastMailCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"broadcastMail\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mails have been sent successfully\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN \u003d \"Please sign in using your email account before sending Email\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please check your internet connection and ensure that the following has been modified to your account security settings:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Enable Less secure app access\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Disable the 2-Step Verification when Signing into your Google account\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Please ensure the recipients\u0027 email address is correct\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_EMPTY_MEMBERS \u003d \"No members have been added to the project.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": broadcasts mail to project members.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"EMAIL BODY \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"sending email \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"Hello World!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public BroadcastMailCommand(String subject, String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d model.getOwnerAccount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project project \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e contactList \u003d model.getMembers();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        HashMap\u003cName, Person\u003e contactSet \u003d new HashMap\u003cName, Person\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Person person: contactList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            contactSet.put(person.getName(), person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e recipientsListInString \u003d project.getMemberNames();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e recipientsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (String name: recipientsListInString) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Name n \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            recipientsList.add(contactSet.get(n));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String unsentMails \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String listOfUnsentMails \u003d \"Mails could not be sent to the following members:\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Person person: recipientsList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String recipientEmail \u003d person.getEmail().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Mailer.sendEmail(ownerAccount.getEmail().value, ownerAccount.getPassword(), recipientEmail, this.subject, this.message);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                if (!unsentMails.equals(\"\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    unsentMails \u003d unsentMails + \"\\n\" + \"  - \" + person.getName().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    unsentMails \u003d \"  - \" + person.getName().toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (recipientsList.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_MEMBERS, COMMAND_WORD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (unsentMails.equals(\"\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult((listOfUnsentMails + unsentMails + \"\\n\" + MESSAGE_FAILURE), COMMAND_WORD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "philipalexanderb": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Checkout to a project to work on it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class CheckoutCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": switch to a project in the list to work on \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"by the index number used in the displayed project list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_SUCCESS \u003d \"Switched to project:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CheckoutCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (true) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            //throw new CommandException(lastShownList.get(0).getFinance().getBudgets().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project projectToSwitchTo \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(projectToSwitchTo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_SUCCESS, projectToSwitchTo.toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected void setPersons(List\u003cPerson\u003e personsToAssign, List\u003cPerson\u003e assignedPersons, Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e toAssignIter \u003d personsToAssign.listIterator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e assignedIter \u003d assignedPersons.listIterator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        while (toAssignIter.hasNext() \u0026\u0026 assignedIter.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person personToAssign \u003d toAssignIter.next();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person assignedPerson \u003d assignedIter.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            model.setPerson(personToAssign, assignedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected String getAsStringPersons(List\u003cPerson\u003e personsAssigned) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (int i \u003d 0; i \u003c personsAssigned.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person person \u003d personsAssigned.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                sb.append(person.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                sb.append(\", \" + person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected String getAsStringTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                sb.append(task.description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                sb.append(\", \" + task.description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected boolean containsDuplicateIndexes(List\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e indexChecker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (indexChecker.contains(targetIndex)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            indexChecker.add(targetIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected \u003cT\u003e boolean containsInvalidIndexes(List\u003cIndex\u003e targetIndexList, List\u003cT\u003e genericList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d genericList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected int getDuplicateIndex(List\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e indexChecker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (indexChecker.contains(targetIndex)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                return targetIndex.getOneBased();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            indexChecker.add(targetIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    protected \u003cT\u003e int getInvalidIndex(List\u003cIndex\u003e targetIndexList, List\u003cT\u003e genericList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d genericList.size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                return targetIndex.getOneBased();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "jerryk1997": 96,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final boolean changeInUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final boolean back;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // list of command that doesnt require a change in display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(LogOutCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                SendMailCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                BroadcastMailCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                SendReminderCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                SignInCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                BackCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                SetTimetableCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (list.contains(commandWord)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.changeInUi \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.changeInUi \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (commandWord.equals(BackCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            back \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            back \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Find out whether a change in Ui is needed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean changeNeeded() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return changeInUi;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, String commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false, commandWord);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isBack() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 commandWord \u003d\u003d otherCommandResult.commandWord;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, commandWord);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 37,
      "ccyccyccy": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DeleteBudgetCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBudget\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete a budget from the list of budgets in the project \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"by the index number used in the displayed project budget list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DELETE_BUDGET_SUCCESS \u003d \"Budget deleted :\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DeleteBudgetCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cTask\u003e tasks \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cMeeting\u003e meetings \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Timetable timetable \u003d projectToEdit.getGeneratedTimetable();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d finance.getBudgets().size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Budget budgetToDelete \u003d finance.removeBudget(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                members, tasks, finance, timetable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        editedProject.setListOfMeeting(meetings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BUDGET_SUCCESS, budgetToDelete), COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof DeleteBudgetCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        DeleteBudgetCommand e \u003d (DeleteBudgetCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProjectMeetingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DeleteProjectMeetingCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteMeeting\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete a meeting from the list of meetings in the project \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"by the index number used in the displayed project meetings list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_MEETING_SUCCESS \u003d \"Meetings deleted :\\n%1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DeleteProjectMeetingCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cTask\u003e tasks \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetings \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(meetings, SortingOrder.getCurrentSortingOrderForMeeting());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArrayList\u003cMeeting\u003e meetingsToEdit \u003d new ArrayList\u003c\u003e(meetings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d projectToEdit.getGeneratedTimetable();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d meetingsToEdit.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meetingToDelete \u003d meetingsToEdit.remove(index.getOneBased() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.deleteMeetingInAllPersons(meetingToDelete, projectToEdit);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e newMeeting \u003d new ArrayList\u003cMeeting\u003e(meetingsToEdit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                members, tasks, finance, timetable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(newMeeting);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_MEETING_SUCCESS, meetingToDelete), COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!(other instanceof DeleteProjectMeetingCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        DeleteProjectMeetingCommand e \u003d (DeleteProjectMeetingCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "philipalexanderb": 82,
      "fadisng": 4,
      "jerryk1997": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Deletes a task field of a project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes this task from the current project \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s from current project.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public DeleteTaskCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskToEdit \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d taskToEdit.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(taskToEdit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task task \u003d taskList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.deleteTaskInAllPersons(task, projectToEdit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d projectToEdit.getGeneratedTimetable();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                projectToEdit.getMemberNames(), taskList, finance, timetable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, task), COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof DeleteTaskCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        DeleteTaskCommand e \u003d (DeleteTaskCommand) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "ccyccyccy": 4,
      "fadisng": 75,
      "philipalexanderb": 1,
      "jerryk1997": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private static boolean isNameEdited;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedPerson.getProjects().addAll(personToEdit.getProjects());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (isNameEdited) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            model.editInAllProjects(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.editInAllProjects(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (editPersonDescriptor.getName().isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            isNameEdited \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture updatedProfilePicture \u003d editPersonDescriptor.getProfilePicture().orElse(personToEdit.getProfilePicture());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d personToEdit.getTimetable(); // Timetable is not affected by edit command. Just copy."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Performance performance \u003d personToEdit.getPerformance(); // Similar to timetable, performance is unaffected."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedProfilePicture, updatedAddress, updatedTags, timetable, performance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setProfilePicture(toCopy.profilePicture);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public Optional\u003cProfilePicture\u003e getProfilePicture() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return Optional.ofNullable(profilePicture);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "fadisng": 1,
      "philipalexanderb": 5,
      "jerryk1997": 24,
      "-": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTask\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"When editing a task, if d/ is not in the input, task will automatically become undone.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_DONE + \"] \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Finish GUI \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_TIME + \"09/09/2019 1700\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskSet \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(taskSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d taskSet.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task taskToEdit \u003d taskList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.editTaskInAllPersons(taskToEdit, editedTask, projectToEdit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.add(index.getZeroBased(), editedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(taskList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), projectToEdit.getMemberNames(), taskList, projectToEdit.getFinance(), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time updatedTime \u003d editTaskDescriptor.getTime().orElse(taskToEdit.getTime());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        boolean updatedIsDone \u003d editTaskDescriptor.getIsDone().orElse(taskToEdit.isDone());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new Task(updatedDescription, updatedTime, updatedIsDone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private boolean isDone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setIsDone(toCopy.isDone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, time, isDone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsDone() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(isDone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    \u0026\u0026 getIsDone() \u003d\u003d (e.getIsDone())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "ccyccyccy": 1,
      "fadisng": 182,
      "jerryk1997": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateSlotCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeSlotGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeSlotsAvailable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class GenerateSlotCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_TIMERANGE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \": Generate timeslot from requested meeting duration and time range\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Parameters: d/DURATION(must be positive integer less than 25) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[r/TIMERANGE (DAY TIME DAY TIME)]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + PREFIX_DURATION + \"2 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_TIMERANGE + \"MONDAY 0800 MONDAY 1700\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ERROR \u003d \"Unknown error occured in generation algorithm. Please contact the dev team to report on this bug\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Generation success! Possible timeslots are shown below.\\n%s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_SUCCESS_WITH_MEMBERS_UNAVAILABLE \u003d \"Unable to find timeslot with all members available. However, we managed to find timeslots with most members available!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Members included: %s\\n%s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_GENERATION_FAILED_NO_SLOT_AVAILABLE \u003d \"Unable to find any timeslots\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String DURATION_VALIDATION_REGEX \u003d \"\\\\d{1,2}\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private int durationInHours;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TimeRange timeRange;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public GenerateSlotCommand(int durationInHours, TimeRange timeRange) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(durationInHours, timeRange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.durationInHours \u003d durationInHours;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (model.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimetable\u003e timetables \u003d model.getMembers().stream().map(Person::getTimetable).collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            boolean allMembersAvailable \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            Timetable generatedTimetable \u003d new Timetable(new TimeSlotGenerator(timetables, durationInHours, timeRange).generate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cPerson\u003e members \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (generatedTimetable.getTimeRanges().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                allMembersAvailable \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                TimeSlotsAvailable timeSlotsAvailable \u003d new TimeSlotGenerator(timetables, durationInHours, timeRange).generateWithMostPeople();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (timeSlotsAvailable.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    return new CommandResult(MESSAGE_GENERATION_FAILED_NO_SLOT_AVAILABLE, COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                generatedTimetable \u003d new Timetable(timeSlotsAvailable.getTimeRanges());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                members \u003d model.getMembers().stream().filter(x -\u003e timeSlotsAvailable.getTimetables().contains(x.getTimetable())).collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            Project editedProject \u003d new Project(currWorkingProject.getTitle(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    currWorkingProject.getDescription(), currWorkingProject.getMemberNames(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    currWorkingProject.getTasks(), currWorkingProject.getFinance(), generatedTimetable);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            editedProject.setListOfMeeting(currWorkingProject.getListOfMeeting());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            model.setProject(currWorkingProject, editedProject);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String formattedResult \u003d generatedTimetable.getTimeRanges().stream().map(TimeRange::toString).collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (allMembersAvailable) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, formattedResult), COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                String membersAvailable \u003d members.stream().map(x -\u003e x.getName().toString()).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS_WITH_MEMBERS_UNAVAILABLE, membersAvailable, formattedResult), COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 92,
      "fadisng": 1,
      "philipalexanderb": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ListBudgetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBudget\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project workingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cBudget\u003e budgetArrayList \u003d workingProject.getFinance().getBudgets();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Collections.sort(budgetArrayList, Comparator.comparing(budget -\u003e budget.getRemainingMoney().getAmount()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Budget budget : budgetArrayList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(index + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(budget.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(sb.toString(), COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 35,
      "fadisng": 6,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogOutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class LogOutCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logOut\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out successfully\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sign In to your Email Account.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_HAVE_NOT_SIGNED_IN \u003d \"User have not signed in. You can proceed to sign in immediately\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public LogOutCommand(){}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_HAVE_NOT_SIGNED_IN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.logOut();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkAttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class MarkAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markAttendance\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \": Marks the attendance for meeting specified by the index number used in the displayed meeting list\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: MEETING_INDEX PERSON_INDEX... (INDEX must be positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"2 1 2 4 (MEETING_INDEX: 2, PERSON_INDEX:1, 2, 4)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_MARK_ATTENDANCE_SUCCESS \u003d \"Attendance for meeting(%1$s on %2$s) is marked for %3$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE \u003d \"Attendance already marked for %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_NO_MEMBER_SPECIFIED \u003d \"No members are specified, attendance cannot be marked.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public MarkAttendanceCommand(List\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetingSet \u003d currWorkingProject.getListOfMeeting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Getting the list shown to the user so that the index input matches the position of the meeting"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cMeeting\u003e meetingListShown \u003d meetingSet.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .sorted(Comparator.comparing(m -\u003e m.getTime().getDate())).collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Finding the corresponding Persons in the contacts based on the names in the project"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e personNameList \u003d model.getWorkingProject().get().getMemberNames();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String personName : personNameList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String[] nameKeywords \u003d personName.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            //Filters the model person list one by one based on each name to find the relevant Person object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            // since project only keeps members as strings"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            personList.add(model.getFilteredPersonList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    .filtered(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords))).get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Index meetingIndex \u003d targetIndexes.remove(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (meetingIndex.getZeroBased() \u003e\u003d meetingListShown.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Meeting meeting \u003d meetingListShown.get(meetingIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToMark \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e personIndexList \u003d targetIndexes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (personIndexList.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MEMBER_SPECIFIED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index personIndex : personIndexList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (personIndex.getZeroBased() \u003e\u003d personList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + \": \" + personIndex.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            personsToMark.add(personList.get(personIndex.getZeroBased()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e markedPersons \u003d markAttendanceOf(personsToMark, meeting, currWorkingProject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        setPersons(personsToMark, markedPersons, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_ATTENDANCE_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meeting.getDescription().toString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meeting.getTime().toString(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                getAsStringPersons(markedPersons)), COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cPerson\u003e markAttendanceOf(List\u003cPerson\u003e personsToMark, Meeting meeting, Project currWorkingProject) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e markedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d currWorkingProject.getTitle().title;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person personToMark : personsToMark) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Performance previousPerformance \u003d personToMark.getPerformance();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingsAttended \u003d previousPerformance.getMeetingsAttended();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (meetingsAttended.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                if (meetingsAttended.get(projectTitle).contains(meeting)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    throw new CommandException(String.format(MESSAGE_DUPLICATE_ATTENDANCE, personToMark.getName().fullName));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meetingsAttended.get(currWorkingProject.getTitle().title).add(meeting);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meetingsAttended.put(projectTitle, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meetingsAttended.get(projectTitle).add(meeting);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cMeeting\u003e\u003e updatedMeetingsAttended \u003d previousPerformance.getMeetingsAttended();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Performance updatedPerformance \u003d previousPerformance.setMeetingsAttended(updatedMeetingsAttended);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Person editedPerson \u003d new Person(personToMark.getName(), personToMark.getPhone(), personToMark.getEmail(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    personToMark.getProfilePicture(), personToMark.getAddress(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    personToMark.getTags(), personToMark.getTimetable(), updatedPerformance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            editedPerson.getProjects().addAll(personToMark.getProjects());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            markedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return markedPersons;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "fadisng": 1,
      "jerryk1997": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemoveMemberCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeMember\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Removes the member from the working project.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REMOVE_MEMBER_SUCCESS \u003d \"Removed %1$s from %2$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public RemoveMemberCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d projectToEdit.getMemberNames().size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String personToRemoveName \u003d projectToEdit.getMemberNames().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Creates a predicate to find the person in the contacts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(personToRemoveName.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //Finding the person and removing the project from the person\u0027s list of projects"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //Creating the new member list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        memberListToEdit.remove(targetPerson.getName().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                editedMemberList, projectToEdit.getTasks(), projectToEdit.getFinance(), projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.setPerson(targetPerson, removeFromPerson(projectToEdit, targetPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MEMBER_SUCCESS, targetPerson.getName().fullName,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                editedProject.getTitle().toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Person removeFromPerson(Project project, Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d project.getTitle().title;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        person.getProjects().remove(projectTitle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getProfilePicture(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                person.getAddress(), person.getTags(), person.getTimetable(), person.getPerformance());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedPerson.getProjects().addAll(person.getProjects());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return editedPerson;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "philipalexanderb": 1,
      "jerryk1997": 33,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SendMailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Mailer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendMailCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sendMail\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mail has been sent successfully\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN \u003d \"Please sign in using your email account before sending Email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to send email.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Please check your internet connection and ensure that the following has been modified to your account security settings:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Enable Less secure app access\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Disable the 2-Step Verification when Signing into your Google account\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Please ensure the recipient\u0027s email address is correct\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends Mail to recipient. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_RECIPIENT + \"RECIPIENT EMAIL ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"EMAIL BODY \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_RECIPIENT + \"bob@gmail.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"sending email \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"Hello World!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String recipient;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendMailCommand(String recipient, String subject, String message) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.recipient \u003d recipient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d model.getOwnerAccount();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Mailer.sendEmail(ownerAccount.getEmail().value, ownerAccount.getPassword(), this.recipient, this.subject, this.message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE, COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SendReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Mailer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendReminderCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sendReminder\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Reminders have been sent!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN \u003d \"Please sign in using your email account before sending Reminder\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please check your internet connection and ensure that the following has been modified to your account security settings:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Enable Less secure app access\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Disable the 2-Step Verification when Signing into your Google account\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Please ensure the recipients\u0027 email address is correct\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_EMPTY_MEMBERS \u003d \"No members have been added to the project.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sends reminder to project members.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DURATION + \"DURATION\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DURATION + \"3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private int durationDays;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendReminderCommand(int duration) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.durationDays \u003d duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d model.getOwnerAccount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project project \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //getting list of meetings and tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d project.getListOfMeeting();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cTask\u003e taskList \u003d project.getTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //obtaining List\u003cPerson\u003e recipientsList from List\u003cString\u003e that is in the project and model.getMembers()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e recipientsList \u003d getMembersFromContacts(model, project);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //get current time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        java.util.Date date \u003d new java.util.Date();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String meetingsReminder \u003d \"Please take note that the following meeting(s) is coming in \" + durationDays + \" days:\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String taskReminder \u003d \"Please take note that the following task(s) is due in \" + durationDays + \" days:\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Collections.sort(meetingList, Comparator.comparing(m -\u003e m.getTime().getDate()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Meeting meeting: meetingList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Date meetingDate \u003d meeting.getTime().getDate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            long diffDays \u003d findDifferenceInDays(date, meetingDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (diffDays \u003c\u003d this.durationDays \u0026\u0026 diffDays \u003e\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                meetingsReminder \u003d meetingsReminder + i + \".  \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"Meeting description: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + meeting.getDescription().toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"     Meeting time: \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + meeting.getTime().toString() + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int j \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Date meetingDate \u003d task.getTime().getDate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            long diffDays \u003d findDifferenceInDays(date, meetingDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            if (diffDays \u003c\u003d this.durationDays \u0026\u0026 diffDays \u003e\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                taskReminder \u003d taskReminder + j + \".  \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            j++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String message \u003d meetingsReminder + \"\\n\" + taskReminder;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Person person: recipientsList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String recipientEmail \u003d person.getEmail().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String name \u003d person.getName().toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                String messageBody \u003d \"Hi \" + name + \", \\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        + \"Thank you.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Mailer.sendEmail(ownerAccount.getEmail().value, ownerAccount.getPassword(), recipientEmail, \"Meeting and Task Reminder\", messageBody);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (recipientsList.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_MEMBERS, COMMAND_WORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public long findDifferenceInDays(Date start, Date end) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        long startTime \u003d start.getTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        long endTime \u003d end.getTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        long diffTime \u003d endTime - startTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        long diffDays \u003d diffTime / (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return diffDays;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public List\u003cPerson\u003e getMembersFromContacts(Model model, Project project) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e contactList \u003d model.getMembers();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        HashMap\u003cName, Person\u003e contactSet \u003d new HashMap\u003cName, Person\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Person person: contactList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            contactSet.put(person.getName(), person);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e recipientsListInString \u003d project.getMemberNames();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e recipientsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (String name: recipientsListInString) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Name n \u003d new Name(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            recipientsList.add(contactSet.get(n));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return recipientsList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 152,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetTimetableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimetableInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimetableVisualization;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class SetTimetableCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setTimetable\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_NUSMODS_URL \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SetTimetableCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set timetable to the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Existing timetable will be overwritten by the input timetable.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[\" + PREFIX_FILEPATH + \"FILEPATH] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[\" + PREFIX_NUSMODS_URL + \"NUSMODS_URL]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + COMMAND_WORD + \" 1 \" + PREFIX_FILEPATH + \"/path/to/timetable/file\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + COMMAND_WORD + \" 1 \" + PREFIX_NUSMODS_URL + \"https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_SET_TIMETABLE_SUCCESS \u003d \"Set timetable to: %s\\n%s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEPATH \u003d \"Please provide a proper absolute filepath to the timetable file\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_INVALID_URL \u003d \"Invalid URL. Please provide a proper URL to NUSMODs\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_INVALID_URL_OR_INTERNET_ERROR \u003d \"Unable to reach URL. Please check your internet connection and ensure that you have entered a proper NUSMods link\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_NO_TIMETABLE_SOURCE \u003d \"Please provide either an NUSMods URL or a filepath to a timetable time\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"https:\\\\/\\\\/nusmods.com\\\\/timetable\\\\/sem-[1,2]\\\\/share\\\\?(\\\\w+\u003d(\\\\w+:\\\\w+,?)*\u0026?)+\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final String absoluteFilepath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final URL url;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param absoluteFilepath absoluteFilepath to timetable file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public SetTimetableCommand(Index index, String absoluteFilepath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(index, absoluteFilepath, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(absoluteFilepath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        logger.info(\"Creating SetTimetableCommand using absoluteFilepath: \" + absoluteFilepath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public SetTimetableCommand(Index index, URL url) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(index, null, url);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        logger.info(\"Creating SetTimetableCommand using NUSMods URL: \" + url.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public SetTimetableCommand(Index index, String absoluteFilepath, URL url) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.absoluteFilepath \u003d absoluteFilepath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (absoluteFilepath !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timetable \u003d new TimetableInput().getTimetableFromFilepath(absoluteFilepath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_FILEPATH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (url !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timetable \u003d new TimetableInput().getTimetableFromUrl(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_URL_OR_INTERNET_ERROR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getProfilePicture(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timetable, personToEdit.getPerformance());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_TIMETABLE_SUCCESS, editedPerson.getName().toString(), new TimetableVisualization(timetable).visualize()), COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!(other instanceof SetTimetableCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        SetTimetableCommand a \u003d (SetTimetableCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return index.equals(a.index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 absoluteFilepath.equals(a.absoluteFilepath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 130,
      "jerryk1997": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowPerformanceOverviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class ShowPerformanceOverviewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showPerformanceOverview\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing performance overview of: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e memberList \u003d model.getMembersOf(currWorkingProject);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (memberList.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(\"Unable to generate performance overview with no members\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        PerformanceOverview overview \u003d new PerformanceOverview(currWorkingProject, memberList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.setPerformanceOverview(overview);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, currWorkingProject.getTitle().title), COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignInCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SignInCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private OwnerAccount ownerAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"signIn\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Signed In Successfully\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGNED_IN \u003d \"You have signed in, please log out to sign in to another account\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN_ISSUE \u003d \"Unable to sign in. Please check that: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have correctly input the email address and password.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You are connected to the Internet.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have enabled Less secure app access in your Google Account Setting\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have disabled the 2-Step Verification in your Google Account Setting\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sign In to your Email Account. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_ACCOUNT + \"EMAIL_ACCOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_ACCOUNT + \"alice@gmail.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_PASSWORD + \"12345678\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SignInCommand(OwnerAccount ownerAccount) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(ownerAccount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d ownerAccount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    final Logger logger \u003d LogsCenter.getLogger(SendMailCommand.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (model.isSignedIn() \u0026\u0026 this.ownerAccount.equals(model.getOwnerAccount())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(\"You are signed in with the Account\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (model.isSignedIn()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGNED_IN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Can try to use other legit method, current method is to send dummy email to cs2103t17@gmail.com and see if email can be sent."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            model.signIn(ownerAccount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN_ISSUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortMeetingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Sorts the meetings in the current project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortMeetingCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortMeeting\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String LIST_VALID_INDEX \u003d \"1 - Sorts by alphabetical order.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"2 - Sorts by increasing date/time.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the meetings from the current project according to given index.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + LIST_VALID_INDEX + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1-2)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SORT_MEETING_SUCCESS \u003d \"Meetings sorted by%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SAME_INDEX \u003d \"Meetings already sorted in this order! Select a different ordering. Here\u0027s the list of sorting orders.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + LIST_VALID_INDEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortMeetingCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        int num \u003d index.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (num \u003d\u003d SortingOrder.getMeetingCurrentIndex()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetings \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String sortType \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" alphabetical order.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentMeetingSortingOrderByAlphabeticalOrder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increasing date/time.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentMeetingSortingOrderByDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SORT_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        meetingList.addAll(meetings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        sortMeeting(meetingList, SortingOrder.getCurrentSortingOrderForMeeting());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), new ArrayList\u003cString\u003e(), projectToEdit.getTasks(), finance, projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.getMemberNames().addAll(members);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.setListOfMeeting(meetingList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_MEETING_SUCCESS, sortType), COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void sortMeeting(List\u003cMeeting\u003e list, Comparator\u003cMeeting\u003e meetingComparator) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(list, meetingComparator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof SortMeetingCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        SortMeetingCommand e \u003d (SortMeetingCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortSpendingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Sorts the tasks in the current project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortSpendingCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortSpending\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the spendings for each expense in the list of budgets according to given index.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"1 - Sorts by alphabetical order.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"2 - Sorts by increasing date/time.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"5 - Sorts by increasing spending.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1-2 or 5)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SORT_SPENDING_SUCCESS \u003d \"Spendings sorted by%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SAME_INDEX \u003d \"Spending already sorted in this order! Select a different ordering.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortSpendingCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        int num \u003d index.getOneBased();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (num \u003d\u003d SortingOrder.getSpendingCurrentIndex()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String sortType \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" alphabetical order.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByAlphabeticalOrder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increasing date/time.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increase expenses.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByExpense();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SORT_SPENDING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cBudget\u003e budgetListToEdit \u003d projectToEdit.getFinance().getBudgets();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Budget budget : budgetListToEdit) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortSpending(budget.getSpendings(), SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), new ArrayList\u003c\u003e(), projectToEdit.getTasks(), finance, projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.getMemberNames().addAll(members);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_SPENDING_SUCCESS, sortType), COMMAND_WORD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void sortSpending(List\u003cSpending\u003e list, Comparator\u003cSpending\u003e spendingComparator) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(list, spendingComparator);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof SortSpendingCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        SortSpendingCommand e \u003d (SortSpendingCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "fadisng": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Sorts the tasks in the current project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortTask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String LIST_VALID_INDEX \u003d \"1 - Sorts by alphabetical order.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"2 - Sorts by increasing date/time.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"3 - Sorts by whether tasks are done.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"4 - Sorts by whether tasks are done and then by increasing date/time.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the task from the current project according to given index.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + LIST_VALID_INDEX + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1-4)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SORT_TASK_SUCCESS \u003d \"Tasks sorted by%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SAME_INDEX \u003d \"Tasks already sorted in this order! Select a different ordering. Here\u0027s the list of sorting orders.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + LIST_VALID_INDEX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortTaskCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        int num \u003d index.getOneBased();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (num \u003d\u003d SortingOrder.getTaskCurrentIndex()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e tasks \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String sortType \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" alphabetical order.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByAlphabeticalOrder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increasing date/time.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" whether tasks are done.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" whether tasks are done and then by increasing date/time.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDoneThenDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SORT_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        sortTask(taskList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), new ArrayList\u003cString\u003e(), taskList, finance, projectToEdit.getGeneratedTimetable());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        editedProject.getMemberNames().addAll(members);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_TASK_SUCCESS, sortType), COMMAND_WORD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void sortTask(List\u003cTask\u003e list, Comparator\u003cTask\u003e taskComparator) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(list, taskComparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof SortTaskCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        SortTaskCommand e \u003d (SortTaskCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "ccyccyccy": 3,
      "fadisng": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnassignTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Performance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class UnassignTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unassignTask\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \": Removes the assigned task(s) specified by the index(s), from the task list of the member specified by the index\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: PERSON_INDEX TASK_INDEX...(INDEX must be positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3 5 (PERSON_INDEX: 1, TASK_INDEX: 3, 5)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Unassigned task(s): %1$s \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"from %2$s.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_NO_TASK_SPECIFIED \u003d \"No tasks are specified.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cIndex\u003e targetIndexList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public UnassignTaskCommand(List\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.targetIndexList \u003d targetIndexList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Index personIndex \u003d targetIndexList.remove(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (personIndex.getZeroBased() \u003e\u003d personList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (containsDuplicateIndexes(targetIndexList)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INDEX + \" Duplicate index: \" + getDuplicateIndex(targetIndexList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person personToEdit \u003d personList.get(personIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment \u003d personToEdit.getPerformance().getTaskAssignment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e displayedTaskList \u003d getDisplayedTaskList(personToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e displayedTaskProjectPairings \u003d getDisplayedTaskListProjectPairing(personToEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (containsInvalidIndexes(targetIndexList, displayedTaskList)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            int invalidIndex \u003d getInvalidIndex(targetIndexList, displayedTaskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX + \" Invalid index: \" + invalidIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (targetIndexList.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TASK_SPECIFIED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e removedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Task taskToRemove \u003d displayedTaskList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            removedTasks.add(taskToRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String projectTitle \u003d displayedTaskProjectPairings.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            taskAssignment.get(projectTitle).remove(taskToRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Performance editedPerformance \u003d new Performance(personToEdit.getPerformance().getMeetingsAttended(), taskAssignment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getProfilePicture(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getTimetable(), editedPerformance);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        editedPerson.getProjects().addAll(personToEdit.getProjects());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, getAsStringTasks(removedTasks), editedPerson.getName().fullName), COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cTask\u003e getDisplayedTaskList(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e projectList \u003d person.getProjects();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e displayedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String projectTitle : projectList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getTaskAssignment().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e projectTasks \u003d person.getPerformance().getTaskAssignment().get(projectTitle);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            displayedTaskList.addAll(projectTasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return displayedTaskList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private List\u003cString\u003e getDisplayedTaskListProjectPairing(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e projectList \u003d person.getProjects();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final List\u003cString\u003e projectPairing \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String projectTitle : projectList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getTaskAssignment().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e projectTasks \u003d person.getPerformance().getTaskAssignment().get(projectTitle);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            projectTasks.forEach(task -\u003e projectPairing.add(projectTitle));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return projectPairing;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddBudgetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BUDGET, PREFIX_EXPENSE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BUDGET, PREFIX_EXPENSE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Budget budget \u003d ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get(), argMultimap.getValue(PREFIX_EXPENSE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddBudgetCommand(budget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"docs/empty_profile_picture.png\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person person \u003d new Person(name, phone, email, profilePicture, address, tagList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "fadisng": 1,
      "jerryk1997": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddFromContactsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddFromContactsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddFromContactsCommandParser implements Parser\u003cAddFromContactsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddFromContactsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AddFromContactsCommand(indexList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFromContactsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand.NewMemberDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " * Parses input arguments and creates a new AddMemberCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddMemberCommandParser implements Parser\u003cAddMemberCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMemberCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * and returns an AddMemberCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddMemberCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NewMemberDescriptor newMemberDescriptor \u003d new NewMemberDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(newMemberDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddMemberCommand(newMemberDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 19,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProfilePictureCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddProfilePictureCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddProfilePictureCommandParser implements Parser\u003cAddProfilePictureCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddProfilePictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfilePictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!argMultiMap.getValue(PREFIX_FILE_PATH).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d new File(argMultiMap.getValue(PREFIX_FILE_PATH).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!imgFile.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FILE_DOES_NOT_EXIST, AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new AddProfilePictureCommand(index, imgFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProjectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddProjectCommandParser implements Parser\u003cAddProjectCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddProjectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Finance finance \u003d new Finance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project project \u003d new Project(title, description, members, tasks, finance, timetable);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45,
      "ccyccyccy": 3,
      "fadisng": 4,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProjectMeetingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.AddProjectMeetingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class AddProjectMeetingCommandParser implements Parser\u003cAddProjectMeetingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public AddProjectMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Description description \u003d ParserUtil.parseMeetingDescription((argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meeting \u003d new Meeting(time, description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new AddProjectMeetingCommand(meeting);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSpendingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddSpendingCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddSpendingCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddSpendingCommandParser implements Parser\u003cAddSpendingCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddSpendingCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddSpendingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_EXPENSE, PREFIX_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_EXPENSE, PREFIX_TIME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSpendingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSpendingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Money spending \u003d ParserUtil.parseMoney(argMultimap.getValue(PREFIX_EXPENSE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()).toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Spending expense \u003d new Spending(spending, time, description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddSpendingCommand(index, expense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TIME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task task \u003d new Task(description, time, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.LogOutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddProjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case AddProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new AddProjectMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case AddProfilePictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AddProfilePictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case AddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AddMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddFromContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddFromContactsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddSpendingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case AssignTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AssignTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case UnassignTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new UnassignTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new EditTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case MarkAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new MarkAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case RemoveMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RemoveMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new DeleteBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case ListBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new ListBudgetCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new CheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case GenerateSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new GenerateSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case SendMailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new SendMailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case BroadcastMailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new BroadcastMailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case SendReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new SendReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case SignInCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new SignInCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case LogOutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new LogOutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case SortSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortSpendingParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case SortMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortMeetingParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case SetTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new SetTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case DeleteProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new DeleteProjectMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case ShowPerformanceOverviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new ShowPerformanceOverviewCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 19,
      "ccyccyccy": 6,
      "philipalexanderb": 22,
      "fadisng": 19,
      "jerryk1997": 22,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AssignTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AssignTaskCommandParser implements Parser\u003cAssignTaskCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AssignTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AssignTaskCommand(indexList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BroadcastMailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.BroadcastMailCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class BroadcastMailCommandParser implements Parser\u003cBroadcastMailCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public BroadcastMailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SUBJECT, PREFIX_MESSAGE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BroadcastMailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String subject \u003d argMultimap.getValue(PREFIX_SUBJECT).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String message \u003d argMultimap.getValue(PREFIX_MESSAGE).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new BroadcastMailCommand(subject, message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckoutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new CheckoutCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class CheckoutCommandParser implements Parser\u003cCheckoutCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckoutCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns a CheckoutCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CheckoutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new CheckoutCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckoutCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE \u003d new Prefix(\"ex/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final Prefix PREFIX_FILE_PATH \u003d new Prefix((\"f/\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_RECIPIENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_ACCOUNT \u003d new Prefix(\"ac/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"su/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"me/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final Prefix PREFIX_DONE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "philipalexanderb": 6,
      "fadisng": 1,
      "jerryk1997": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.DeleteBudgetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DeleteBudgetCommandParser implements Parser\u003cDeleteBudgetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBudgetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns a DeleteBudgetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DeleteBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new DeleteBudgetCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBudgetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteProjectMeetingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectMeetingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Parses input arguments and creates a new DeleteProjectMeetingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DeleteProjectMeetingCommandParser implements Parser\u003cDeleteProjectMeetingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProjectMeetingCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns a DeleteProjectMeetingCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DeleteProjectMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new DeleteProjectMeetingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProjectMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class EditTaskParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DONE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setIsDone(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateSlotCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.GenerateSlotCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.logic.commands.GenerateSlotCommand.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class GenerateSlotCommandParser implements Parser\u003cGenerateSlotCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public GenerateSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                PREFIX_DURATION, PREFIX_TIMERANGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isEmpty() || !isValidDuration(argMultimap.getValue(PREFIX_DURATION).get())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenerateSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange timeRangeSpecified;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMERANGE).isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRangeSpecified \u003d ParserUtil.parseTimeRange(argMultimap.getValue(PREFIX_TIMERANGE).get());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRangeSpecified \u003d new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"00:00\"), DayOfWeek.SUNDAY, LocalTime.parse(\"23:59\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                // Should never reach this place."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new GenerateSlotCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Integer.parseInt(argMultimap.getValue(PREFIX_DURATION).get()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRangeSpecified);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return test.matches(DURATION_VALIDATION_REGEX) \u0026\u0026 Integer.parseInt(test) \u003c 25 \u0026\u0026 Integer.parseInt(test) \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LogOutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.LogOutCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class LogOutCommandParser implements Parser\u003cLogOutCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public LogOutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LogOutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new LogOutCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkAttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class MarkAttendanceCommandParser implements Parser\u003cMarkAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public MarkAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new MarkAttendanceCommand(indexList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    T parse(String userInput) throws ParseException, java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_INVALID_MULTIPLE_INDEX \u003d \"Index is not a non-zero unsigned integer at position: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static List\u003cIndex\u003e parseMultipleIndex(String oneBasedIndexes) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String[] oneBasedIndexesArr \u003d oneBasedIndexes.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cIndex\u003e oneBasedIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int indexCount \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String oneBasedIndex : oneBasedIndexesArr) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(oneBasedIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MULTIPLE_INDEX + indexCount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            oneBasedIndexList.add(Index.fromOneBased(Integer.parseInt(oneBasedIndex)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            indexCount++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return oneBasedIndexList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedDateAndTime \u003d time.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        boolean checkLength \u003d trimmedDateAndTime.split(\" \").length \u003c 2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (checkLength || time \u003d\u003d null || time.equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedTime \u003d time.trim().split(\" \")[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedDate \u003d time.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidTimeAndDate(time.trim())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new Time(time.trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static Description parseMeetingDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedDesc \u003d description.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Parses {@code String timeRange} into a {@code TimeRange}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Example: parseTimeRange(MONDAY 1100 TUESDAY 1500)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRange Format \"DAYSTART TIMESTART DAYEND TIMEEND\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static TimeRange parseTimeRange(String timeRange) throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(timeRange);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] split \u003d timeRange.trim().split(\" \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            DayOfWeek dayStart \u003d DayOfWeek.valueOf(split[0].trim().toUpperCase());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(split[1].trim(), DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            DayOfWeek dayEnd \u003d DayOfWeek.valueOf(split[2].trim().toUpperCase());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(split[3].trim(), DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new TimeRange(dayStart, startTime, dayEnd, endTime);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IllegalValueException | ArrayIndexOutOfBoundsException | java.lang.IllegalArgumentException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(TimeRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Parses a {@code String name, @code String number} into a {@code Budget}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code number} is invalid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Budget parseBudget(String name, String number) throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(name, number);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Description.isValidDescription(trimmedName)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(\"Budget name should only contain alphanumeric characters and spaces, and it should not be blank\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Money money \u003d parseMoney(number);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Budget(trimmedName, money, spendings);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Parse newline separated TimeRanges, return their Timetable representation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timetableString Newline separated TimeRanges"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Timetable representation of the TimeRanges"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static Timetable parseTimetable(String timetableString) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] splitted \u003d timetableString.split(\"\\n\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (String s : splitted) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRanges.add(parseTimeRange(s));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(TimeRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new Timetable(timeRanges);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String spending} into an {@code Money}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code spending} is invalid."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Money parseMoney(String spending) throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedSpending \u003d spending.trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Money.isValidAmount(trimmedSpending)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Money.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Money(new BigDecimal(spending));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 68,
      "ccyccyccy": 41,
      "fadisng": 1,
      "philipalexanderb": 36,
      "jerryk1997": 25,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RemoveMemberCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses the given {@code String} of arguments in the context of RemoveMemberCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * and returns a RemoveMemberCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @throws ParseException if the user input does not conform to the expected formart."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemoveMemberCommandParser implements Parser\u003cRemoveMemberCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemoveMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new RemoveMemberCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveMemberCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 10,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SendMailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SendMailCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendMailCommandParser implements Parser\u003cSendMailCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SendMailCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns a SendMailCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendMailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPIENT, PREFIX_SUBJECT, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECIPIENT, PREFIX_SUBJECT, PREFIX_MESSAGE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SendMailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_RECIPIENT).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String recipient \u003d email.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String subject \u003d argMultimap.getValue(PREFIX_SUBJECT).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String message \u003d argMultimap.getValue(PREFIX_MESSAGE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new SendMailCommand(recipient, subject, message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SendReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SendReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendReminderCommandParser implements Parser\u003cSendReminderCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, SendReminderCommand.PREFIX_DURATION);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, SendReminderCommand.PREFIX_DURATION)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SendReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String durationInString \u003d argMultimap.getValue(SendReminderCommand.PREFIX_DURATION).get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (durationInString.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(\"Duration cannot be an empty input, please key in a positive number for the duration\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(durationInString)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(\"Duration must be a numeric character and a non-zero and non-negative integer\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int duration \u003d Integer.parseInt(durationInString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new SendReminderCommand(duration);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetTimetableCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.SetTimetableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class SetTimetableCommandParser implements Parser\u003cSetTimetableCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Cannot use argMultimap for this because argument is a classpath, and the current tokenizer would tokenize the filepath as well"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public SetTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, SetTimetableCommand.PREFIX_FILEPATH, SetTimetableCommand.PREFIX_NUSMODS_URL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetTimetableCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        URL url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(SetTimetableCommand.PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            absoluteFilepath \u003d argMultimap.getValue(SetTimetableCommand.PREFIX_FILEPATH).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new SetTimetableCommand(index, absoluteFilepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (argMultimap.getValue(SetTimetableCommand.PREFIX_NUSMODS_URL).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (!isValidUrl(argMultimap.getValue(SetTimetableCommand.PREFIX_NUSMODS_URL).get())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    throw new ParseException(SetTimetableCommand.MESSAGE_INVALID_URL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                url \u003d new URL(argMultimap.getValue(SetTimetableCommand.PREFIX_NUSMODS_URL).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new SetTimetableCommand(index, url);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(SetTimetableCommand.MESSAGE_INVALID_URL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(SetTimetableCommand.MESSAGE_NO_TIMETABLE_SOURCE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static boolean isValidUrl(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return url.matches(SetTimetableCommand.VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignInCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SignInCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SignInCommandParser implements Parser\u003cSignInCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SignInCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOUNT, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ACCOUNT, PREFIX_PASSWORD) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignInCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String emailString \u003d argMultimap.getValue(PREFIX_ACCOUNT).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (emailString.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(\"Please input a valid email address\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_ACCOUNT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String emailName \u003d email.value.split(\"@\")[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String emailProvider \u003d emailName.split(\"\\\\.\")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int len \u003d emailName.split(\"\\\\.\").length;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(SignInCommandParser.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!emailProvider.equals(\"gmail\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(\"Please use a gmail account to sign in. Our application only supports a gmail account for email-ing purposes\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (len \u003c 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(\"Please use a valid gmail account to sign in. Our application only supports a gmail account for email-ing purposes\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d new OwnerAccount(email, password);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new SignInCommand(ownerAccount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortMeetingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.SortMeetingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortMeetingParser implements Parser\u003cSortMeetingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortMeetingCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a SortMeetingCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortMeetingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortSpendingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.SortSpendingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new SortSpendingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortSpendingParser implements Parser\u003cSortSpendingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a SortTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortSpendingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortSpendingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortSpendingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortTaskParser implements Parser\u003cSortTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a SortTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnassignTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.UnassignTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class UnassignTaskCommandParser implements Parser\u003cUnassignTaskCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public UnassignTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cIndex\u003e indexList \u003d ParserUtil.parseMultipleIndex(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new UnassignTaskCommand(indexList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnassignTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editTaskInAllPersons(Task task, Task editedTask, Project currWorkingProject) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        persons.editTaskInAllPersons(task, editedTask, currWorkingProject);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteTaskInAllPersons(Task task, Project currWorkingProject) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        persons.deleteTaskInAllPersons(task, currWorkingProject);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        persons.deleteMeetingInAllPersons(meeting, currWorkingProject);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public List\u003cPerson\u003e getMembersOf(Project project) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return persons.getMembersOf(project);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 23,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Mailer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SendMailCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Mailer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static void sendEmail(String from, String password, String to, String sub, String msg) throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(SendMailCommand.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Get properties object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //for gmail server need to set this to true (need to provide authentication)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //in gmail have to provide true value for this key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //the email host which in this case is gmail"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.host\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //the port is 587 for gmail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //get Session \u003d\u003e to log in using the email address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Session session \u003d Session.getInstance(props,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        return new PasswordAuthentication(from, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //compose message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        MimeMessage message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setFrom(new InternetAddress(from));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setSubject(sub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setText(msg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //send message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Transport.send(message); //throws an exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Set the current project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setWorkingProject(Project project);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Remove the working project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void removeWorkingProject();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the current working project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cProject\u003e getWorkingProject();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks whether the budget is already in the working project"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    boolean hasBudget(Budget budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Deletes the budget in the current working project."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void deleteBudget(Budget target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the user performed checkout command before."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    boolean isCheckedOut();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Get list of members in current checked out project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    List\u003cPerson\u003e getMembers();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Sets the current Performance overview to the current working project\u0027s"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * performance overview."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    void setPerformanceOverview(PerformanceOverview overview);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    PerformanceOverview getPerformanceOverview();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    void editTaskInAllPersons(Task taskToEdit, Task editedTask, Project currWorkingProject);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    void deleteTaskInAllPersons(Task task, Project currWorkingProject);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    List\u003cPerson\u003e getMembersOf(Project project);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email Account for Owner of application \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Checks whether User has signed in using his Email Account"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    boolean isSignedIn();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Lets user signs in with the given Account."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    void signIn(OwnerAccount ownerAccount) throws Exception;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns user\u0027s Email Account"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    OwnerAccount getOwnerAccount();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Signs out of the Account"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    void logOut();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project list \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Sets the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    void setProjectListFilePath(Path projectListFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces project list data with the data in {@code ProjectList}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    void setProjectList(ReadOnlyProjectList projectList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns the ProjectList */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a Project with the same identity as {@code Project} exists in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Deletes the given Project."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must exist in the address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the project list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing Project in the project list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a given member from every project involved."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * The member must exist in at least one project."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteMember(String name);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    void editInAllProjects(Person personToEdit, Person editedPerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns an unmodifiable view of the filtered project list */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Updates the filter of the filtered Project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 81,
      "ccyccyccy": 9,
      "philipalexanderb": 23,
      "jerryk1997": 21,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ProjectList projectList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Optional\u003cPerformanceOverview\u003e performanceOverview;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // this is the current branch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Optional\u003cProject\u003e workingProject \u003d Optional.empty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectList \u003d new ProjectList(projectList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList().sorted(SortingOrder.getCurrentSortingOrderForPerson()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(this.projectList.getProjectList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ProjectList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Mimic a git checkout action. What it does is simply assign the project as the working"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param project"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.workingProject \u003d Optional.of(project);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeWorkingProject() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.workingProject \u003d Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An Optional object containing the working project."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (workingProject.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return workingProject;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return If the user checkout to a project."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isCheckedOut() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return workingProject.isPresent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project project \u003d getWorkingProject().get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget b : project.getFinance().getBudgets()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (budget.isSameBudget(b)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cPerson\u003e getMembers() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cPerson\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return members;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project workingProject \u003d getWorkingProject().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        addressBook.getPersonList().forEach(person -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (workingProject.hasMember(person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                members.add(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void setPerformanceOverview(PerformanceOverview overview) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.performanceOverview \u003d Optional.of(overview);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PerformanceOverview getPerformanceOverview() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return performanceOverview.get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editTaskInAllPersons(Task task, Task editedTask, Project currWorkingProject) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        addressBook.editTaskInAllPersons(task, editedTask, currWorkingProject);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteTaskInAllPersons(Task task, Project currWorkingProject) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        addressBook.deleteTaskInAllPersons(task, currWorkingProject);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        addressBook.deleteMeetingInAllPersons(meeting, currWorkingProject);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public List\u003cPerson\u003e getMembersOf(Project project) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return addressBook.getMembersOf(project);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return userPrefs.getProjectListFilePath();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        userPrefs.setProjectListFilePath(projectListFilePath);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectList.resetData(projectList);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList.hasProject(project);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectList.removeProject(target);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        projectList.addProject(project);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectList.setProject(target, editedProject);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String name) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        projectList.deleteMember(name);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editInAllProjects(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        projectList.editInAllProjects(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email Account for Owner of application \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private OwnerAccount ownerAccount;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private boolean isSignedIn \u003d false;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void signIn(OwnerAccount ownerAccount) throws Exception {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String account \u003d ownerAccount.getEmail().value;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String pass \u003d ownerAccount.getPassword();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Mailer.sendEmail(account, pass, \"cs2103t17@gmail.com\", \"SignInCheck\", \"Email Exists and can sign in\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d ownerAccount;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.isSignedIn \u003d true;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean isSignedIn() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.isSignedIn;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public OwnerAccount getOwnerAccount() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.ownerAccount;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void logOut() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d null;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.isSignedIn \u003d false;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code versionedProjectList}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 projectList.equals(other.projectList)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 filteredProjects.equals(other.filteredProjects);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 126,
      "ccyccyccy": 20,
      "fadisng": 2,
      "philipalexanderb": 25,
      "jerryk1997": 42,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OwnerAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class OwnerAccount {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public OwnerAccount(Email email, String password) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(OwnerAccount ownerAccount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.email.equals(ownerAccount.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        builder.append(\" Email Address: \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getPassword());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Duplicates are not allowed (by .isSameProject comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectList implements ReadOnlyProjectList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates an AddressBook using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectList(ReadOnlyProjectList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the contents of the Project list with {@code Projects}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code Projects} must not contain duplicate Projects."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void resetData(ReadOnlyProjectList newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// Project-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns true if a Project with the same identity as {@code project} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds a Project to the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must not already exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the given Project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project identity of {@code editedProject} must not be the same as another existing Project in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeProject(Project key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        projects.deleteMember(member);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editInAllProjects(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        projects.editInAllProjects(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.asUnmodifiableObservableList().size() + \" Projects\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof ProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 projects.equals(((ProjectList) other).projects));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 112,
      "ccyccyccy": 4,
      "jerryk1997": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Unmodifiable view of a projects list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface ReadOnlyProjectList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an unmodifiable view of the projects list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * This list will not contain any duplicate project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getBudgetsExcelFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path projectListFilePath \u003d Paths.get(\"data\", \"projectlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path budgetExcelFilePath \u003d Paths.get(\"budgets\", \"budgets.xls\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        setProjectListFilePath(newUserPrefs.getProjectListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getBudgetsExcelFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgetExcelFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectListFilePath \u003d projectListFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Money amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Money remainingAmount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Money overshotAmount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Budget should have a name followed by an amount in the form 99.99\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget(String name, Money amount, List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, amount, spendings);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spendings.addAll(spendings);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        calculateRemaining(amount, spendings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The project has spend on something under this type of budget."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Add a spending object to the list of spendings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param spending A spending object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spendings.add(spending);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        calculateRemaining(amount, spendings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money getTotalMoneySpent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        double result \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : spendings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result +\u003d spending.getMoney().getAmount().doubleValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Money(new BigDecimal(result));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money getRemainingMoney() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return remainingAmount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money getOvershotMoney() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return overshotAmount;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cSpending\u003e getSpendings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spendings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void calculateRemaining(Money amount, List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal result \u003d amount.getAmount();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : spendings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result \u003d result.subtract(spending.getMoney().getAmount());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (result.doubleValue() \u003c 0.0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.overshotAmount \u003d new Money(new BigDecimal(Math.abs(result.doubleValue())));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.remainingAmount \u003d new Money(new BigDecimal(0.0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.overshotAmount \u003d new Money(new BigDecimal(0.0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.remainingAmount \u003d new Money(result);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(String.format(\"Budget %s has $%s remaining: \", name, amount.toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : spendings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"\\n \" + spending.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if both budgets of the same name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isSameBudget(Budget otherBudget) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (otherBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherBudget !\u003d null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherBudget.getName().equals(getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherBudget.getMoney().equals(getMoney())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherBudget.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherBudget.getSpendings().equals(getSpendings());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(name, amount, spendings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 120,
      "fadisng": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Finance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Finance {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget removeBudget(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgets.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cBudget\u003e getBudgets() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetObservableList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList(budgets);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof Finance // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 getBudgets().equals(((Finance) other).getBudgets())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(budgets);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Money.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Money {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private BigDecimal amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMAT \u003d new DecimalFormat(\"#,###.00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Money should only contain numeric characters and should not be blank and should not contain more than two decimal places and should not be zero\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money(BigDecimal amount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money(String amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Return is a string is a valid money amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 new BigDecimal(test).doubleValue() !\u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return DECIMAL_FORMAT.format(amount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof Money)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Money otherMoney \u003d (Money) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherMoney.getAmount().equals(getAmount());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Spending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Spending {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Money spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Expense should be in the form of description in text format, amount in xx.xxformat and date in dd/MM/yyyy hhmm format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Spending(Money spending, Time time, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(spending, time, description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return String.format(\"Spent $%s for %s on %s \", spending.toString(), description, time.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof Spending)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Spending otherSpending \u003d (Spending) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherSpending.getMoney().equals(getMoney())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherSpending.getTime().equals(getTime())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherSpending.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(description, time, spending);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performanceoverview/PerformanceOverview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.performanceoverview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Performance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class PerformanceOverview {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cPerson\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cPerformance\u003e memberPerformanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final int numOfMeetings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final int numOfTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, RateOfAttendance\u003e attendanceRateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, Integer\u003e attendanceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, RateOfTaskCompletion\u003e completionRateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, Long\u003e taskDoneMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PerformanceOverview(Project project, List\u003cPerson\u003e memberList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.memberList.addAll(memberList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.numOfMeetings \u003d project.getListOfMeeting().size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.numOfTasks \u003d project.getTasks().size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceMap.putAll(makeAttendanceMap());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateMap.putAll(makeAttendanceRateMap());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneMap.putAll(makeTaskDoneMap());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        completionRateMap.putAll(makeCompletionRateMap());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public List\u003cPerson\u003e getMemberList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Project getProject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public RateOfAttendance getRateOfAttendanceOf(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return attendanceRateMap.get(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int getAttendanceOf(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return attendanceMap.get(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public RateOfTaskCompletion getTaskCompletionRateOf(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return completionRateMap.get(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public long getNumOfTaskDoneOf(Person person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return taskDoneMap.get(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public List\u003cPerson\u003e getSortedMemberList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        memberList.sort(Comparator.comparing(person -\u003e person.getName().fullName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, RateOfAttendance\u003e makeAttendanceRateMap() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        HashMap\u003cString, RateOfAttendance\u003e attendanceRateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d project.getTitle().title;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person member : memberList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingsAttendedMap \u003d member.getPerformance().getMeetingsAttended();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!meetingsAttendedMap.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                attendanceRateMap.put(member.getName().fullName, new RateOfAttendance(numOfMeetings, 0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                int numOfMeetingsAttended \u003d meetingsAttendedMap.get(projectTitle).size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                attendanceRateMap.put(member.getName().fullName, new RateOfAttendance(numOfMeetings, numOfMeetingsAttended));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return attendanceRateMap;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, Integer\u003e makeAttendanceMap() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        HashMap\u003cString, Integer\u003e attendanceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d project.getTitle().title;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person member : memberList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingsAttendedMap \u003d member.getPerformance().getMeetingsAttended();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!meetingsAttendedMap.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                attendanceMap.put(member.getName().fullName, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                int numOfMeetingsAttended \u003d meetingsAttendedMap.get(projectTitle).size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                attendanceMap.put(member.getName().fullName, numOfMeetingsAttended);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return attendanceMap;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, RateOfTaskCompletion\u003e makeCompletionRateMap() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        HashMap\u003cString, RateOfTaskCompletion\u003e completionRateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d project.getTitle().title;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person member : memberList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment \u003d member.getPerformance().getTaskAssignment();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!taskAssignment.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                completionRateMap.put(member.getName().fullName, new RateOfTaskCompletion(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                completionRateMap.put(member.getName().fullName, new RateOfTaskCompletion(taskAssignment.get(projectTitle)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return completionRateMap;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, Long\u003e makeTaskDoneMap() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        HashMap\u003cString, Long\u003e taskDoneMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d project.getTitle().title;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person member : memberList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment \u003d member.getPerformance().getTaskAssignment();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!taskAssignment.containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskDoneMap.put(member.getName().fullName, (long) 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                long numOfTaskDone \u003d taskAssignment.get(projectTitle).stream().filter(task -\u003e task.isDone).count();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskDoneMap.put(member.getName().fullName, numOfTaskDone);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return taskDoneMap;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performanceoverview/RateOfAttendance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.performanceoverview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class RateOfAttendance {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final int numOfMeetings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final int numOfMeetingsAttended;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public RateOfAttendance(int numOfMeetings, int numOfMeetingsAttended) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.numOfMeetings \u003d numOfMeetings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.numOfMeetingsAttended \u003d numOfMeetingsAttended;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public double getRate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (numOfMeetings \u003d\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        double rate \u003d ((double) numOfMeetingsAttended / numOfMeetings) * 100;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return rate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public String getRateAsString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return String.format(\"%.1f\", getRate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/performanceoverview/RateOfTaskCompletion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.performanceoverview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class RateOfTaskCompletion {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public RateOfTaskCompletion(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.taskList.addAll(taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private double getCompletionRate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            //Rate of completion is 0 if no task is done or assigned"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        double numOfTasksAssigned \u003d taskList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        long numOfCompletedTasks \u003d taskList.stream().filter(task -\u003e task.isDone).count();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        double completionRate \u003d ((double) numOfCompletedTasks / numOfTasksAssigned) * 100;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return completionRate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public double getRate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return getCompletionRate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public String getRateAsString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return String.format(\"%.1f\", getRate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Performance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class Performance {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingsAttended;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.meetingsAttended \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.taskAssignment \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance(HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingsAttended, HashMap\u003cString, List\u003cTask\u003e\u003e taskAssignment) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.meetingsAttended \u003d meetingsAttended;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.taskAssignment \u003d taskAssignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance setMeetingsAttended(HashMap\u003cString, List\u003cMeeting\u003e\u003e updatedMeetingsAttended) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Performance(updatedMeetingsAttended, this.taskAssignment);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance setTasksAssigned(HashMap\u003cString, List\u003cTask\u003e\u003e updatedTaskAssignment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Performance(this.meetingsAttended, updatedTaskAssignment);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public HashMap\u003cString, List\u003cMeeting\u003e\u003e getMeetingsAttended() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return meetingsAttended;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public HashMap\u003cString, List\u003cTask\u003e\u003e getTaskAssignment() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return taskAssignment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int numOfTasksDone(Project project) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e tasksAssigned \u003d taskAssignment.get(project.getTitle().title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int tasksDone \u003d tasksAssigned.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .filter(task -\u003e task.isDone())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return tasksDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int numOfTaskAssigned(Project project) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return taskAssignment.get(project.getTitle().title).size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int numOfMeetingsAttended(Project project) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return meetingsAttended.get(project.getTitle().title).size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask, String projectTitle) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e tasksAssigned \u003d taskAssignment.get(projectTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!tasksAssigned.contains(taskToEdit)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        tasksAssigned.set(tasksAssigned.indexOf(taskToEdit), editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteTask(Task taskToDelete, String projectTitle) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cTask\u003e tasksAssigned \u003d taskAssignment.get(projectTitle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!tasksAssigned.contains(taskToDelete)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        tasksAssigned.remove(taskToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteMeeting(Meeting meeting, String projectTitle) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cMeeting\u003e meetingsAttendedList \u003d meetingsAttended.get(projectTitle);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!meetingsAttendedList.contains(meeting)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttendedList.remove(meeting);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof Performance)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Performance otherPerformance \u003d (Performance) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return otherPerformance.meetingsAttended.equals(this.meetingsAttended)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherPerformance.taskAssignment.equals(this.taskAssignment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Timetable timetable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Performance performance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Every field must be present and not null, except for timetable which can be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Person(Name name, Phone phone, Email email, ProfilePicture profilePicture, Address address, Set\u003cTag\u003e tags, Timetable timetable, Performance performance) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Person(Name name, Phone phone, Email email, ProfilePicture profilePicture, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this(name, phone, email, profilePicture, address, tags, new Timetable(new ArrayList\u003c\u003e()), new Performance());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return profilePicture;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getProjects() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.projects;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable getTimetable() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance getPerformance() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Timetable field is not included in comparison of equality."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherPerson.getProfilePicture().equals(getProfilePicture())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 ((this.getTimetable() \u003d\u003d null \u0026\u0026 otherPerson.getTimetable() \u003d\u003d null)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    || otherPerson.getTimetable().equals(getTimetable()))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherPerson.getPerformance().equals(getPerformance());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //changed to .hash(name) instead of .hash(name, phone, email, profilePicture, address, tags, timeTable) to better get contact given a name."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        builder.append(\" Timetable: \")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .append(getTimetable());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 21,
      "philipalexanderb": 2,
      "jerryk1997": 21,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ProfilePicture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class ProfilePicture {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \"File path should not contain special characters, and should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([A-Z|a-z]:\\\\\\\\[^*|\\\"\u003c\u003e?\\\\n]*)|(\\\\\\\\\\\\\\\\.*?\\\\\\\\.*)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public ProfilePicture(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //checkArgument(isValidFilePath(filePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.value \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                || (other instanceof ProfilePicture"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 value.equals(((ProfilePicture) other).value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editTaskInAllPersons(Task task, Task editedTask, Project currWorkingProject) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e editedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d currWorkingProject.getTitle().title;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : internalList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getTaskAssignment().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e tasksAssigned \u003d person.getPerformance().getTaskAssignment().get(projectTitle);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (tasksAssigned.contains(task)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                personsToEdit.add(person);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                person.getPerformance().setTask(task, editedTask, projectTitle);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getProfilePicture(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        person.getAddress(), person.getTags(), person.getTimetable(), person.getPerformance());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPerson.getProjects().addAll(person.getProjects());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e toEditIter \u003d personsToEdit.listIterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e editedIter \u003d editedPersons.listIterator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        while (toEditIter.hasNext() \u0026\u0026 editedIter.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setPerson(toEditIter.next(), editedIter.next());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteTaskInAllPersons(Task task, Project currWorkingProject) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e editedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d currWorkingProject.getTitle().title;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : internalList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getTaskAssignment().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e tasksAssigned \u003d person.getPerformance().getTaskAssignment().get(projectTitle);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (tasksAssigned.contains(task)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                personsToEdit.add(person);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                person.getPerformance().deleteTask(task, projectTitle);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getProfilePicture(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        person.getAddress(), person.getTags(), person.getTimetable(), person.getPerformance());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPerson.getProjects().addAll(person.getProjects());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e toEditIter \u003d personsToEdit.listIterator();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e editedIter \u003d editedPersons.listIterator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        while (toEditIter.hasNext() \u0026\u0026 editedIter.hasNext()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setPerson(toEditIter.next(), editedIter.next());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e personsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e editedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String projectTitle \u003d currWorkingProject.getTitle().title;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : internalList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getMeetingsAttended().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cMeeting\u003e meetingsAttended \u003d person.getPerformance().getMeetingsAttended().get(projectTitle);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (meetingsAttended.contains(meeting)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                personsToEdit.add(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                person.getPerformance().deleteMeeting(meeting, projectTitle);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(), person.getProfilePicture(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        person.getAddress(), person.getTags(), person.getTimetable(), person.getPerformance());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPerson.getProjects().addAll(person.getProjects());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedPersons.add(editedPerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e toEditIter \u003d personsToEdit.listIterator();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cPerson\u003e editedIter \u003d editedPersons.listIterator();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        while (toEditIter.hasNext() \u0026\u0026 editedIter.hasNext()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setPerson(toEditIter.next(), editedIter.next());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public List\u003cPerson\u003e getMembersOf(Project project) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cString\u003e memberNameList \u003d project.getMemberNames();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : internalList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (memberNameList.contains(name)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                memberList.add(person);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return memberList;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 3,
      "jerryk1997": 109,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicatePerformanceOverviewException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class DuplicatePerformanceOverviewException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public DuplicatePerformanceOverviewException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        super(\"Operation would result in duplicate performance overviews\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/MeetingNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " * Signals that the operation is unable to find the meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/PerformanceOverviewNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class PerformanceOverviewNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof Description)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Description otherDesc \u003d (Description) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return otherDesc.description.equals(this.description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return Objects.hash(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29,
      "ccyccyccy": 4,
      "fadisng": 5,
      "jerryk1997": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Meeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents a meeting in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Meeting(Time time, Description description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireAllNonNull(time, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static boolean isValidMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        boolean timeValidity \u003d Time.isValidTimeAndDate(meeting.getTime().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        boolean descriptionValidity \u003d Description.isValidDescription(meeting.getDescription().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        boolean validityRes \u003d timeValidity \u0026\u0026 descriptionValidity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return validityRes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(o instanceof Meeting)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meeting \u003d (Meeting) o;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return this.time.equals(meeting.time)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 this.description.equals(meeting.description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Objects.hash(time, description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        builder.append(\"Meeting Description: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .append(getDescription()).append(\"\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(\"Meeting Time: \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 59,
      "jerryk1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Project.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a project in the app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Finance finance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Timetable generatedTimetable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private List\u003cMeeting\u003e meeting \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Project(Title name, Description description, List\u003cString\u003e members, List\u003cTask\u003e tasks, Finance finance, Timetable generatedTimetable) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.title \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.finance \u003d finance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.generatedTimetable \u003d generatedTimetable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public List\u003cMeeting\u003e getListOfMeeting() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return meeting;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void setListOfMeeting(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.meeting.addAll(meetings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void addNewMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.meeting.add(meeting);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance getFinance() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return finance;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isSameProject(Project project) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.title.equals(project.getTitle().title);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cString\u003e getMemberNames() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.members;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d members.indexOf(member);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            members.remove(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasMember(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return members.contains(person.getName().fullName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project otherProject \u003d (Project) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return otherProject.description.equals(this.description)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherProject.title.equals(this.title)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherProject.members.equals(this.members)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherProject.finance.equals(this.finance)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherProject.generatedTimetable.equals(this.generatedTimetable);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable getGeneratedTimetable() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return generatedTimetable;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 49,
      "ccyccyccy": 14,
      "fadisng": 13,
      "philipalexanderb": 9,
      "jerryk1997": 19,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.project.Description.isValidDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.project.Time.isValidTimeAndDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Represents a Project\u0027s task in the app."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Task.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Time time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param description A description of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task(Description description, Time time, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireAllNonNull(description, time, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"task created.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task(Description description, boolean isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireAllNonNull(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static boolean isValidTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return isValidDescription(task.getDescription().description) \u0026\u0026 isValidTimeAndDate(task.getTime().getTime());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return \"[\" + this.getStatusIcon() + \"] \" + description + \" by \" + time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherTask.getTime().equals(getTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return Objects.hash(description, time, isDone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fadisng": 89,
      "jerryk1997": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Represents a date/time in the app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date and Time should be written in the following format : dd/MM/yyyy hhmm\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  where dd refers to days in 2 digits\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  MM refers to months in 2 digits\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  yyyy refers to years in 4 digits\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  hh refers to the clock time in hours in 2 digits\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  mm refers to the clock time in minutes in 2 digits\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d \"the date in the format of dd/MM/yyyy hhmm should be written in the following range: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"-  yyyy between 1900-9999 inclusive\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  MM between 01-12 inclusive\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  dd between 0-31 inclusive in the months of Jan(01), Mar(03), May(05), July(07), Aug(08), Oct(10), Dec(12)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  dd between 0-30 inclusive in the months of Apr(04), June(06), Sep(09), Nov(11)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  between 0-28 in Feb(02) in non-leap year\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"-  between 0-29 in Feb(02) in leap year\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String TIME_CONSTRAINTS \u003d \"The time should be written with a range from 0000 to 2359\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4}$\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"(^(((0[1-9]|1[0-9]|2[0-8])[\\\\/](0[1-9]|1[012]))|((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](19|[2-9][0-9])\\\\d\\\\d$)|(^29[\\\\/]02[\\\\/](19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"(((0|1)[0-9])|(2[0-3]))[0-5][0-9]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Time(String time) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireAllNonNull(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.date \u003d formatter.parse(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static boolean isValidTimeAndDate(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return time.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static boolean isValidTime(String time) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return time.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return date.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof Time)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Time otherTime \u003d (Time) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return otherTime.time.equals(this.time)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherTime.date.equals(this.date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return Objects.hash(time, date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 39,
      "philipalexanderb": 29,
      "jerryk1997": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \"Title should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof Title)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Title otherTitle \u003d (Title) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return otherTitle.title.equals(this.title);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 30,
      "ccyccyccy": 5,
      "fadisng": 2,
      "jerryk1997": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/UniqueProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * I just copied from UniquePeronList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if the list contains an equivalent Project as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds a Project to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the Project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project identity of {@code editedProject} must not be the same as another existing Project in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Removes the equivalent Project from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Replaces the contents of this list with {@code projects}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Project project : internalList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            project.deleteMember(member);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public void editInAllProjects(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String personToEditName \u003d personToEdit.getName().fullName;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String editedPersonName \u003d editedPerson.getName().fullName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cProject\u003e projectsToEdit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cProject\u003e editedProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Project project : internalList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cString\u003e memberList \u003d project.getMemberNames();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (memberList.contains(personToEditName)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                projectsToEdit.add(project);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                List\u003cString\u003e updatedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                updatedMemberList.addAll(memberList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                updatedMemberList.set(memberList.indexOf(personToEditName), editedPersonName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                Project updatedProject \u003d new Project(project.getTitle(), project.getDescription(), updatedMemberList,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        project.getTasks(), project.getFinance(), project.getGeneratedTimetable());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                updatedProject.setListOfMeeting(project.getListOfMeeting());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                editedProjects.add(updatedProject);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cProject\u003e toEditIter \u003d projectsToEdit.listIterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ListIterator\u003cProject\u003e editedIter \u003d editedProjects.listIterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        while (toEditIter.hasNext() \u0026\u0026 editedIter.hasNext()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setProject(toEditIter.next(), editedIter.next());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.project.UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns true if {@code projects} contains only unique projects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 113,
      "ccyccyccy": 11,
      "jerryk1997": 33,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/DuplicateProjectException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/ProjectNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Duration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * A class to store time duration in number of days and hours and minutes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Duration implements Comparable\u003cDuration\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int hours;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int minutes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration(int days, int hours, int minutes) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(Duration duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this.days !\u003d duration.days) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.days - duration.days;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (this.hours !\u003d duration.hours) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.hours - duration.hours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.minutes - duration.minutes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getDays() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getHours() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getMinutes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return minutes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Duration duration \u003d (Duration) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return days \u003d\u003d duration.days"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 hours \u003d\u003d duration.hours"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 minutes \u003d\u003d duration.minutes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return String.format(\"Days: %d Hours: %d Minutes: %d\", days, hours, minutes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/LessonTypeMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class LessonTypeMapping {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static LessonTypeMapping mapping \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Map\u003cString, String\u003e lessonTypeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Obtained data from \"https://github.com/nusmodifications/nusmods/blob/8e76af2e407f602dcecab538804009b6de280196/website/src/utils/timetables.ts\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private LessonTypeMapping() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"LEC\", \"Lecture\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"TUT\", \"Tutorial\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"LAB\", \"Laboratory\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"REC\", \"Recitation\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"SEC\", \"Sectional Teaching\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"DLEC\", \"Design Lecture\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"PLEC\", \"Packaged Lecture\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"PTUT\", \"Packaged Tutorial\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"SEM\", \"Seminar-Style Module Class\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"TUT2\", \"Tutorial Type 2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"TUT3\", \"Tutorial Type 3\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"WS\", \"Workshop\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String get(String key) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return lessonTypeMap.get(key);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // static method to create instance of Singleton class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static LessonTypeMapping getInstance() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (mapping \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            mapping \u003d new LessonTypeMapping();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeRange implements Comparable\u003cTimeRange\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final WeekTime start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final WeekTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Invalid time range format!\\nTimeRange should be constructed in the following format : STARTDAY STARTTIME ENDDAY ENDTIME, with the end time at a later timing in the week than the start time\\ne.g. MONDAY 1234 TUESDAY 2345\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange(WeekTime start, WeekTime end) throws IllegalValueException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!rangeIsValid(start, end)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new IllegalValueException(\"start should be earlier than end\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange(DayOfWeek dayStart, LocalTime timeStart, DayOfWeek dayEnd, LocalTime timeEnd) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(new WeekTime(dayStart, timeStart), new WeekTime(dayEnd, timeEnd));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return end.minus(start);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime getStart() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime getEnd() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange timeRange \u003d (TimeRange) o;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start.equals(timeRange.start)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 end.equals(timeRange.end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(start, end);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Compare by start time."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param other Other TimeRange to compare with."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Negative if start earlier, positive if start later."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(TimeRange other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.start.compareTo(other.start);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlap(TimeRange other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.start.compareTo(other.end) \u003c 0 \u0026\u0026 this.end.compareTo(other.start) \u003e 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlapInclusive(TimeRange other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.overlap(other) || this.getEnd().equals(other.getStart()) || this.getStart().equals(other.getEnd());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static boolean rangeIsValid(WeekTime start, WeekTime end) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(start, end);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start.compareTo(end) \u003c 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"From: \" + this.start.toString() + \" To: \" + this.end.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeSlotGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Collection\u003cTimetable\u003e timetables;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private int numberOfHours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TimeRange userSpecifiedTimeRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Timeslot generator"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timetables List of timetables of all members."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param numberOfHours Must be \u003c\u003d 23 hour"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param userSpecifiedTimeRange TimeRange to generate timeslot within."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotGenerator(Collection\u003cTimetable\u003e timetables, int numberOfHours, TimeRange userSpecifiedTimeRange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(timetables, userSpecifiedTimeRange);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assert numberOfHours \u003e 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timetables \u003d timetables;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.numberOfHours \u003d numberOfHours;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.userSpecifiedTimeRange \u003d userSpecifiedTimeRange;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Return a list of TimeRange which do not overlap with any timetable, are more than the minimum number of hours and within the userSpecifiedTimeRange."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return List of TimeRange where meeting is possible."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException When unable to generate timeslot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e generate() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e combined \u003d combineTimetables(timetables);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e merged \u003d mergedOverlappingTimeRanges(combined);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e inverted \u003d getFreeTimeRanges(merged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e truncated \u003d truncateTimeRanges(inverted, userSpecifiedTimeRange);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e accepted \u003d filterSuitableTimeRanges(truncated, numberOfHours);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(accepted);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return accepted;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable generateWithMostPeople() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cTimetable\u003e set \u003d new HashSet\u003c\u003e(timetables);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cSet\u003cTimetable\u003e\u003e powerSet \u003d powerSet(set);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cSet\u003cTimetable\u003e\u003e powerList \u003d new ArrayList\u003c\u003e(powerSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        powerList.sort((x, y) -\u003e y.size() - x.size()); // Descending order of size"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (Set\u003cTimetable\u003e possibleTimetables : powerList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cTimeRange\u003e timeRanges \u003d new TimeSlotGenerator(possibleTimetables, numberOfHours, userSpecifiedTimeRange).generate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (!timeRanges.isEmpty() \u0026\u0026 possibleTimetables.size() \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new TimeSlotsAvailable(possibleTimetables, timeRanges);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeSlotsAvailable(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Convert {@code Collection\u003cTimetable\u003e} to {@code List\u003cTimeRange\u003e}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timetables Input timetables"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return List of TimeRange obtained by converting timetable into timerange."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e combineTimetables(Collection\u003cTimetable\u003e timetables) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cTimeRange\u003e timeRanges \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (Timetable timetable : timetables) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(timetable.getTimeRanges());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new ArrayList\u003c\u003e(timeRanges);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Merge overlapping TimeRange into 1 TimeRange."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges List of TimeRange."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Merged list of TimeRange."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e mergedOverlappingTimeRanges(Collection\u003cTimeRange\u003e timeRanges) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRangesList \u003d new ArrayList\u003c\u003e(timeRanges);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(timeRangesList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e merged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRangesList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (merged.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.add(timeRange);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            TimeRange latest \u003d merged.get(merged.size() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (latest.overlapInclusive(timeRange)) { // If last TimeRange in merged overlaps with new latest"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                TimeRange tr \u003d mergeTimeRange(timeRange, latest);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.set(merged.size() - 1, tr);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.add(timeRange);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return merged;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author Andrew Mao"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Reused from https://stackoverflow.com/a/14818944"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static \u003cT\u003e Set\u003cSet\u003cT\u003e\u003e powerSet(Set\u003cT\u003e originalSet) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cT\u003e list \u003d new ArrayList\u003cT\u003e(originalSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int n \u003d list.size();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cSet\u003cT\u003e\u003e powerSet \u003d new HashSet\u003cSet\u003cT\u003e\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (long i \u003d 0; i \u003c (1 \u003c\u003c n); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            Set\u003cT\u003e element \u003d new HashSet\u003cT\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (int j \u003d 0; j \u003c n; j++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if ((i \u003e\u003e j) % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    element.add(list.get(j));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            powerSet.add(element);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return powerSet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Merge 2 TimeRange together, assuming that they overlap."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param r1 TimeRange 1."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param r2 TimeRange 2."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return new merged TimeRange."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException If error in creating new TimeRange."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static TimeRange mergeTimeRange(TimeRange r1, TimeRange r2) throws IllegalValueException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeRange(r1.getStart().isBefore(r2.getStart()) ? r1.getStart() : r2.getStart(), r1.getEnd().isAfter(r2.getEnd()) ? r1.getEnd() : r2.getEnd());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e getFreeTimeRanges(List\u003cTimeRange\u003e timeRanges) throws IllegalValueException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Start from MONDAY 0000, to SUNDAY 2359"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e inverted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        DayOfWeek curDay \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime curTime \u003d LocalTime.parse(\"00:00\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime cur \u003d new WeekTime(curDay, curTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            TimeRange toAdd \u003d new TimeRange(cur, timeRange.getStart());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            inverted.add(toAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            cur \u003d timeRange.getEnd();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        inverted.add(new TimeRange(cur.getDay(), cur.getTime(), DayOfWeek.SUNDAY, LocalTime.parse(\"23:59\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return inverted;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Fit all TimeRange within limit specified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges Input TimeRanges"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param limit Clamp input TimeRanges within limit."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Transformed TimeRanges"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e truncateTimeRanges(List\u003cTimeRange\u003e timeRanges, TimeRange limit) throws IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e truncated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (!timeRange.overlap(limit)) { // Start after end"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            WeekTime start \u003d timeRange.getStart().isBefore(limit.getStart()) ? limit.getStart() : timeRange.getStart();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            WeekTime end \u003d timeRange.getEnd().isAfter(limit.getEnd()) ? limit.getEnd() : timeRange.getEnd();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            truncated.add(new TimeRange(start, end));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return truncated;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Eliminate timeRanges shorter than specified duration"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges Input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param numberOfHours Duration in hours"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Filtered result"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e filterSuitableTimeRanges(List\u003cTimeRange\u003e timeRanges, int numberOfHours) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e possibleRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (timeRange.getDuration().compareTo(new Duration(0, numberOfHours, 0)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                possibleRanges.add(timeRange);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return possibleRanges;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 180,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeSlotsAvailable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Wrapper class to wrap timetables and the corresponding generated timeRange"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * isEmpty represents whether there is a valid generated timeRange to be returned to the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotsAvailable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Collection\u003cTimetable\u003e timetables;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final List\u003cTimeRange\u003e timeRanges;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final boolean isEmpty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(Collection\u003cTimetable\u003e timetables, List\u003cTimeRange\u003e timeRanges) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(timetables, timeRanges, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(boolean isEmpty) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(null, null, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(Collection\u003cTimetable\u003e timetables, List\u003cTimeRange\u003e timeRanges, boolean isEmpty) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timetables \u003d timetables;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRanges \u003d timeRanges;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.isEmpty \u003d isEmpty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Collection\u003cTimetable\u003e getTimetables() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timetables;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRanges() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Timetable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private List\u003cTimeRange\u003e timeRanges;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Takes in a formatted string of timings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges List of TimeRange to populate the timetable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable(List\u003cTimeRange\u003e timeRanges) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRanges \u003d timeRanges;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(this.timeRanges);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRanges() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isAvailable(TimeRange timeRange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.timeRanges.stream().noneMatch(tr -\u003e tr.overlap(timeRange));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlaps(TimeRange timeRange) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.timeRanges.stream().anyMatch(timeRange::overlap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d (Timetable) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges.equals(timetable.timeRanges);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(timeRanges);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.getTimeRanges().stream().map(Object::toString).collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimetableInput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimetableInput {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable getTimetableFromFilepath(String absoluteFilepath) throws IOException, ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String content \u003d new Scanner(new File(absoluteFilepath)).useDelimiter(\"\\\\Z\").next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return ParserUtil.parseTimetable(content);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Return retreived timetable from NUSMods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param url URL of NUSMods shared timetable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Retrieved {@code Timetable}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IOException URL parsing error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException Cannot find lesson grouping on NUSMods"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Timetable getTimetableFromUrl(URL url) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String urlString \u003d url.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int semMatch \u003d urlString.indexOf(\"sem-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int sem \u003d Integer.parseInt(urlString.substring(semMatch + 4, semMatch + 5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int start \u003d urlString.indexOf(\"share?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String relevantInfo \u003d urlString.substring(start + 6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] splitted \u003d relevantInfo.split(\"\u0026\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (String moduleString : splitted) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String[] moduleCodePartition \u003d moduleString.split(\"\u003d\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (moduleCodePartition.length \u003c 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String moduleCode \u003d moduleCodePartition[0].toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String rest \u003d moduleCodePartition[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cString\u003e lessonTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cString\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String[] timings \u003d rest.split(\",\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (String timing : timings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                String[] typeAndGroup \u003d timing.split(\":\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                lessonTypes.add(LessonTypeMapping.getInstance().get(typeAndGroup[0]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                groups.add(typeAndGroup[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(getTimeRangesForModule(moduleCode, groups, lessonTypes, sem));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new Timetable(timeRanges);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Send HTTP GET request here, return list of timeRange for that particular module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param moduleCode e.g. CS1101S"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param groups List of groups. Each index of list must correspond with that of lessonTypes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param lessonTypes List of lessonTypes. Can be found on left side of mapping in {@code LessonTypeMapping.java}. Each index of list must correspond with that of groups."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param sem e.g. 1 or 2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private List\u003cTimeRange\u003e getTimeRangesForModule(String moduleCode, List\u003cString\u003e groups, List\u003cString\u003e lessonTypes, int sem) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        URL url \u003d new URL(\"https://api.nusmods.com/v2/2019-2020/modules/\" + moduleCode.toUpperCase() + \".json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        JsonNode root \u003d objectMapper.readTree(url);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(getTimeRangeFromEntry(root, groups.get(i), lessonTypes.get(i), sem, moduleCode.toUpperCase()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Given JSON data, get time ranges for a certain class group. Possible to have more than 1 time range for a single combination of class group and lesson type of a module."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param moduleNode Slice of JsonNode for that particular module."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param group Class group. e.g. 8"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param lessonType Type of lession. Can be found on left side of mapping in {@code LessonTypeMapping.java}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param sem either 1 or 2"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private List\u003cTimeRange\u003e getTimeRangeFromEntry(JsonNode moduleNode, String group, String lessonType, int sem, String moduleCode) throws IllegalValueException, JsonProcessingException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cJsonNode\u003e targets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        moduleNode.path(\"semesterData\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .path(sem - 1) // Sem 1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .path(\"timetable\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .forEach(node -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    if (node.path(\"classNo\").asText().equals(group) \u0026\u0026 node.path(\"lessonType\").asText().equals(lessonType)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        targets.add(node);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (targets.size() \u003c 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            // System.out.println(String.format(\"Group:%s,LessonType:%s,sem:%d\", group, lessonType, sem));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new IllegalValueException(\"No such lesson exists: \" + String.format(\"Module: %s, Group: %s, LessonType: %s, Sem: %d\", moduleCode, group, lessonType, sem));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Possible to have more than"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (JsonNode lesson : targets) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String day \u003d lesson.path(\"day\").asText().toUpperCase();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String startTime \u003d lesson.path(\"startTime\").asText();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String endTime \u003d lesson.path(\"endTime\").asText();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.add(ParserUtil.parseTimeRange(day + \" \" + startTime + \" \" + day + \" \" + endTime));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimetableVisualization.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimetableVisualization {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static final int SPACES_BETWEEN_DAY_AND_TIMETABLE \u003d 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimetableVisualization(Timetable timetable) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String visualize() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.add(getHeader());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.add(getBody());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 0 -- 23"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 4 dash per hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Should look like this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 0000 0100 0200 0300"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // -------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getHeader() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"  \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(getIndentation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add(String.format(\"%02d\", i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(sj.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(getIndentation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24 * 4; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.append(\"_\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getBody() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.add(getDayString(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getDayString(int dayOfWeek) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        DayOfWeek day \u003d DayOfWeek.of(dayOfWeek);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Right pad with space"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String dayString \u003d String.format(\"%-\" + SPACES_BETWEEN_DAY_AND_TIMETABLE + \"s\", day.toString().substring(0, 3));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(dayString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange dummyTimerange;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 3; j++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                dummyTimerange \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (j !\u003d 3) { // From 00 to 45"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(String.format(\"%02d:%02d\", i, j * 15)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(String.format(\"%02d:%02d\", i, (j + 1) * 15)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                } else if (i !\u003d 23) { // From 45 to 00"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(String.format(\"%02d:45\", i)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(String.format(\"%02d:00\", i + 1)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                } else { // Special case for 2345"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(\"23:45\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(\"23:59\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                result.append((dummyTimerange !\u003d null) \u0026\u0026 this.timetable.overlaps(dummyTimerange) ? \"-\" : \" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getIndentation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Indent for the labels"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c SPACES_BETWEEN_DAY_AND_TIMETABLE; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.append(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/WeekTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class WeekTime implements Comparable\u003cWeekTime\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime(DayOfWeek day, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime weekTime \u003d (WeekTime) o;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return day \u003d\u003d weekTime.day"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 time.equals(weekTime.time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(day, time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(WeekTime weekTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this.day !\u003d weekTime.day) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.day.getValue() - weekTime.day.getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.time.compareTo(weekTime.time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isAfter(WeekTime weekTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.compareTo(weekTime) \u003e 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isBefore(WeekTime weekTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.compareTo(weekTime) \u003c 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.day.toString() + \" \" + this.time.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration minus(WeekTime other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int diffInMinutes \u003d this.getDay().getValue() * (24 * 60) + this.getTime().getHour() * 60 + this.getTime().getMinute()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                - other.getDay().getValue() * (24 * 60) - other.getTime().getHour() * 60 - other.getTime().getMinute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int days \u003d diffInMinutes / (24 * 60);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        diffInMinutes \u003d diffInMinutes % (24 * 60);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int hours \u003d diffInMinutes / 60;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int minutes \u003d diffInMinutes % 60;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new Duration(days, hours, minutes);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ProjectList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"docs/empty_profile_picture.png\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"family\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static List\u003cTask\u003e getTaskList(Task... tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            list.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static List\u003cBudget\u003e getBudgetList(Budget... budgets) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Arrays.stream(budgets)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static List\u003cSpending\u003e getSpendingList(Spending... spendings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Arrays.stream(spendings)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static List\u003cMeeting\u003e getSampleMeetings(Meeting... meetings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Arrays.stream(meetings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Project project1 \u003d new Project(new Title(\"CS2103T\"), new Description(\"The mod that takes most time\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTaskList(new Task(new Description(\"Finish GUI\"), new Time(\"04/04/1997 1600\"), false),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                            new Task(new Description(\"Finish Parser\"), new Time(\"04/04/1997 1600\"), true)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    new Finance(getBudgetList(new Budget(\"Team building\", new Money(\"500.00\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                    getSpendingList(new Spending(new Money(\"50.50\"), new Time(\"10/10/2019 1800\"), \"order in pizza\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                            new Spending(new Money(\"200.50\"), new Time(\"12/10/2019 1800\"), \"Went for Zoukout\"))),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                            new Budget(\"Venue\", new Money(\"200.00\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                                    getSpendingList(new Spending(new Money(\"20.00\"), new Time(\"14/10/2019 1800\"), \"booked conference room for discussion\"))))), new Timetable());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            project1.setListOfMeeting(getSampleMeetings(new Meeting(new Time(\"12/09/2019 1530\"), new Description(\"Set Milestones\")), new Meeting(new Time(\"05/09/2019 1600\"), new Description(\"Project Roadmap discussion\"))));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Project project2 \u003d new Project(new Title(\"GER1000\"), new Description(\"Free and easy\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    getTaskList(new Task(new Description(\"Finish Quiz 10\"), new Time(\"04/04/1997 1600\"), false)), new Finance(), new Timetable());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            project2.setListOfMeeting(getSampleMeetings(new Meeting(new Time(\"19/09/2019 1400\"), new Description(\"Finalise version 1b\")), new Meeting(new Time(\"29/11/2019 1300\"), new Description(\"Finalise UG and DG and discussion for project demo\"))));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new Project[]{ project1, project2};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new Project[]{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                new Project(new Title(\"CS2103T\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Description(\"The mod that takes most time\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        getTaskList(new Task(new Description(\"Finish GUI\"), false)), new Finance(), new Timetable())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            };"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static ReadOnlyProjectList getSampleProjectList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectList samplePl \u003d new ProjectList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Project project : getSampleProjects()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            samplePl.addProject(project);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return samplePl;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 42,
      "ccyccyccy": 3,
      "fadisng": 15,
      "philipalexanderb": 14,
      "jerryk1997": 9,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SortingOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Container class to store the current and different types of sorting orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortingOrder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SortingOrder.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cTask\u003e currentSortingOrderForTask \u003d Comparator.comparing(task -\u003e task.getTime().getDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cString\u003e currentSortingOrderForMember \u003d (member1, member2) -\u003e member1.compareToIgnoreCase(member2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cPerson\u003e currentSortingOrderForPerson \u003d Comparator.comparing(person -\u003e person.getName().fullName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static Comparator\u003cSpending\u003e currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getTime().getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cMeeting\u003e currentSortingOrderForMeeting \u003d Comparator.comparing(meeting -\u003e meeting.getTime().getDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static int taskCurrentIndex \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static int spendingCurrentIndex \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static int meetingCurrentIndex \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByAlphabeticalOrder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e task1.getDescription().description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .compareToIgnoreCase(task2.getDescription().description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setTaskCurrentIndex(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"tasks sorted by alphabetical order.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d Comparator.comparing(task -\u003e task.getTime().getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setTaskCurrentIndex(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"tasks sorted by increasing order of time.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e Boolean.compare(task1.isDone(), task2.isDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setTaskCurrentIndex(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"tasks sorted by progress.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDoneThenDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (task1.isDone() \u003d\u003d task2.isDone()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return task1.getTime().getDate().compareTo(task2.getTime().getDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return Boolean.compare(task1.isDone(), task2.isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setTaskCurrentIndex(4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"tasks sorted by progress and then increasing order of time.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByAlphabeticalOrder() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForSpending \u003d (spending1, spending2) -\u003e spending1.getDescription().compareToIgnoreCase(spending2.getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setSpendingCurrentIndex(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"spending sorted by alphabetical order.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getTime().getDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setSpendingCurrentIndex(2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"spending sorted by increasing order of time.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByExpense() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getTime().getDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setSpendingCurrentIndex(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"spending sorted by increasing prices.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentMeetingSortingOrderByAlphabeticalOrder() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForMeeting \u003d (meeting1, meeting2) -\u003e meeting1.getDescription().description.compareToIgnoreCase(meeting2.getDescription().description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setMeetingCurrentIndex(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"meeting sorted by alphabetical order.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentMeetingSortingOrderByDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForMeeting \u003d Comparator.comparing(meeting -\u003e meeting.getTime().getDate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        setMeetingCurrentIndex(2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        logger.info(\"meeting sorted by increasing order of time.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cTask\u003e getCurrentSortingOrderForTask() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForTask;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cString\u003e getCurrentSortingOrderForMember() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForMember;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cPerson\u003e getCurrentSortingOrderForPerson() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForPerson;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cSpending\u003e getCurrentSortingOrderForSpending() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForSpending;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cMeeting\u003e getCurrentSortingOrderForMeeting() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForMeeting;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static int getTaskCurrentIndex() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return taskCurrentIndex;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static int getSpendingCurrentIndex() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return spendingCurrentIndex;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static int getMeetingCurrentIndex() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return meetingCurrentIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static void setTaskCurrentIndex(int index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assert index \u003c\u003d 4 \u0026\u0026 index \u003e\u003d 1 : \"incorrect sorting order\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskCurrentIndex \u003d index;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static void setSpendingCurrentIndex(int index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assert index \u003d\u003d 1 || index \u003d\u003d 2 || index \u003d\u003d 5 : \"incorrect sorting order\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        spendingCurrentIndex \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static void setMeetingCurrentIndex(int index) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assert index \u003d\u003d 1 || index \u003d\u003d 2 : \"incorrect sorting order\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        meetingCurrentIndex \u003d index;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "fadisng": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 8,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given {@code name, @code amount, @code remainingAmount, @code spendings}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount, @JsonProperty(\"spendings\") List\u003cJsonAdaptedSpending\u003e spendings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, amount, spendings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spendings.addAll(spendings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        amount \u003d source.getMoney().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : source.getSpendings()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            spendings.add(new JsonAdaptedSpending(spending));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cJsonAdaptedSpending\u003e getSpendings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spendings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted Budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Budget."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Money.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal resultDouble \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cSpending\u003e resultSpendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedSpending spending : spendings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultSpendings.add(spending.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Budget(name, new Money(resultDouble), resultSpendings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFinance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Finance}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedFinance {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedFinance} with the given {@code budgets}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedFinance(@JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Finance} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedFinance(Finance source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : source.getBudgets()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            budgets.add(new JsonAdaptedBudget(budget));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cJsonAdaptedBudget\u003e getBudgets() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted Finance object into the model\u0027s {@code Finance} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Finance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cBudget\u003e resultBudget \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedBudget budget : budgets) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultBudget.add(budget.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Finance(resultBudget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMeeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"time\") String time, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        time \u003d source.getTime().time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //@JsonValue \u003d\u003e is for the key : value pairs mapping, there can only be one in each json file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //@JsonValue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String t \u003d time.trim().split(\" \")[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String d \u003d time.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        boolean checkLength \u003d time.trim().split(\" \").length \u003c 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (checkLength || time \u003d\u003d null || time.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidTimeAndDate(time.trim())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidDate(d)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Time.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidTime(t)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Time.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if ((!Description.isValidDescription(description))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Time time \u003d new Time(this.time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Description description \u003d new Description(this.description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new Meeting(time, description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerformance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Performance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class JsonAdaptedPerformance {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, List\u003cJsonAdaptedMeeting\u003e\u003e meetingsAttended \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final HashMap\u003cString, List\u003cJsonAdaptedTask\u003e\u003e taskAssignment \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerformance} with the given performance details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public JsonAdaptedPerformance(@JsonProperty(\"meetingsAttended\") HashMap\u003cString, List\u003cJsonAdaptedMeeting\u003e\u003e meetingsAttended,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                                  @JsonProperty(\"taskAssignment\") HashMap\u003cString, List\u003cJsonAdaptedTask\u003e\u003e taskAssignment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (meetingsAttended !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.meetingsAttended.putAll(meetingsAttended);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (taskAssignment !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.taskAssignment.putAll(taskAssignment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Converts a given {@code Performance} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public JsonAdaptedPerformance(Performance source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (source.getMeetingsAttended() !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            source.getMeetingsAttended().forEach((title, meetingList) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                List\u003cJsonAdaptedMeeting\u003e jsonAdaptedMeetingList \u003d meetingList.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        .map(JsonAdaptedMeeting::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                this.meetingsAttended.put(title, jsonAdaptedMeetingList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (source.getTaskAssignment() !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            source.getTaskAssignment().forEach((title, taskList) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                List\u003cJsonAdaptedTask\u003e jsonAdaptedTaskList \u003d taskList.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                this.taskAssignment.put(title, jsonAdaptedTaskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Converts this Jackson-friendly Performance object into the model\u0027s {@code Performance} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Performance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Performance toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final HashMap\u003cString, List\u003cMeeting\u003e\u003e modelMeetings \u003d new HashMap\u003c\u003e(meetingToModelType(this.meetingsAttended));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final HashMap\u003cString, List\u003cTask\u003e\u003e modelTasks \u003d new HashMap\u003c\u003e(taskToModelType(this.taskAssignment));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Performance(modelMeetings, modelTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, List\u003cMeeting\u003e\u003e meetingToModelType(HashMap\u003cString, List\u003cJsonAdaptedMeeting\u003e\u003e meetingsAttended) throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final HashMap\u003cString, List\u003cMeeting\u003e\u003e modelMeetings \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String title : meetingsAttended.keySet()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cJsonAdaptedMeeting\u003e jsonMeetingList \u003d meetingsAttended.get(title);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            for (JsonAdaptedMeeting meeting : jsonMeetingList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meetingList.add(meeting.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            modelMeetings.put(title, meetingList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return modelMeetings;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HashMap\u003cString, List\u003cTask\u003e\u003e taskToModelType(HashMap\u003cString, List\u003cJsonAdaptedTask\u003e\u003e taskAssignment) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final HashMap\u003cString, List\u003cTask\u003e\u003e modelTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String title : taskAssignment.keySet()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cJsonAdaptedTask\u003e jsonTaskList \u003d taskAssignment.get(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            for (JsonAdaptedTask task : jsonTaskList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                taskList.add(task.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            modelTasks.put(title, taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return modelTasks;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final String profilePicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final List\u003cJsonAdaptedTimeRange\u003e timetable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final JsonAdaptedPerformance performance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"profilePicture\") String profilePicture,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"projects\") List\u003cString\u003e projects, @JsonProperty(\"timetable\") List\u003cJsonAdaptedTimeRange\u003e timetable,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"performance\") JsonAdaptedPerformance performance) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (projects !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.projects.addAll(projects);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (timetable !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            this.timetable.addAll(timetable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.performance \u003d performance;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d source.getProfilePicture().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        projects.addAll(source.getProjects());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (source.getTimetable() !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timetable.addAll(source.getTimetable().getTimeRanges().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    .map(JsonAdaptedTimeRange::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        performance \u003d new JsonAdaptedPerformance(source.getPerformance());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Person toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!ProfilePicture.isValidFilePath(profilePicture)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new IllegalValueException(ProfilePicture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final ProfilePicture modelProfilePicture \u003d new ProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e modelProjectList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        modelProjectList.addAll(projects);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (JsonAdaptedTimeRange timeRange : timetable) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.add(timeRange.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        final Timetable timetable \u003d new Timetable(timeRanges);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final Performance modelPerformance;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (performance !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            modelPerformance \u003d performance.toModelType();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            modelPerformance \u003d new Performance();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelProfilePicture, modelAddress, modelTags, timetable, modelPerformance);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getProjects().addAll(modelProjectList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 19,
      "jerryk1997": 36,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final JsonAdaptedFinance finance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description, @JsonProperty(\"members\") List\u003cString\u003e members,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                              @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks, @JsonProperty(\"meetingList\") List\u003cJsonAdaptedMeeting\u003e meetingList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                              @JsonProperty(\"finance\") JsonAdaptedFinance finance) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (members !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.members.addAll(members);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (meetingList !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.meetingList.addAll(meetingList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.finance \u003d finance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        members.addAll(source.getMemberNames());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        tasks.addAll(source.getTasks().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        meetingList.addAll(source.getListOfMeeting().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .map(JsonAdaptedMeeting::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        finance \u003d new JsonAdaptedFinance(source.getFinance());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Project toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (JsonAdaptedTask task : tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            taskList.add(task.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e modelPersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String person : members) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            modelPersonList.add(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final List\u003cTask\u003e modelTasks \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //need to convert the List\u003cJsonAdaptedMeeting\u003e to List\u003cMeeting\u003e then put it in the Set\u003cMeeting\u003e and set it to the given project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final List\u003cMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (JsonAdaptedMeeting meeting : meetingList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetings.add(meeting.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Finance modelFinance \u003d finance.toModelType();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project project \u003d new Project(modelTitle, modelDescription, modelPersonList, modelTasks, modelFinance, new Timetable());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        project.setListOfMeeting(meetings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58,
      "ccyccyccy": 3,
      "fadisng": 18,
      "philipalexanderb": 16,
      "jerryk1997": 8,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSpending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Spending}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedSpending {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String spending;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedSpending} with the given {@code spending, @code date, @code description}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedSpending(@JsonProperty(\"spending\") String spending, @JsonProperty(\"time\") String time, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(spending, time, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getSpending() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Spending} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedSpending(Spending source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spending \u003d source.getMoney().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted spending object into the model\u0027s {@code Spending} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Spending."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Spending toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Money.isValidAmount(spending)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String t \u003d time.split(\" \")[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String d \u003d time.split(\" \")[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (time.trim().split(\" \").length \u003c 2 || time \u003d\u003d null || time.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Time.isValidTimeAndDate(time.trim())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Time.isValidDate(d)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Time.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Time.isValidTime(t)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Time.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Time result \u003d new Time(this.time);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Money amount \u003d new Money(new BigDecimal(spending));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Spending(amount, result, description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given {@code description, time and isDone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\")String description, @JsonProperty(\"time\")String time, @JsonProperty(\"isDone \")boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        description \u003d source.description.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        time \u003d source.time.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        isDone \u003d source.isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task toModelType() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new Task(modelDescription, modelTime, isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTimeRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Jackson-friendly version of {@link TimeRange}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "class JsonAdaptedTimeRange {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final String timeRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Constructs a {@code JsonAdaptedTimeRange} with the given {@code timeRange}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public JsonAdaptedTimeRange(String timeRange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Converts a given {@code TimeRange} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public JsonAdaptedTimeRange(TimeRange source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeRange \u003d source.getStart().getDay().toString() + \" \" + source.getStart().getTime().format(DateTimeFormatter.ofPattern(\"HHmm\")) + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + source.getEnd().getDay().toString() + \" \" + source.getEnd().getTime().format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getTimerange() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRange;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Converts this Jackson-friendly adapted timeRange object into the model\u0027s {@code TimeRange} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted timeRange."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return ParserUtil.parseTimeRange(timeRange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 10,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProjectListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.util.ExcelUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A class to access ProjectList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonProjectListStorage implements ProjectListStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectListStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path budgetsExcelFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonProjectListStorage(Path filePath, Path excelFilePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgetsExcelFilePath \u003d excelFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getBudgetsExcelFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgetsExcelFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return readProjectList(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Similar to {@link #readProjectList()}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Optional\u003cJsonSerializableProjectList\u003e jsonProjectList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                filePath, JsonSerializableProjectList.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (jsonProjectList.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.of(jsonProjectList.get().toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (IllegalValueException | ParseException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Similar to {@link #saveProjectList(ReadOnlyProjectList)}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(projectList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectList(projectList), filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveBudgetsToExcel(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        saveBudgetsToExcel(projectList, budgetsExcelFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveBudgetsToExcel(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(projectList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ExcelUtil.writeBudgetsToFile(filePath, projectList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 92,
      "philipalexanderb": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An Immutable ProjectList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@JsonRootName(value \u003d \"projectlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class JsonSerializableProjectList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectList} with the given projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonSerializableProjectList(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProjectList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonSerializableProjectList(ReadOnlyProjectList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this project list into the model\u0027s {@code ProjectList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public ProjectList toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectList projectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (projectList.hasProject(project)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectList.addProject(project);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58,
      "philipalexanderb": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ProjectListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ProjectList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface ProjectListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the file path of the excel sheet"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getBudgetsExcelFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns ProjectList data as a {@link ReadOnlyProjectList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see #getProjectListFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectList} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param projectList cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see #saveProjectList(ReadOnlyProjectList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Save the projects; budgets into excel sheet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveBudgetsToExcel(ReadOnlyProjectList projectList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see #saveBudgetsToExcel(ReadOnlyProjectList)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveBudgetsToExcel(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ProjectListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getBudgetsExcelFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveBudgetsToExcel(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveBudgetsToExcel(ReadOnlyProjectList projectList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 19,
      "jerryk1997": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectListStorage projectListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                          ProjectListStorage projectListStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectListStorage \u003d projectListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException, ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static String copyImageToData(File file, String personName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String fileExtension \u003d FilenameUtils.getExtension(file.getPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String destPath \u003d \"data/\" + personName.replaceAll(\" \", \"_\") + \".\" + fileExtension;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            byte[] fileContent \u003d FileUtils.readFileToByteArray(file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String encodedString \u003d Base64.getEncoder().encodeToString(fileContent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            File outputFile \u003d new File(destPath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            byte[] decodedBytes \u003d Base64.getDecoder().decode(encodedString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            FileUtils.writeByteArrayToFile(outputFile, decodedBytes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return destPath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListStorage.getProjectListFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getBudgetsExcelFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListStorage.getBudgetsExcelFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return readProjectList(projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListStorage.readProjectList(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        saveProjectList(projectList, projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListStorage.saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveBudgetsToExcel(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListStorage.saveBudgetsToExcel(projectList, filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveBudgetsToExcel(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        saveBudgetsToExcel(projectList, projectListStorage.getBudgetsExcelFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48,
      "jerryk1997": 24,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Panel containing the list of budgets."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox wrapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetPieChart}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(new BudgetPieChart(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 51,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * An UI component that displays a pie chart for the budget of a {@code Project}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BudgetPieChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"BudgetPieChart.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox wrapper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetPieChart(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Double remaining \u003d budget.getRemainingMoney().getAmount().doubleValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Double overshot \u003d budget.getOvershotMoney().getAmount().doubleValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (overshot \u003e 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(\"Overshot by: $\" + overshot, overshot));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(\"Remaining: $\" + remaining, remaining));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : budget.getSpendings()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            String s \u003d spending.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (s.length() \u003e 40) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                s \u003d s.substring(0, 40) + \"...\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(s + \": $\" + spending.getMoney().getAmount().doubleValue(), spending.getMoney().getAmount().doubleValue()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        wrapper.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        cardPane.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setTitle(budget.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof BudgetPieChart)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BudgetPieChart pieChart \u003d (BudgetPieChart) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budget.equals(pieChart.budget);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 80,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t17-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IndividualPerformanceCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class IndividualPerformanceCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private static final String FXML \u003d \"IndividualPerformanceCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final PerformanceOverview performanceOverview;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label numTaskTitle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label numTasksDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label taskDoneRateTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label taskDoneRate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label attendanceTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label attendanceRateTitle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label attendanceRate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public IndividualPerformanceCard(Person person, PerformanceOverview performanceOverview, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.performanceOverview \u003d performanceOverview;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        cardPane.setFillHeight(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        numTaskTitle.setText(\"Number of tasks done:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        numTasksDone.setText(\" \" + performanceOverview.getNumOfTaskDoneOf(person));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneRateTitle.setText(\"% of tasks completed:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneRate.setText(\" \" + performanceOverview.getTaskCompletionRateOf(person).getRateAsString() + \"%\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceTitle.setText(\"Number of meetings attend:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendance.setText(\" \" + performanceOverview.getAttendanceOf(person));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateTitle.setText(\"% of meetings attended:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRate.setText(\" \" + performanceOverview.getRateOfAttendanceOf(person).getRateAsString() + \"%\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!(other instanceof IndividualPerformanceCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        IndividualPerformanceCard card \u003d (IndividualPerformanceCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.UiEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.commands.CheckoutCommand.MESSAGE_CHECKOUT_SUCCESS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private State currentState \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectOverview projectOverview;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private PerformanceOverviewCard performanceOverviewCard;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private ShowTimetablePanel timetablePanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox projectList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox budgetList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private StackPane showTimetablePanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logic.addUiEvent(new UiEvent(State.PROJECT_LIST, Optional.empty()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Display the previous Ui."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private void handleBack() throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        State temp \u003d currentState;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (currentState \u003d\u003d State.PROJECT_LIST) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(\"Oops can\u0027t go back any further!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        UiEvent event \u003d logic.getPreviousEvent();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.severe(\"previous state: \" + event.getState());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!event.getProjectIndex().isEmpty()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logic.setWorkingProject(logic.getFilteredProjectList().get(event.getProjectIndex().get()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        changeUiDisplay(event.getState());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        switch (event.getState()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_LIST:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (!logic.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                logic.removeWorkingProject();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (temp !\u003d State.ADDRESS_BOOK) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"You\u0027ve checked out of the project!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_OVERVIEW:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultDisplay.setFeedbackToUser(String.format(MESSAGE_CHECKOUT_SUCCESS, logic.getFilteredProjectList().get(event.getProjectIndex().get()).toString()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            assert false : \"Unrecognised previous state\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            String commandWord \u003d commandResult.getCommandWord();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (commandResult.isBack()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                handleBack();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // Only change Ui if certain command demands it"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (commandResult.changeNeeded()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                State nextState \u003d stateOf(commandWord);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (logic.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    if (!nextState.equals(currentState)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        logic.addUiEvent(new UiEvent(nextState, Optional.empty()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    int projectIndex \u003d logic.getFilteredProjectList().indexOf(logic.getWorkingProject().get());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    if (!nextState.equals(currentState)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        logic.addUiEvent(new UiEvent(nextState, Optional.of(projectIndex)));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                changeUiDisplay(nextState);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                // if not needed refresh current page unless is back command"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (!commandWord.equals(\"back\")) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    changeUiDisplay(currentState);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void changeUiDisplay(State nextState) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (nextState) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        case ADDRESS_BOOK:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(personListPanel.getRoot());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        case PROJECT_LIST:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logic.removeWorkingProject();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_OVERVIEW:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectOverview \u003d new ProjectOverview(logic.getFilteredProjectList(), logic.getWorkingProject().get());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(projectOverview.getRoot());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_FINANCE:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            budgetListPanel \u003d new BudgetListPanel(logic.getWorkingProject().get().getFinance().getBudgetObservableList());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case PERFORMANCE_OVERVIEW:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            performanceOverviewCard \u003d new PerformanceOverviewCard(logic.getPerformanceOverview());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(performanceOverviewCard.getRoot());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case SHOW_TIMETABLE:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timetablePanel \u003d new ShowTimetablePanel(logic.getWorkingProject().get().getGeneratedTimetable());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(timetablePanel.getRoot());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Unrecognised state\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    private State stateOf(String commandWord) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        State state \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddFromContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AssignTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case DeleteProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case MarkAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case RemoveMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case SortMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case UnassignTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_OVERVIEW;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case SortSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case DeleteBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_FINANCE;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProfilePictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            state \u003d State.ADDRESS_BOOK;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case ShowPerformanceOverviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            state \u003d State.PERFORMANCE_OVERVIEW;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case GenerateSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            state \u003d State.SHOW_TIMETABLE;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Unrecognised Command\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 141,
      "ccyccyccy": 14,
      "jerryk1997": 13,
      "-": 232
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PerformanceOverviewCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " * A UI component that displays the information of a {@code PerformanceOverview}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class PerformanceOverviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String FXML \u003d \"PerformanceOverviewCard.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public final PerformanceOverview performanceOverview;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public final List\u003cPerson\u003e memberList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private ScrollPane cardPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private VBox chartWrapper;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private VBox performanceCardsWrapper;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PerformanceOverviewCard(PerformanceOverview performanceOverview) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.performanceOverview \u003d performanceOverview;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.memberList \u003d performanceOverview.getSortedMemberList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        title.setText(performanceOverview.getProject().getTitle().title + \"\\nMember Performance Overview\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        cardPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        cardPane.setPrefHeight(850);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Defining the x axis"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CategoryAxis xAxis1 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis1.setCategories(FXCollections.observableArrayList(performanceOverview.getSortedMemberList().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .map(person -\u003e person.getName().fullName).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis1.setLabel(\"Members\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis1.setTickLabelFont(Font.font(15));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CategoryAxis xAxis2 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis2.setCategories(FXCollections.observableArrayList(performanceOverview.getSortedMemberList().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .map(person -\u003e person.getName().fullName).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis2.setLabel(\"Members\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis2.setTickLabelFont(Font.font(15));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CategoryAxis xAxis3 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis3.setCategories(FXCollections.observableArrayList(performanceOverview.getSortedMemberList().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .map(person -\u003e person.getName().fullName).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis3.setLabel(\"Members\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis3.setTickLabelFont(Font.font(15));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CategoryAxis xAxis4 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis4.setCategories(FXCollections.observableArrayList(performanceOverview.getSortedMemberList().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .map(person -\u003e person.getName().fullName).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis4.setLabel(\"Members\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis4.setTickLabelFont(Font.font(15));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Defining y axis for number of tasks done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        NumberAxis yAxisTask \u003d new NumberAxis();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisTask.setLabel(\"No. of tasks\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisTask.setId(\"yAxis-title\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisTask.setTickUnit(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Defining y axis for percentage of tasks done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        NumberAxis yAxisTaskPercentage \u003d new NumberAxis(0, 100, 10);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisTaskPercentage.setLabel(\"% of assigned task completed\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisTaskPercentage.setId(\"yAxis-title\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Defining y axis for number of meetings attended"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        NumberAxis yAxisMeeting \u003d new NumberAxis(0, performanceOverview.getProject().getListOfMeeting().size(), 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisMeeting.setLabel(\"No. of meetings attended\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisMeeting.setId(\"yAxis-title\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Defining y axis for rate of attendance"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        NumberAxis yAxisMeetingRate \u003d new NumberAxis(0, 100, 10);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisMeetingRate.setLabel(\"Rate of attendance\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        yAxisMeetingRate.setId(\"yAxis-title\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Creating bar chart for number of tasks done"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        BarChart\u003cString, Number\u003e taskDoneChart \u003d new BarChart\u003c\u003e(xAxis1, yAxisTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneChart.setTitle(\"Number of tasks completed\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Creating bar chart for percentage of tasks done"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        BarChart\u003cString, Number\u003e percentageOfTasksDoneChart \u003d new BarChart\u003c\u003e(xAxis2, yAxisTaskPercentage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        percentageOfTasksDoneChart.setTitle(\"Percentage of tasks completed\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Creating bar chart for number of meetings attended"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        BarChart\u003cString, Number\u003e meetingsAttendedChart \u003d new BarChart\u003c\u003e(xAxis3, yAxisMeeting);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttendedChart.setTitle(\"Number of meetings attended\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Creating bar chart for percentage of meetings attended"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        BarChart\u003cString, Number\u003e attendanceRateChart \u003d new BarChart\u003c\u003e(xAxis4, yAxisMeetingRate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateChart.setTitle(\"Rate of attendance\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Prepare XYChart.Series objects by setting data"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e tasksDone \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        tasksDone.setName(\"No. of tasks\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e percentageTasksDone \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        percentageTasksDone.setName(\"% of tasks completed\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e meetingsAttended \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttended.setName(\"No. of meetings attended\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e rateOfAttendance \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        rateOfAttendance.setName(\"% of meetings attended\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person person : performanceOverview.getSortedMemberList()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String name \u003d person.getName().fullName;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            tasksDone.getData().add(new XYChart.Data\u003c\u003e(name, performanceOverview.getNumOfTaskDoneOf(person)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            percentageTasksDone.getData().add(new XYChart.Data\u003c\u003e(name, performanceOverview.getTaskCompletionRateOf(person).getRate()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            meetingsAttended.getData().add(new XYChart.Data\u003c\u003e(name, performanceOverview.getAttendanceOf(person)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            rateOfAttendance.getData().add(new XYChart.Data\u003c\u003e(name, performanceOverview.getRateOfAttendanceOf(person).getRate()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            performanceCardsWrapper.getChildren().add(new IndividualPerformanceCard(person, performanceOverview, index).getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneChart.getData().addAll(tasksDone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneChart.setId(\"charts\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskDoneChart.setPadding(new Insets(0, 0, 50, 0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        percentageOfTasksDoneChart.getData().addAll(percentageTasksDone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        percentageOfTasksDoneChart.setId(\"charts\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        percentageOfTasksDoneChart.setPadding(new Insets(0, 0, 50, 0));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttendedChart.getData().addAll(meetingsAttended);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttendedChart.setId(\"charts\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttendedChart.setPadding(new Insets(0, 0, 50, 0));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateChart.getData().addAll(rateOfAttendance);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateChart.setId(\"charts\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        attendanceRateChart.setPadding(new Insets(0, 0, 50, 0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        chartWrapper.getChildren().addAll(taskDoneChart, percentageOfTasksDoneChart, meetingsAttendedChart, attendanceRateChart);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label projectHeader;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane projects;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label taskHeader;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private FlowPane tasksAssigned;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private Label meetingHeader;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private FlowPane meetingsAttended;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonCard(Person person, int displayedIndex, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d new File(person.getProfilePicture().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Image img \u003d new Image(new FileInputStream(imgFile));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            profilePicture.setImage(img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getProjects().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(project -\u003e projects.getChildren().add(new Label(project)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Logger.getGlobal().warning(\"isRun\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        projectHeader.setText(\"Projects:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        projects.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        projects.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        setTasks();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        setMeetings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void setTasks() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        taskHeader.setText(\"Tasks assigned: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String projectTitle : person.getProjects()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getTaskAssignment().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cTask\u003e taskList \u003d person.getPerformance().getTaskAssignment().get(projectTitle);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                tasksAssigned.getChildren().add(new Label(\"    \" + ++taskCount + \". \" + projectTitle + \": \" + task.toString()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        tasksAssigned.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        tasksAssigned.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void setMeetings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int meetingCount \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingHeader.setText(\"Meetings attended:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String projectTitle : person.getProjects()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (!person.getPerformance().getMeetingsAttended().containsKey(projectTitle)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cMeeting\u003e meetingList \u003d person.getPerformance().getMeetingsAttended().get(projectTitle);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            List\u003cMeeting\u003e sortedMeetings \u003d meetingList.stream().sorted(Comparator.comparing(m -\u003e m.getTime().getDate())).collect(Collectors.toList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            for (Meeting meeting : sortedMeetings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                meetingsAttended.getChildren().add(new Label(\"    \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        + ++meetingCount + \". \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        + projectTitle + \": \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        + meeting.getDescription().toString() + \" on \" + meeting.getTime().toString()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttended.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetingsAttended.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void handleDragOver(DragEvent event) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (event.getDragboard().hasFiles()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void handleDrop(DragEvent event) throws FileNotFoundException, CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cFile\u003e files \u003d event.getDragboard().getFiles();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d files.get(0);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Image img \u003d new Image(new FileInputStream(imgFile));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture.setImage(img);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        logic.executeImageDrop(imgFile, person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "jerryk1997": 102,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1, logic).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 8,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label meetingTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setText(project.getTitle().title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description.setText(project.getDescription().description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void displayMeeting(FlowPane meetings, Project project) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cMeeting\u003e listOfMeetings \u003d new ArrayList\u003cMeeting\u003e(project.getListOfMeeting());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int meetingCount \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        listOfMeetings.sort(Comparator.comparing(m -\u003e m.getTime().getDate()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Meeting meeting: listOfMeetings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetings.getChildren().add(new Label(\"    \" + meetingCount++ + \". \" + meeting.getDescription().description + \" \" + meeting.getTime().time));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 62,
      "philipalexanderb": 17,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 44,
      "jerryk1997": 2,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectOverview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectOverview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectOverview.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final ObservableList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ScrollPane cardPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label memberTitle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane members;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label taskTitle;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label meetingTitle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane meetings;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox wrapper;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectOverview(ObservableList\u003cProject\u003e projects, Project project) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects \u003d projects;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.project \u003d projects.filtered(x -\u003e x.getTitle() \u003d\u003d project.getTitle()).get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int memberCount \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int meetingCount \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        cardPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setText(project.getTitle().title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description.setText(project.getDescription().description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        memberTitle.setText(\"Members: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        members.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        members.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(project.getMemberNames(), SortingOrder.getCurrentSortingOrderForMember());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(project.getTasks(), SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (String member : project.getMemberNames()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            members.getChildren().add(new Label(\"    \" + ++memberCount + \". \" + member));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : project.getTasks()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            tasks.getChildren().add(new Label(\"    \" + ++taskCount + \". \" + task.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        taskTitle.setText(\"Tasks: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        meetingTitle.setText(\"Meetings: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        displayMeeting(meetings, this.project);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Defining the x axis"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis.setCategories(FXCollections.observableArrayList(project.getFinance().getBudgetObservableList().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .map(x -\u003e truncate(x.getName())).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        xAxis.setLabel(\"Budgets\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Defining the y axis"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Creating the Bar chart"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StackedBarChart\u003cString, Number\u003e stackedBarChart \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                new StackedBarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        stackedBarChart.setTitle(\"Budget Summary\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Prepare XYChart.Series objects by setting data"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e amountSpent \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        amountSpent.setName(\"Amount spent\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e remainingAmount \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        remainingAmount.setName(\"Amount remaining\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : project.getFinance().getBudgetObservableList()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            amountSpent.getData().add(new XYChart.Data\u003c\u003e(truncate(budget.getName()), budget.getTotalMoneySpent().getAmount().doubleValue()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Double remaining \u003d budget.getRemainingMoney().getAmount().doubleValue();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            remainingAmount.getData().add(new XYChart.Data\u003c\u003e(truncate(budget.getName()), remaining));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Setting the data to bar chart"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        stackedBarChart.getData().addAll(amountSpent, remainingAmount);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Add the chart to the HBox"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        wrapper.getChildren().add(stackedBarChart);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void displayMeeting(FlowPane meetings, Project project) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetings.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetings.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cMeeting\u003e listOfMeetings \u003d new ArrayList\u003cMeeting\u003e(project.getListOfMeeting());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int meetingCount \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(listOfMeetings, SortingOrder.getCurrentSortingOrderForMeeting());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Meeting meeting: listOfMeetings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            meetings.getChildren().add(new Label(\"    \" + meetingCount++ + \". \" + meeting.getDescription().description + \" on \" + meeting.getTime().time));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof ProjectOverview)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectOverview card \u003d (ProjectOverview) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return project.equals(card.project);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private String truncate(String s) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (s.length() \u003e 20) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return s.substring(0, 20) + \"...\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 130,
      "philipalexanderb": 15,
      "fadisng": 5,
      "jerryk1997": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ShowTimetablePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimetableVisualization;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class ShowTimetablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static final String FXML \u003d \"ShowTimetablePanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ShowTimetablePanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public ShowTimetablePanel(Timetable timetable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        title.setText(new TimetableVisualization(timetable).visualize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        title.setStyle(\"-fx-font-family: \u0027monospaced\u0027;\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetPieChart}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                setGraphic(new BudgetPieChart(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ADDRESS_BOOK,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    SHOW_TIMETABLE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    PROJECT_LIST,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    PROJECT_OVERVIEW,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    PROJECT_FINANCE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    PERFORMANCE_OVERVIEW"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7,
      "ccyccyccy": 1,
      "jerryk1997": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16
    }
  },
  {
    "path": "src/main/resources/view/BudgetPieChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"320\" prefWidth\u003d\"320\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003cVBox fx:id\u003d\"wrapper\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "             \u003cPieChart id\u003d\"pieChart\" fx:id\u003d\"pieChart\" legendSide\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 19
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    -fx-font-family: \"monospaced\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#cardPane .label {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#memberTitle {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#memberTitle .label {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#members {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#members .label {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fadisng"
        },
        "content": "#tasks .label {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "#meetings .label {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "#projects {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "#projects .label {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #053E6F;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-min-width: 300pt;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-legend .label {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 8pt;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".data0.chart-pie { -fx-pie-color: turquoise; }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-pie-label { /*this is what you need for labels*/"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#project-overview {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#project-overview .label {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 1.4em;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-tick-label-fill: white;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-tick-length: 20;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-minor-tick-length: 10;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#performance-overview .label {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#performance-overview {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#chartWrapper {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#numTaskTitle {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: #714a0f;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#taskDoneRateTitle {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: #123871;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#attendanceTitle {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: #647117;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#attendanceRateTitle {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-color: #9cc366;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#performance-overview-title {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 35;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#charts .label {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-wrap-text: false;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#yAxis-title .label {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 46,
      "ccyccyccy": 1,
      "fadisng": 2,
      "philipalexanderb": 7,
      "jerryk1997": 87,
      "-": 368
    }
  },
  {
    "path": "src/main/resources/view/IndividualPerformanceCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"166.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" text\u003d\"\\$id\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel id\u003d\"numTaskTitle\" fx:id\u003d\"numTaskTitle\" text\u003d\"\\$numTaskTitle\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"numTasksDone\" text\u003d\"\\$numTasksDone\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"taskDoneRateTitle\" text\u003d\"\\$taskDoneRateTitle\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"taskDoneRate\" text\u003d\"\\$taskDoneRate\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"attendanceTitle\" text\u003d\"\\$attendanceTitle\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"attendance\" text\u003d\"\\$attendance\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"attendanceRateTitle\" text\u003d\"\\$attendanceRateTitle\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003cLabel fx:id\u003d\"attendanceRate\" text\u003d\"\\$attendanceRate\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 74
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         title\u003d\"MyProject\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    \u003cImage url\u003d\"@/images/MyProject_Icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cVBox fx:id\u003d\"projectList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "fadisng": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/PerformanceOverviewCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cScrollPane id\u003d\"performance-overview\" fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cVBox id\u003d\"performance-overview\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cLabel id\u003d\"performance-overview-title\" fx:id\u003d\"title\" text\u003d\"\\$title\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cVBox fx:id\u003d\"chartWrapper\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cVBox fx:id\u003d\"performanceCardsWrapper\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 18
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onDragDropped\u003d\"#handleDrop\" onDragOver\u003d\"#handleDragOver\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"150.0\" prefWidth\u003d\"147.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"147.0\" layoutX\u003d\"73.0\" layoutY\u003d\"75.0\" nodeOrientation\u003d\"INHERIT\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" x\u003d\"73.0\" y\u003d\"75.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cLabel fx:id\u003d\"projectHeader\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$projectHeader\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"projects\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cLabel fx:id\u003d\"taskHeader\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$taskHeader\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tasksAssigned\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cLabel fx:id\u003d\"meetingHeader\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$meetingHeader\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"meetingsAttended\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 16,
      "-": 39
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 27,
      "jerryk1997": 12
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 8
    }
  },
  {
    "path": "src/main/resources/view/ProjectOverview.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cScrollPane id\u003d\"project-overview\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cVBox id\u003d\"project-overview\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cLabel fx:id\u003d\"meetingTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$meetingTitle\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"meetings\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" orientation\u003d\"vertical\" prefWrapLength\u003d\"55\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"memberTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$memberTitle\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"members\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"taskTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$taskTitle\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tasks\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \u003cInsets bottom\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Finance\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cVBox id\u003d\"bar-chart\" fx:id\u003d\"wrapper\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 34,
      "philipalexanderb": 6,
      "jerryk1997": 5
    }
  },
  {
    "path": "src/main/resources/view/ProjectWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "      \u003cMenuBar BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "src/main/resources/view/ShowTimetablePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cVBox id\u003d\"project-overview\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1 VGrow\u003dALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void removeWorkingProject() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public boolean isCheckedOut() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public List\u003cPerson\u003e getMembers() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setPerformanceOverview(PerformanceOverview overview) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public PerformanceOverview getPerformanceOverview() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void editTaskInAllPersons(Task taskToEdit, Task editedTask, Project currWorkingProject) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void deleteTaskInAllPersons(Task task, Project currWorkingProject) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public List\u003cPerson\u003e getMembersOf(Project project) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public boolean isSignedIn() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void signIn(OwnerAccount ownerAccount) throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public OwnerAccount getOwnerAccount() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void logOut() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void deleteMember(String name) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void editInAllProjects(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 11,
      "philipalexanderb": 142,
      "-": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddProjectMeetingCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class AddProjectMeetingCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProjectMeetingCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AddProjectMeetingCommand addProjectMeetingCommand \u003d new AddProjectMeetingCommand(validMeeting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithOneProjectStubWithOneMeeting(validMeeting);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertThrows(CommandException.class, AddProjectMeetingCommand.MESSAGE_DUPLICATE_MEETING, () -\u003e addProjectMeetingCommand.execute(modelStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meetingMilestone \u003d new MeetingBuilder().withDescription(\"Milestone discussion\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meetingDocumentation \u003d new MeetingBuilder().withDescription(\"Finalising documentation\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AddProjectMeetingCommand addDocumentationCommand \u003d new AddProjectMeetingCommand(meetingDocumentation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AddProjectMeetingCommand addMilestoneCommand \u003d new AddProjectMeetingCommand(meetingMilestone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertTrue(addDocumentationCommand.equals(addDocumentationCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        AddProjectMeetingCommand addDocumentationCommandCopy \u003d new AddProjectMeetingCommand(meetingDocumentation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertTrue(addDocumentationCommand.equals(addDocumentationCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertFalse(addDocumentationCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertFalse(addDocumentationCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertFalse(addDocumentationCommand.equals(addMilestoneCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * A Model stub that contains one Project with a single meeting."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private class ModelStubWithOneProjectStubWithOneMeeting extends ModelStub {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final Title title \u003d new Title(\"CS2103T\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final Description description \u003d new Description(\"Software Engineering\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final Finance finance \u003d new Finance(new ArrayList\u003cBudget\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final Timetable timetable \u003d new Timetable(new ArrayList\u003cTimeRange\u003e());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private ProjectStubWithOneMeeting projectStubWithOneMeeting \u003d new ProjectStubWithOneMeeting(title, description, members, tasks, finance, timetable);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private final Meeting meeting;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ModelStubWithOneProjectStubWithOneMeeting(Meeting meeting) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            List\u003cMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetingList.add(meeting);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            projectStubWithOneMeeting.setListOfMeeting(meetingList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return Optional.of(this.projectStubWithOneMeeting);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public boolean isCheckedOut() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setProject(Project projectToEdit, Project editedProject) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            projectToEdit \u003d editedProject;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setWorkingProject(Project editedProject) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            requireNonNull(editedProject);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cProject\u003e project) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public ProjectStubWithOneMeeting getProjectStubWithOneMeeting() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.projectStubWithOneMeeting;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Project Stub with one Meeting"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public class ProjectStubWithOneMeeting extends ProjectStub {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private List\u003cString\u003e members;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private Finance finance;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private Timetable timetable;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        private List\u003cMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public ProjectStubWithOneMeeting(Title title, Description description, List\u003cString\u003e members, List\u003cTask\u003e tasks, Finance finance, Timetable timetable) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            super(title, description, members, tasks, finance, timetable);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.tasks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public List\u003cString\u003e getMemberNames() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.members;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Finance getFinance() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.finance;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Timetable getGeneratedTimetable() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.timetable;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Description getDescription() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public Title getTitle() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.title;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public List\u003cMeeting\u003e getListOfMeeting() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return this.meetingList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void setListOfMeeting(List\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.meetingList \u003d meetingList;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 5,
      "philipalexanderb": 197
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_AMY \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_BOB \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_BUDGET_EQUIPMENT \u003d \"Equipment\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_BUDGET_VENUE \u003d \"Venue\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_BUDGET_MANPOWER \u003d \"Manpower\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_AMOUNT_ONE_HUNDRED \u003d \"100.00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_AMOUNT_ONE_THOUSAND \u003d \"1000.00\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_AMOUNT_FIFTY \u003d \"50.00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_AMY \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_BOB \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String BUDGET_DESC_EQUIPMENT \u003d \" \" + PREFIX_BUDGET + VALID_BUDGET_EQUIPMENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String BUDGET_DESC_VENUE \u003d \" \" + PREFIX_BUDGET + VALID_BUDGET_VENUE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String BUDGET_DESC_MANPOWER \u003d \" \" + PREFIX_BUDGET + VALID_BUDGET_MANPOWER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String AMOUNT_DESC_ONE_HUNDRED \u003d \" \" + PREFIX_EXPENSE + VALID_AMOUNT_ONE_HUNDRED;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String AMOUNT_DESC_ONE_THOUSAND \u003d \" \" + PREFIX_EXPENSE + VALID_AMOUNT_ONE_THOUSAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String AMOUNT_DESC_FIFTY \u003d \" \" + PREFIX_EXPENSE + VALID_AMOUNT_FIFTY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String INVALID_BUDGET_DESC \u003d \" \" + PREFIX_BUDGET + \"*\"; // \u0027*\u0027 name not allowed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_EXPENSE + \"0\"; // \u00270\u0027 not allowed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, \"Command word placeholder\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 18,
      "jerryk1997": 4,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.performanceoverview.PerformanceOverview;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteBudget(Budget target) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasBudget(Budget budget) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeWorkingProject() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isCheckedOut() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cPerson\u003e getMembers() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setPerformanceOverview(PerformanceOverview overview) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public PerformanceOverview getPerformanceOverview() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void editTaskInAllPersons(Task taskToEdit, Task editedTask, Project currWorkingProject) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteTaskInAllPersons(Task task, Project currWorkingProject) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteMeetingInAllPersons(Meeting meeting, Project currWorkingProject) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cPerson\u003e getMembersOf(Project project) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isSignedIn() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void signIn(OwnerAccount ownerAccount) throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public OwnerAccount getOwnerAccount() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void logOut() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteMember(String name) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void editInAllProjects(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 236
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProjectStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * a default Project stub that has all the methods failing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectStub extends Project {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectStub(Title name, Description description, List\u003cString\u003e members, List\u003cTask\u003e tasks, Finance finance, Timetable generatedTimetable) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(name, description, members, tasks, finance, generatedTimetable);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cMeeting\u003e getListOfMeeting() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setListOfMeeting(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addNewMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance getFinance() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isSameProject(Project project) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cString\u003e getMemberNames() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasMember(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Timetable getGeneratedTimetable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddBudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddBudgetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.testutil.BudgetBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddBudgetCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private AddBudgetCommandParser parser \u003d new AddBudgetCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Budget expectedBudget \u003d new BudgetBuilder().withAmount(VALID_AMOUNT_ONE_THOUSAND).withName(VALID_BUDGET_EQUIPMENT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BUDGET_DESC_EQUIPMENT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                + AMOUNT_DESC_ONE_THOUSAND, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BUDGET_DESC_MANPOWER"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                + AMOUNT_DESC_ONE_THOUSAND + BUDGET_DESC_EQUIPMENT, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BUDGET_DESC_EQUIPMENT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                + AMOUNT_DESC_FIFTY + AMOUNT_DESC_ONE_THOUSAND, new AddBudgetCommand(expectedBudget));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // missing budget prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseFailure(parser, VALID_AMOUNT_FIFTY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // missing expense prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseFailure(parser, VALID_BUDGET_EQUIPMENT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String errorMessage \u003d \"Budget name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // invalid budget"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseFailure(parser, INVALID_BUDGET_DESC + AMOUNT_DESC_FIFTY, errorMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertParseFailure(parser, BUDGET_DESC_EQUIPMENT + INVALID_AMOUNT_DESC, Money.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException | java.text.ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException | java.text.ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/finance/MoneyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class MoneyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Money((String) null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void constructor_invalidMoney_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String invalidMoney \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidMoney));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Money.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // invalid Amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\"Amount\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertFalse(Money.isValidAmount(\"-100\")); //negative amount"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // valid Amount"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(Money.isValidAmount(\"911\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(Money.isValidAmount(\"93121534.98\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        assertTrue(Money.isValidAmount(\"124293842033123\")); // long Amount numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/Member.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/MeetingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Meeting(null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void isValidTask() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Description description \u003d new Description(\"Spotify Premium\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Time time \u003d new Time(\"19/09/2019 1900\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        assertTrue(Meeting.isValidMeeting(new Meeting(time, description)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(null, null, true));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTask() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Description description \u003d new Description(\"peter the 2nd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d new Time(\"05/05/2019 1600\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Task.isValidTask(new Task(description, time, true)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/TimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_successful() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d new Time(\"05/05/2019 1600\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_successfulButInvalid() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d new Time(\"05/05/2019 2400\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_invalidDateFormat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new Time(\"05-05-2019 1600\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_invalidTimeFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new Time(\"05/05/2019 4pm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTimeAndDate_valid_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d new Time(\"00/00/0000 0000\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Time.isValidTimeAndDate(time.getTime()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTimeAndDate_invalid_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d new Time(\"12/12/19 1500\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Time.isValidTimeAndDate(time.getTime()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTime_valid_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String time \u003d \"0000\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Time.isValidTime(time));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTime_invalid_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String time \u003d \"2400\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Time.isValidTime(time));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidDate_valid_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String date \u003d \"12/12/2019\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Time.isValidDate(date));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidDate_invalidYear_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String date \u003d \"12/12/1899\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Time.isValidDate(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidDate_nonLeapYear_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String date \u003d \"29/02/2019\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Time.isValidDate(date));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidDate_leapYear_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String date \u003d \"29/02/2016\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Time.isValidDate(date));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fadisng": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/project/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertFalse(Title.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/TimeRangeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeRangeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_startBeforeEnd_successful() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_endBeforeStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.THURSDAY, end));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_startEqualEnd_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_differentDay_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.SATURDAY, start, DayOfWeek.SATURDAY, end);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_overlapping_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:30\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"10:30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"08:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr4 \u003d new TimeRange(DayOfWeek.THURSDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr3.overlap(tr1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr4.overlap(tr1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_nonOverlapping_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"14:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"08:00\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"13:00\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr4 \u003d new TimeRange(DayOfWeek.WEDNESDAY, start, DayOfWeek.THURSDAY, end);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr3));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr2.overlap(tr3));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr3.overlap(tr2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr4.overlap(tr1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr4.overlap(tr2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr4.overlap(tr3));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void equals_sameContentDifferentObject_equal() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void equals_differentContentDifferentObject_notEqual() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"11:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlapInclusive_timerangeWithOverlappingInclusive_true() throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"13:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\"), DayOfWeek.FRIDAY, LocalTime.parse(\"12:34\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr1.overlapInclusive(tr2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr1.overlapInclusive(tr3));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlapInclusive_timerangeWithoutOverlappingInclusive_false() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"13:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"09:59\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:01\"), DayOfWeek.FRIDAY, LocalTime.parse(\"12:34\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlapInclusive(tr2));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlapInclusive(tr3));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/TimeSlotGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotGeneratorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForSingleTimetable() throws IllegalValueException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable timetable \u003d ParserUtil.parseTimetable(\"MONDAY 1300 MONDAY 1500\\nMONDAY 1400 MONDAY 1600\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + \"MONDAY 1700 MONDAY 1900\\nTUESDAY 0900 TUESDAY 1200\\nWEDNESDAY 1000 WEDNESDAY 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimetable\u003e timetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(timetable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timetables, 2,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:00\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForMultipleTimetables() throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t1 \u003d ParserUtil.parseTimetable(\"MONDAY 1400 MONDAY 1600\\nTUESDAY 0900 TUESDAY 1200\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t2 \u003d ParserUtil.parseTimetable(\"MONDAY 1300 MONDAY 1500\\nMONDAY 1700 MONDAY 1900\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t3 \u003d ParserUtil.parseTimetable(\"WEDNESDAY 1000 WEDNESDAY 1500\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimetable\u003e timetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timetables, 2,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:00\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForMultipleTimetablesWithMinutes() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:35\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:31\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t1 \u003d ParserUtil.parseTimetable(\"MONDAY 1412 MONDAY 1634\\nTUESDAY 0923 TUESDAY 1255\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t2 \u003d ParserUtil.parseTimetable(\"MONDAY 1446 MONDAY 1519\\nMONDAY 1754 MONDAY 1923\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t3 \u003d ParserUtil.parseTimetable(\"WEDNESDAY 1024 WEDNESDAY 1544\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimetable\u003e timetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timetables, 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"14:12\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"16:34\"), DayOfWeek.MONDAY, LocalTime.parse(\"17:54\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:23\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:23\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:55\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:24\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:44\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:31\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_timeRangesWithNoPossibleTimeslots_generatesEmptyTimeRangeList() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:35\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:31\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t1 \u003d ParserUtil.parseTimetable(\"MONDAY 1412 MONDAY 1634\\nTUESDAY 0923 TUESDAY 1255\\nTHURSDAY 1544 SATURDAY 1924\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t2 \u003d ParserUtil.parseTimetable(\"MONDAY 0800 MONDAY 1519\\nMONDAY 1600 TUESDAY 1100\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Timetable t3 \u003d ParserUtil.parseTimetable(\"TUESDAY 1024 THURSDAY 1544\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimetable\u003e timetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timetables.add(t3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timetables, 1,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/WeekTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class WeekTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void minus_otherDuration_givesCorrectResult() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w1 \u003d new WeekTime(DayOfWeek.MONDAY, LocalTime.parse(\"12:30\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w2 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:56\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w3 \u003d new WeekTime(DayOfWeek.WEDNESDAY, LocalTime.parse(\"09:31\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(w2.minus(w1), new Duration(1, 2, 26));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(w3.minus(w1), new Duration(1, 21, 1));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(w3.minus(w2), new Duration(0, 18, 35));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(w2.minus(w3), new Duration(0, -18, -35));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void isAfter_otherDuration_givesCorrectResult() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w1 \u003d new WeekTime(DayOfWeek.MONDAY, LocalTime.parse(\"12:30\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w2 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:56\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w3 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:31\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w2.isAfter(w1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w3.isAfter(w1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w2.isAfter(w3));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void isBefore_otherDuration_givesCorrectResult() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w1 \u003d new WeekTime(DayOfWeek.MONDAY, LocalTime.parse(\"12:30\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w2 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:56\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w3 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:31\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w1.isBefore(w2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w1.isBefore(w3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(w3.isBefore(w2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BudgetBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BudgetBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Venue\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Money DEFAULT_AMOUNT \u003d new Money(\"1000\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final List\u003cSpending\u003e DEFAULT_SPENDINGS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Money amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private List\u003cSpending\u003e spendings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetBuilder() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        amount \u003d DEFAULT_AMOUNT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spendings \u003d DEFAULT_SPENDINGS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d new Money(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetBuilder withName(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetBuilder withSpendings(List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spendings \u003d spendings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget build() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Budget(name, amount, spendings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public EditPersonDescriptorBuilder withProfilePicture(String profilePicture) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        descriptor.setProfilePicture(new ProfilePicture(profilePicture));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 9,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"19/09/2019 1900\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Milestones discussions\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public MeetingBuilder() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        time \u003d meetingToCopy.getTime();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        description \u003d meetingToCopy.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Sets the {@code Time} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public MeetingBuilder withTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Sets the {@code Description} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public MeetingBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new Meeting(time, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_PROFILE_PICTURE \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d new ProfilePicture(DEFAULT_PROFILE_PICTURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d personToCopy.getProfilePicture();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonBuilder withProfilePicture(String profilePicture) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d new ProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Person(name, phone, email, profilePicture, address, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "jerryk1997": 13,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 6,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SpendingBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Money;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class SpendingBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Money spending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"19/09/2019 1900\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"booked UCC Theatre\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"200\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public SpendingBuilder() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spending \u003d new Money(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public SpendingBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public SpendingBuilder withTime(Time time) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public SpendingBuilder withSpending(Money amount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spending \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Spending build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Spending(spending, time, description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"heinz@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"werner@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"anna@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"stefan@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"hans@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7,
      "jerryk1997": 2,
      "-": 58
    }
  }
]
