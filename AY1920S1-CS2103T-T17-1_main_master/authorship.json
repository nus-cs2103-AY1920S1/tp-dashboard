[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Address Book (Level 3)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T17-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-T17-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* This is a desktop Project Management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Original source code of AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 2,
      "fadisng": 1,
      "-": 31
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    compile \u0027com.google.guava:guava:28.1-jre\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    implementation(\"commons-io:commons-io:2.6\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    compile fileTree(include: [\u0027*.jar\u0027], dir: \u0027lib\u0027)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    compile files(\u0027lib/javax.activation.jar\u0027)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "philipalexanderb": 4,
      "jerryk1997": 1,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Chong Chee Yuan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::ccyccyccy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "{empty}[http://chongcheeyuan.me/[homepage]] [https://github.com/ccyccyccy[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "\u003d\u003d\u003d Philip Alexander Boediman"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::philipalexanderb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "{empty}[https://github.com/philipalexanderb[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Kwong Chung Yue Jerry"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "image::jerryk1997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "{empty}[https://github.com/jerryk1997[github]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Wang Runding"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::R-D-D-D.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "{empty}[https://github.com/r-d-d-d[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Role: Member"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Sng Jia Ming Fadi Faris"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "image::fadisng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "{empty}[https://github.com/fadisng[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Role: Member"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "ccyccyccy": 4,
      "philipalexanderb": 3,
      "fadisng": 6,
      "jerryk1997": 4,
      "-": 24
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T17-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Generate meeting timeslot"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The timeslot generator is used to suggest meeting timings by making use of team members\u0027 timetable."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature makes heavy use of the class `TimeRange`, which represents a period of time in a week, e.g. Monday 1000 -- Monday 1200."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic of this feature is contained within the `TimeSlotGenerator` class:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange)`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `members`: `List\u003cTimeTable\u003e` of members of the checked-out `Project`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `desiredMeetingDuration`: How long the meeting would last in hour, expressed as a positive integer"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `restrictedTimeRange`: Sets the limit of generated `TimeRange`, e.g. restrict meeting to working hours, from MONDAY 0900 - MONDAY 1800"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Only the two following methods are exposed:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generate()` -- Generate timeslot suitable for *_all_* `TimeTable` supplied. Returns a list of `TimeRange`, or an empty list of `TimeRange` if no such timeslot is available."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `TimeSlotGenerator#generateWithMostMembers()` -- Generate timeslot where *_most_* members of the currently checked out project are available. Returns a list of `TimeRange`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This feature depends on the timetable stored internally as an attribute of each members:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotClassDiagram.png[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Typical usage of `TimeSlotGenerator` would be look like this:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`List\u003cTimeRange\u003e availableTimeSlots \u003d new TimeSlotGenerator(members, desiredMeetingDuration, restrictedTimeRange).generate()`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following sequence diagram shows the entire process of generating timeslot after the command `generate d/2` is given:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotSequenceDiagram.png[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "As shown in the sequence diagram above, the command execution would go through the following stages:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Fetch the data of members in the current project and pass them to the `TimeSlotGenerator`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `TimeSlotGenerator` will extract their timetable and generate all possible `TimeRange`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Display result for the user to view all the possible timeslots that a meeting can be held."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "If `generate()` returns an empty `List\u003cTimeRange\u003e`, the program should automatically call `generateWithMostMembers()` and return it as result, informing the user that there is no timeslot where all members are available."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The following activity diagram summarizes the general flow of the command `generate`:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ".`Generate` command tries to provide best possible meeting timeslot"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "image::GenerateSlotActivityDiagram.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm Used"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generate()`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "This algorithm goes through several stages:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Combine all the given `TimeTable` into a single `List\u003cTimeRange\u003e combined`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `combined` is then processed further by merging overlapping `TimeRange` into a single `TimeRange`. E.g. `TimeRange(MONDAY, 1000, MONDAY, 1200)` and `TimeRange(MONDAY, 1200, MONDAY,1400)` are merged together to form a single `TimeRange(MONDAY, 1000, MONDAY, 1400)`. `List\u003cTimeRange\u003e merged` is then passed on to the next stage."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `merged` is then inverted, and returns `List\u003cTimeRange\u003e inverted` containing all timeslots where all the members are free."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". `inverted` is then processed to ensure that all `TimeRange` falls within `restrictedTimeRange` specified by the user, truncating all `TimeRange` that extends beyond the specified `restrictedTimeRange`, returning `List\u003cTimeRange\u003e truncated`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". The algorithm then filters `inverted` by rejecting all `TimeRange` that last shorter than `desiredMeetingDuration` specified by the user. This `List\u003cTimeRange\u003e accepted` is then passed back to the caller of this method, and the algorithm terminates."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `TimeSlotGenerator#generateWithMostMembers()`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Iterates over all possible combinations of timetables in descending order of number of timetable."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". For each possible combination, call `TimeSlotGenerator#generate()`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". If `TimeSlotGenerator#generate()` returns an empty list, repeat step 2 again."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Algorithm terminates, returning the combination of List\u003cTimeTable\u003e used and available timings `List\u003cTimeRange\u003e` wrapped in a class `TimeSlotWithMember`."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to generate timeslot with most number of available members"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 1 (current choice):** Iterate over all possible combinations of timetables, sorted in descending order of number of timetables, and call `TimeSlotGenerator#generate()` on each of these combinations."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: May have performance issues in terms of speed. This implementation takes O(2^n^) time for _n_  members."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* **Alternative 2:** Use a more sophisticated algorithm, like a segment tree."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Pros: Will use much less time."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "** Cons: Harder to implement, and more specialize towards only doing a single task."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "We went with options 1 as there is no real difference in speed if the number of members is restricted to below 15 members, which many projects do not normally exceed. It is much easier to understand and maintain by other developers as well."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d Timetable input"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Description of Feature"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "There are two ways to input member\u0027s timetable"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send a formatted text file to the team leader, which would then be parsed by the system"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ". Member send their NUSMods timetable URL to the team leader, and the system would fetch their timetable data using NUSMods API"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "The main logic is implemented within the `AddTimetableCommand` class."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Details"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Important functions in the `AddTimetableCommand`:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `AddTimetableCommand#getTimetableFromNUSMods(String url)` -- Fetch timetable data using NUSMods API"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `AddTimetableCommand#getTimetableFromFile(String filepath)` -- Parse file to obtain timetable data"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "An overview of how the `AddTimetableCommand` class works, shown in figure below:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cINSERT CLASS DIAGRAM, SHOW DEPENDENCIES\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "User command would be in the format: `addTimetable m/member [u/url] [f/filepath]`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Below diagram shows the entire process of adding timetable from file:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cINSERT SEQUENCE DIAGRAM FOR FILE INPUT\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Alternatively, user can input using NUSMods shared timetable URL."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Following sequence diagram would delve directly into the process of fetching timetable data using NUSMods API, as the earlier portion of command parsing is similar to the above figure."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003cINSERT SEQUENCE DIAGRAM, starting directly from getTimetableFromNUSMods\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations (DO I EVEN NEED THIS PORTION???)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to input timetable"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Alternatively, we can input timetable on the command line manually, but we realized that it is too troublesome and unrealistic for the user to type in so much timetable data of his many members."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |give my projects names |uniquely identify all my different projects"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |store ongoing tasks for each project |conveniently delegate and manage the tasks that need to be done for each project"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |prioritise the tasks within a project |easily manage the progress of my project"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |assign a status to a task |keep track of which tasks are done and which are still ongoing"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |allocate tasks to my members and store this information |conveniently delegate tasks and ensure there are no overlaps"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |easily get an overview of what my members are currently doing |so that I know which member is responsible for which tasks within the project"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |be able to remind my members of upcoming meetings |ensure smoother team meetings as they are updated on the time and location, and there would be no unnecessary delays"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |backup my save file |"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |which members must be at a particular meeting |schedule a meeting even if there are no dates where every member is available"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |get a list of possible dates with attendance of each members |choose the optimal date with more relevant members"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |set a range of timings where meetings can be set |schedule meetings at timings customised to my own requirements"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`* * *` |Team Manager |track the project\u0027s expenditure |ensure that the budget for the project will not be exceeded"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |Team Manager |sort tasks based on deadlines and show the list |know which are the tasks that are to be completed as soon as possible"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* * *` |team manager |access the list of valid commands that I can use |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |find an optimal meeting location based on each team members\u0027 location |optimise the convenience of the team meeting locations for each team member"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |remind members of their deadlines for their allocated tasks |make sure the tasks are completed promptly"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |find a date that everyone is free for team meetings |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`* *` |Team Manager |categorise the projects based on my preferences |better organise the projects"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |set an agenda for meetings |I can avoid meetings that are unproductive due to lack of things to do"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |send standardised emails to every team member containing the most updated project details |keep all my members up to date with the latest information when needed"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "fadisng"
        },
        "content": "|`*` |Team Manager |send the minutes from a meeting to each member |keep each member updated on what was discussed during the meeting"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |change the theme of the application |make it look the way I want it to"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |be recommended locations which are conducive for the meetings |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "|`*` |Team Manager |export a project as a word document |use it easily with other third party applications as needed"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - Add a project"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User requests to add a project."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. MyProject adds the project with respect to the arguments passed in by user."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. The arguments passed in are incomplete/wrong."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 2a1. MyProject shows an error message."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Checkout to a project to work on"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User requests to list projects."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. MyProject shows a list of projects."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. User requests to switch to a project in the list to work on."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "fadisng"
        },
        "content": "4. MyProject switches to the project for the user."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject shows an error message."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Edit a project"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "1. User requests to edit current project."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "2. MyProject requests for details of change."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "3. User enters the requested details."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "4. MyProject edits the details of the project and displays the information of the edited project."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3a. The given details do not match the given format."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject requests for the data and displays the format to be input."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a2. User enters new data."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Edit a member"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. User requests a list of members."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. MyProject shows a list members in this project."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "fadisng"
        },
        "content": "4. User chooses a member to edit based on the index and uses the corresponding prefix to change the desired attribute."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "5. MyProject makes the changes and displays the member with the updated attributes."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1. MyProject shows an error message."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3b. The prefix used does not match any of the predefined prefixes."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3b1. MyProject shows an error message."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: [.underline]#UC05# - Send reminder"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Preconditions: User has the e-mail addresses of all the team members, user has an email account and team members has the e-mail address of the user."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "2. User selects the uncompleted tasks in the project."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "3. User sends reminder to the members in charge of the tasks to complete by the specified deadline."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "4. Team members reply for acknowledgement."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "5. User receives acknowledgement."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 3a. All the tasks in the project has been completed."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "** 3a1.  User requests for for availability for the next meeting time."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 5a. Team members do not receive the reminder e-mail."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 5a1. User does not receive acknowledgement reply."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 5a2. User resend the reminders to team members who do not reply."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case resumes from step 6."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Store team members’ availability"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. Team members send user their respective timetable as a text file."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. User [.underline]#checkout to a project(UC02)#."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. Team leader stores timetable for the respective team member."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Steps 1 - 2 are repeated for each team member, until all team members’ timetables are stored."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* 2a. Text file invalid."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "fadisng"
        },
        "content": "** 2a1. MyProject prompts team leader that given file is invalid."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "fadisng"
        },
        "content": "**\t2a2. Team leader requests for resubmission of timetable from team member."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - Generate time slot where all team members are available for meeting"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "fadisng"
        },
        "content": "1. User [.underline]#stores all team members’ availability (UC06)#."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "fadisng"
        },
        "content": "2. Team leader request for a meeting within a specific range of time."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "fadisng"
        },
        "content": "3. MyProject displays a time frame where all team members are available."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "* 2a. No time slot exists such that all team members are available."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 88,
      "ccyccyccy": 119,
      "fadisng": 39,
      "jerryk1997": 36,
      "-": 405
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d MyProject User Guide:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Introduction:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MyProject (MP) is for team leaders who prefer to use a desktop app for managing their projects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MP is optimized for those who prefer to work with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "With MP it is a one-stop app to store and manage your projects and their relevant information,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "this is especially useful if you are always managing multiple projects across different teams."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Interested? Jump to the Section 2, “QuickStart” to get started. Enjoy!"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d Quick Start:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Download the latest myproject.jar here."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. list : lists all contacts"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": ".. exit : exits the app"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Shows a list of commands. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Listing Information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d List your contacts: `list`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Shows you the list of contacts you have currently along with their respective information. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Checkout a project: `checkout`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Checkout a project to begin working on the project immediately."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    Commands which require a project to be checked out first will be tagged using [Checkout]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `checkout INDEX`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number used to identify the project in the project list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `checkout 1`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Adding Items"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with adding information to the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Add a project: `addProject`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a new project into your list of projects. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addProject n/PROJECT_TITLE s/PROJECT_DESCRIPTION`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `addProject n/CS2103 project s/Software engineering project`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Add a person: `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a person to your contacts."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "When you add a person to your contacts, it will automatically change to displaying your list of contacts. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 3. Add a member to your project"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adding a member can be done in 2 ways, you can either add a new person to your contacts and to your current project,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "or you can simply add an existing person from your contacts to your current project."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 3.1 Add a new member: `addMember` [Checkout]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "This command is similar to adding a person to your contacts shown previously, except that you have to be"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "checked out into a project. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addMember n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/address] [t/tag]...`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adding a member only requires his/her name!"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "However it will be good to add as much information as possible."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addMember n/John Doe a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addMember n/Betsy Crowe e/betsycrowe@example.com t/friend t/criminal`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 3.2 Add from your contacts: `addFromContacts` [Checkout]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This command helps to add a person you already saved in your contacts into your project, reducing the need"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "to type his information all over again. All you need to do is enter the index he is listed at. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `addFromContacts INDEX`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number which the person is listed at, and it should be a positive integer eg. 1, 2, 3, ...."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addFromContacts 1`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 4. Add a timetable: `addTimeTable`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Adds a timetable for the specified person, to record down their schedule."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Timetable added is later used to generate avaiable meeting timeslots using the command `generate`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "`addTimetable INDEX [n/NUSMODS_SHARE_URL] [f/FILEPATH_TO_TIMETABLE]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `addTimetable 3 f//home/john/Desktop/aliceTimetable.txt` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Add Alice\u0027s timetable to Alice, who has index 3 in the list of persons."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `addTimetable 2 n/https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Add timetable to the person with index 2 on the list of persons."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 5. Add a task: `addTask` [Checkout]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds an unchecked task to the list of tasks of your current working project. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `addTask s/DESCRIPTION c/dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `addTask s/Finish GUI c/06/10/2019 1600`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Whenever you add a time with the prefix c/, the format should be dd/MM/yyyy HHmm,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fadisng"
        },
        "content": "whereby the year must be between 1900 to 2100 and the time must be between 0000 to 2359."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fadisng"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fadisng"
        },
        "content": "MyProject does not check for invalid days such as 30th February so do ensure you input"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fadisng"
        },
        "content": "your dates correctly!"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 6. Add a project meeting: `addProjectMeeting`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Adds a new project meeting to the current working project.  +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `Format: addProjectMeeting [c/ dd/MM/yyyy HHmm] [s/MEETING_DESCRIPTION]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `addProjectMeeting c/29/09/2019 1900 s/milestone discussion`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Editing"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with editing information shown on the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Edit a person : `edit`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Edit a task : `editTask`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Edits an existing task in the task list of the current project. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `editTask INDEX [s/DESCRIPTION] [c/dd/MM/yyyy HHmm] [d/]` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* If `d/` is not provided in the input, the task will automatically be unchecked."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `editTask 1 c/05/05/2019 1600 d/` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Edits the date and time to `05/05/2019 1600` and checks the task."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `editTask 2` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Unchecks the task."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Deleting"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "This section deals with removing information within the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Deleting a person: `delete`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Deletes the specified person from your contacts. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Remove a member: `removeMember` [Checkout]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Removes the specified person from the current working project. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `removeMember NAME`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`NAME` refers to the full name of the member displayed in the project."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `removeMember John Doe`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 3. Delete a task: `deleteTask` [Checkout]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Deletes the specified task from the current working project.  +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `deleteTask INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "`INDEX` is the number used to identify this task in the task list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `deleteTask 1`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Finding"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Find a person by name: `find`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Meeting"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "For every project, you can add meetings to it, and below you will be able to find more useful commands"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "associated with this functionality."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Generate meeting timing: `generate` [Checkout]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Generates possible meeting timeslots for which everyone is available."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* Prerequisite: Timetables have been assigned to the members with the command `addTimetable`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Format: `generate d/DURATION [r/TIMERANGE]`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "* `generate d/2 r/MONDAY 0900 MONDAY 1800` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Generates all possible meeting timeslots that lasts at least 2 hours, within the time frame of Monday 9am to Monday 6pm."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Send reminder: `sendReminder`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sends a reminder to all members of the current working project. +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `sendReminder`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Email"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Tired of switching between applications? We got you covered, below you will find some commands which support sending"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "emails right here within the application."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "Do keep in mind that only the user Account in our current version is only compatible with Gmail Account and please ensure that the Access to less secure app in the security setting is enabled before signing in! "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Sign in to your account: `signIn`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Signs in to the your email account. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `signIn [ac/ACCOUNT_EMAIL_ADDRESS] [pa/PASSWORD]`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Log out from your account: `logOut`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Logs out from your email account. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `logOut`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 3. Send an email: `sendMail`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sends an email to the specified person in your contacts. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `sendMail [r/RECIPIENT_OF_EMAIL] [su/SUBJECT] [me/MESSAGE_BODY]`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 4. Broadcast an email: `broadcastMail`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sends an email to all members in the current working project. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `broadcastMail [su/SUBJECT] [me/MESSAGE_BODY]`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d Sorting"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "The following section provides a set of commands which help with sorting the information inside the"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "application."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "All commands in this section follow this set of index/order pairing, where applicable:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Alphabetical order"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ". Increasing order of time"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Whether tasks are done and then by increasing order of time"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fadisng"
        },
        "content": ". Increasing price"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003d\u003d\u003d\u003d 1. Sort tasks: `sortTask`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Sorts the tasks in the task list of the current working project based on given specification. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Format: `sortTask INDEX`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` in this case refers to which type of sorting you want to do. In this case, only integers between 1 and 4 are applicable.(Refer to the highlighted section above)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `sortTask 4` (Sorts the tasks whether they are done and then by increasing date/time)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fadisng"
        },
        "content": "\u003d\u003d\u003d\u003d 2. Sort spending: `sortSpending`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Sorts the spending in the budget list of the current working project based on given specification. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `sortSpending INDEX`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fadisng"
        },
        "content": "`INDEX` in this case refers to which type of sorting you want to do. In this case, only integers 1, 2 and 5 are applicable.(Refer to the highlighted section above)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fadisng"
        },
        "content": "* `sortSpending 5` (Sorts the spending by increasing prices)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d Finance"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Isn\u0027t it always a pain to keep track of all the finances and checking with the treasurer everytime? You can do it easily with MyProject!"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add a budget"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Add multiple budgets available to the current project. +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `addBudget [b/NAME_OF_BUDGET AMOUNT NAME_OF_BUDGET AMOUNT...]`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d Add an expense"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Whenever an expenditure is made under a budget, add it to record. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Format: `addExpense [INDEX_OF_BUDGET] [s/DESCRIPTION] [ex/AMOUNT SPEND] [c/dd/MM/yyyy HHmm]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003d\u003d\u003d\u003d View budgets"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "See the summary of all budget which shows how much money is left with that budget and where is this budget used. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "Format: `listBudget`"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 9,
      "ccyccyccy": 22,
      "fadisng": 77,
      "philipalexanderb": 12,
      "jerryk1997": 171,
      "-": 88
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 21\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/GenerateSlotClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027@enduml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBook *-down-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Project --\u003e \"member *\" Person"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Person -\u003e \"1\" TimeTable"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "TimeSlotGenerator -down-\u003e TimeTable"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 34
    }
  },
  {
    "path": "docs/diagrams/GenerateSlotSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":GenerateSlotCommandParser\" as GenerateSlotCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \"g:GenerateSlotCommand\" as GenerateSlotCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":TimeSlotGenerator\" as TimeSlotGenerator LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[-\u003e LogicManager : execute(\"generate d/2\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"generate d/2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create GenerateSlotCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e GenerateSlotCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser -\u003e GenerateSlotCommandParser : parse(d/2)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create GenerateSlotCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser -\u003e GenerateSlotCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand --\u003e GenerateSlotCommandParser : g"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser --\u003e AddressBookParser : g"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "destroy GenerateSlotCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "AddressBookParser --\u003e LogicManager : g"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "LogicManager -\u003e GenerateSlotCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate GenerateSlotCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand -\u003e Model : getMembers()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "Model --\u003e GenerateSlotCommand : members"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "loop for each timetable combination \u0026\u0026 timeRanges.isEmpty()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    create TimeSlotGenerator"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    GenerateSlotCommand -\u003e TimeSlotGenerator"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    activate TimeSlotGenerator"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TimeSlotGenerator --\u003e GenerateSlotCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    deactivate TimeSlotGenerator"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    GenerateSlotCommand -\u003e TimeSlotGenerator : generate()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    activate TimeSlotGenerator"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    TimeSlotGenerator --\u003e GenerateSlotCommand : List\u003cTimeRange\u003e timeRanges"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    deactivate TimeSlotGenerator"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "CommandResult --\u003e GenerateSlotCommand : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "GenerateSlotCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate GenerateSlotCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 85
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Package Project {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Meeting"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class Finance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "AddressBook *--\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "UniqueProjectList o--\u003e \"*\" Project"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Meeting"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"1\" Title"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Project *--\u003e \"*\" Finance"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ModelManager -\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "ModelManager --\u003e\"1\" Project : filtered list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 27,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Interface ProjectListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class JsonSerializableProjectList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "Class JsonProjectListStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "StorageManager o--\u003e ProjectListStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonProjectListStorage .left.|\u003e ProjectListStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonProjectListStorage .down.\u003e JsonSerializableProjectList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonAdaptedPerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .right.\u003e JsonAdaptedMeeting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "JsonSerializableProjectList .left.\u003e JsonAdaptedFinance"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "fadisng": 14,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.ProjectList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.storage.ProjectListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.storage.JsonProjectListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectListStorage projectListStorage \u003d new JsonProjectListStorage(userPrefs.getProjectListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, projectListStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Optional\u003cReadOnlyProjectList\u003e projectListOptional;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ReadOnlyProjectList initialProjects;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListOptional \u003d storage.readProjectList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (!addressBookOptional.isPresent() || !projectListOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d projectListOptional.orElseGet(SampleDataUtil::getSampleProjectList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d new ProjectList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            initialProjects \u003d new ProjectList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialProjects);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 12,
      "ccyccyccy": 2,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX \u003d \"The budget index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_NOT_CHECKED_OUT \u003d \"Please checkout to a project before proceeding\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"Image file does not exist\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is invalid. Index should be an integer in the range of 1 and 4\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "fadisng": 2,
      "jerryk1997": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IllegalValueException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    CommandResult executeImageDrop(File imgFile, Person person) throws CommandException, ParseException, IllegalValueException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the ProjectList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see seedu.address.model.Model#getProjectList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of projects */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an Optional\u003cProject\u003e which is the current working project."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cProject\u003e getWorkingProject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Remove the working project."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void removeWorkingProject();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Sets the working project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setWorkingProject(Project project);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Add a view history."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addUiEvent(UiEvent event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the previous history."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent getPreviousEvent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Reset the view history because some condition is triggered."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void eraseHistory();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 54,
      "jerryk1997": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // Stores all the changes in Ui display"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Stack\u003cUiEvent\u003e viewHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            storage.saveProjectList(model.getProjectList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult executeImageDrop(File imgFile, Person person) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        for (Person curr : model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            if (curr.getName().equals(person.getName())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String commandText \u003d \"addProfilePicture \" + index + \" f/\" + imgFile.getPath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        commandResult \u003d execute(commandText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getProjectList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getFilteredProjectList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getProjectListFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return model.getWorkingProject();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeWorkingProject() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.removeWorkingProject();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(project);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addUiEvent(UiEvent event) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.viewHistory.push(event);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent getPreviousEvent() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        viewHistory.pop();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return viewHistory.peek();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void eraseHistory() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        viewHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 61,
      "jerryk1997": 20,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/UiEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.ui.State;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UiEvent is an event that has happened in the Ui display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UiEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private State state;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Optional\u003cInteger\u003e projectIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public UiEvent(State state, Optional\u003cInteger\u003e projectIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public State getState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cInteger\u003e getProjectIndex() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Adds a budget type to the project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBudget\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a budget type to the project\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"BUDGET]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_BUDGET + \"equipment 3000.00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budgets added\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddBudgetCommand(List\u003cBudget\u003e bugets) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgets.addAll(bugets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : budgets) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            currWorkingProject.getFinance().addBudget(budget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(currWorkingProject.getTitle(), //title"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                currWorkingProject.getDescription(), currWorkingProject.getMemberNames(), //description + members"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                currWorkingProject.getTasks(), new Finance(currWorkingProject.getFinance().getBudgets())); //tasks and budget"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setProject(currWorkingProject, editedProject);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 46,
      "ccyccyccy": 1,
      "fadisng": 1,
      "jerryk1997": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddFromContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddFromContactsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addFromContacts\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Adds the person identified by the index number used in the displayed person list to the working project.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_EXISTING_SUCCESS \u003d \"Added %1$s to %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddFromContactsCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Finds the person in the address book, and gets the name as a string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String personToAddName \u003d personToAdd.getName().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //Find the project to edit, and the title of the project as a string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String projectToEditTitle \u003d projectToEdit.getTitle().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.add(personToAddName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                projectToEdit.getDescription(), editedMemberList, projectToEdit.getTasks(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                new Finance(projectToEdit.getFinance().getBudgets()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        personToAdd.getProjects().add(projectToEditTitle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_EXISTING_SUCCESS, personToAddName, projectToEditTitle), COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddMemberCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addMember\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the working project \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE \" + \"]\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL \" + \"]\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS \" + \"]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New member added to %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MISSING_FIELDS \u003d MESSAGE_SUCCESS + \" (Please remember to fill in remaining information for member)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the project\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_WRONG_ADD_COMMAND \u003d \"This person already exists in the address book, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"please use addFromContacts instead.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_FIELDS \u003d \"Please remember to fill in the proper fields later.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NewMemberDescriptor toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Creates an AddMemberCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddMemberCommand(NewMemberDescriptor newMemberDescriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newMemberDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toAdd \u003d newMemberDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String projectToEditTitle \u003d projectToEdit.getTitle().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToAdd \u003d createNewMember(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        personToAdd.getProjects().add(projectToEditTitle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (model.hasPerson(personToAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_ADD_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (projectToEdit.hasMember(personToAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //Adding person to address book and project"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.addPerson(personToAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.add(personToAdd.getName().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(editedMemberList, SortingOrder.getCurrentSortingOrderForMember());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                editedMemberList, projectToEdit.getTasks(), projectToEdit.getFinance());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (toAdd.isAnyFieldNotEdited()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_MISSING_FIELDS, personToAdd.getName().toString(), projectToEdit), COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, personToAdd.getName().toString(), projectToEdit), COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createNewMember(NewMemberDescriptor newMemberDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d newMemberDescriptor.getName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d newMemberDescriptor.getPhone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d newMemberDescriptor.getEmail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture profilePicture \u003d newMemberDescriptor.getProfilePicture();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d newMemberDescriptor.getAddress();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (newMemberDescriptor.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            tags \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            tags \u003d newMemberDescriptor.getTags().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Person(name, phone, email, profilePicture, address, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NewMemberDescriptor {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone \u003d new Phone(\"00000000\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email \u003d new Email(\"no_email@added\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        private ProfilePicture profilePicture \u003d new ProfilePicture(\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address \u003d new Address(\"-none-\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public NewMemberDescriptor() {}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public NewMemberDescriptor(NewMemberDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setProfilePicture(toCopy.profilePicture);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldNotEdited() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNull(name, phone, email, address);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public Phone getPhone() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public Email getEmail() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return email;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return profilePicture;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Address getAddress() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return address;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof NewMemberDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            NewMemberDescriptor e \u003d (NewMemberDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "fadisng": 3,
      "philipalexanderb": 1,
      "jerryk1997": 61,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProfilePictureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.ProfilePicture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddProfilePictureCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProfilePicture\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a profile picture to the person specified by the index. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_FILE_PATH + \"File path to the image\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            + PREFIX_FILE_PATH + \"downloads/profile_picture\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_ADD_PROFILE_PICTURE_SUCCESS \u003d \"Profile picture added for %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final File imgFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddProfilePictureCommand(Index index, File imgFile) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.imgFile \u003d imgFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        String filePath \u003d StorageManager.copyImageToData(imgFile, personToEdit.getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                profilePicture, personToEdit.getAddress(), personToEdit.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_PROFILE_PICTURE_SUCCESS, editedPerson.getName().toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddProjectCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProject\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a project to the project list. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_NAME + \"PROJECT_TITLE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"PROJECT_DESCRIPTION \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_NAME + \"CS2103 TP \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + PREFIX_DESCRIPTION + \"To create an app to manage projects\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 40,
      "philipalexanderb": 3,
      "fadisng": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProjectMeetingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class AddProjectMeetingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addProjectMeeting\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meeting added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the project. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \" Paremeters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_TIME + \" TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_TIME + \"29/09/2019 1900 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_DESCRIPTION + \"milestone discussion\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Meeting toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    Constructor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public AddProjectMeetingCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        toAdd \u003d meeting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cTask\u003e taskList \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Set\u003cMeeting\u003e meetingList \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Set\u003cMeeting\u003e newMeetingList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        newMeetingList.addAll(meetingList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        newMeetingList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), members, taskList, projectToEdit.getFinance());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(newMeetingList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "philipalexanderb": 62,
      "fadisng": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddSpendingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Adds a budget type to the project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddSpendingCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Spending toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addExpense\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an expense to the specific budget\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \" index of the budget you want to add...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"[\" + PREFIX_EXPENSE + \"EXPENSE]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \" 1 s/bought pizza for the team ex/60.00 c/20/10/2019 1600\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddSpendingCommand(Index index, Spending toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project currWorkingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cBudget\u003e budgets \u003d currWorkingProject.getFinance().getBudgets();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d budgets.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BUDGET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgets.get(index.getZeroBased()).addSpending(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project editedProject \u003d new Project(currWorkingProject.getTitle(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                currWorkingProject.getDescription(), currWorkingProject.getMemberNames(), currWorkingProject.getTasks(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                new Finance(budgets));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setProject(currWorkingProject, editedProject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 68,
      "ccyccyccy": 1,
      "fadisng": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Adds a Task field of a project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds this task to the current project \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"s/[DESCRIPTION] c/[TIME in the form dd/MM/yyyy hhmm]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \" s/Finish GUI\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \" c/05/09/2019 1600\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"Added Task: %1$s to current project.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in this project.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskToEdit \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskArrayList.addAll(taskToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskArrayList.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(taskArrayList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                projectToEdit.getMemberNames(), taskArrayList, projectToEdit.getFinance());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (projectToEdit.hasTask(task)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TASK_SUCCESS, task), COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof AddTaskCommand)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        AddTaskCommand e \u003d (AddTaskCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return task.equals(e.task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "ccyccyccy": 1,
      "fadisng": 75,
      "philipalexanderb": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTimetableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTableInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTableVisualization;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class AddTimetableCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTimetable\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_NUSMODS_URL \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add timetable to the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Existing timetable will be overwritten by the input timetable.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[\" + PREFIX_FILEPATH + \"FILEPATH] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[\" + PREFIX_NUSMODS_URL + \"NUSMODS_URL]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + COMMAND_WORD + \" 1 \" + PREFIX_FILEPATH + \"/path/to/timetable/file\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + COMMAND_WORD + \" 1 \" + PREFIX_NUSMODS_URL + \"https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:05,TUT:02,LEC:1\u0026CS2101\u003d\u0026CS2103T\u003dLEC:G13\u0026CS2105\u003dTUT:03,LEC:1\u0026CS3241\u003dTUT:05,LEC:1\u0026CS3243\u003dTUT:01,LEC:1\u0026GEQ1000\u003dTUT:D27\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_ADD_TIMETABLE_SUCCESS \u003d \"Added timetable to Person: %s\\n%s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEPATH \u003d \"Please provide a proper absolute filepath to the timetable file\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_INVALID_URL \u003d \"URL invalid. Please provide a proper URL to NUSMODs\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_NO_TIMETABLE_SOURCE \u003d \"Please provide either an NUSMods URL or a filepath to a timetable time\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final String absoluteFilepath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final URL url;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param absoluteFilepath absoluteFilepath to timetable file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public AddTimetableCommand(Index index, String absoluteFilepath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(index, absoluteFilepath, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public AddTimetableCommand(Index index, URL url) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(index, null, url);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public AddTimetableCommand(Index index, String absoluteFilepath, URL url) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.absoluteFilepath \u003d absoluteFilepath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable timeTable \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (absoluteFilepath !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeTable \u003d new TimeTableInput().getTabletableFromFilepath(absoluteFilepath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_FILEPATH);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (url !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeTable \u003d new TimeTableInput().getTimetableFromUrl(url);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_URL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(), personToEdit.getProfilePicture(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getTags(), timeTable);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TIMETABLE_SUCCESS, editedPerson, new TimeTableVisualization(timeTable).visualize()), COMMAND_WORD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!(other instanceof AddTimetableCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        AddTimetableCommand a \u003d (AddTimetableCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return index.equals(a.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 absoluteFilepath.equals(a.absoluteFilepath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 118,
      "jerryk1997": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Changes the UI to the previous display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": go back to the previous display \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BackCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new CommandResult(\"\", COMMAND_WORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 24,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BroadcastMailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Mailer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class BroadcastMailCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"broadcastMail\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mails has been sent successfully\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN \u003d \"Please sign in using your email account before sending Email\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Please check your internet connection and ensure that the following has been modified to your account security settings:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Enable Less secure app access\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Disable the 2-Step Verification when Signing into your Google account\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Please ensure the recipients\u0027 email address is correct\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_EMPTY_MEMBERS \u003d \"No members have been added to the project.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": broadcasts mail to project members.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"EMAIL BODY \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"sending email\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"Hello World!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public BroadcastMailCommand(String subject, String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d model.getOwnerAccount();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cPerson\u003e recipientsList \u003d model.getMembers();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String unsentMails \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String listOfUnsentMails \u003d \"Mails could not be sent to the following members:\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Person person: recipientsList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            String recipientEmail \u003d person.getEmail().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                Mailer.sendEmail(ownerAccount.getEmail().value, ownerAccount.getPassword(), recipientEmail, this.subject, this.message);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                if (!unsentMails.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    unsentMails \u003d unsentMails + \"\\n\" + \"  - \" + person.getName().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    unsentMails \u003d \"  - \" + person.getName().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (recipientsList.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_MEMBERS, COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (unsentMails.equals(\"\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult((listOfUnsentMails + unsentMails + \"\\n\" + MESSAGE_FAILURE), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "philipalexanderb": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Checkout to a project to work on it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class CheckoutCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": switch to a project in the list to work on \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"by the index number used in the displayed project list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_SUCCESS \u003d \"Switched to project:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CheckoutCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cProject\u003e lastShownList \u003d model.getFilteredProjectList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (true) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            //throw new CommandException(lastShownList.get(0).getFinance().getBudgets().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project projectToSwitchTo \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.setWorkingProject(projectToSwitchTo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_SUCCESS, projectToSwitchTo.toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final boolean changeInUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final boolean back;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, String commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(CheckoutCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ListBudgetCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                AddProjectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (list.contains(commandWord)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.changeInUi \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            this.changeInUi \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (commandWord.equals(BackCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            back \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            back \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Find out whether a change in Ui is needed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean changeNeeded() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return changeInUi;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, String commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false, commandWord);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isBack() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 commandWord \u003d\u003d otherCommandResult.commandWord;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, commandWord);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 31,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProjectMeetingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DeleteProjectMeetingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteMeeting\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete a meeting from the list of meetings in the project \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"by the index number used in the displayed project meetings list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_MEETING_SUCCESS \u003d \"Meetings deleted :\\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DeleteProjectMeetingCommand(Index index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cTask\u003e tasks \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Set\u003cMeeting\u003e meetings \u003d projectToEdit.getListOfMeeting();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArrayList\u003cMeeting\u003e meetingsToEdit \u003d new ArrayList\u003c\u003e(meetings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d meetingsToEdit.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        meetingsToEdit.sort(Comparator.comparing(m -\u003e m.getTime().getDate()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meetingToDelete \u003d meetingsToEdit.remove(index.getOneBased() - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Set\u003cMeeting\u003e newMeeting \u003d new HashSet\u003cMeeting\u003e(meetingsToEdit);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                members, tasks, finance);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(newMeeting);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_MEETING_SUCCESS, meetingToDelete), COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!(other instanceof DeleteProjectMeetingCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        DeleteProjectMeetingCommand e \u003d (DeleteProjectMeetingCommand) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Deletes a task field of a project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteTask\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes this task from the current project \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s from current project.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public DeleteTaskCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskToEdit \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d taskToEdit.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(taskToEdit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task task \u003d taskList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                projectToEdit.getMemberNames(), taskList, finance);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, task), COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof DeleteTaskCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        DeleteTaskCommand e \u003d (DeleteTaskCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "ccyccyccy": 2,
      "fadisng": 75,
      "philipalexanderb": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ProfilePicture updatedProfilePicture \u003d editPersonDescriptor.getProfilePicture().orElse(personToEdit.getProfilePicture());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable timeTable \u003d personToEdit.getTimeTable(); // Timetable is not affected by edit command. Just copy."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedProfilePicture, updatedAddress, updatedTags, timeTable);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            setProfilePicture(toCopy.profilePicture);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        public Optional\u003cProfilePicture\u003e getProfilePicture() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return Optional.ofNullable(profilePicture);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                    \u0026\u0026 getProfilePicture().equals(e.getProfilePicture())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 2,
      "fadisng": 1,
      "philipalexanderb": 5,
      "jerryk1997": 13,
      "-": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editTask\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"When editing a task, if d/ is not in the input, task will automatically become undone.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"[\" + PREFIX_DONE + \"] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Finish GUI \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_TIME + \"09/09/2019 1700\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskSet \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(taskSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d taskSet.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task taskToEdit \u003d taskList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.add(index.getZeroBased(), editedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(taskList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), projectToEdit.getMemberNames(), taskList, projectToEdit.getFinance());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask), COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time updatedTime \u003d editTaskDescriptor.getTime().orElse(taskToEdit.getTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        boolean updatedIsDone \u003d editTaskDescriptor.getIsDone().orElse(taskToEdit.isDone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new Task(updatedDescription, updatedTime, updatedIsDone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private Time time;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        private boolean isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            setIsDone(toCopy.isDone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fadisng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, time, isDone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setTime(Time time) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsDone() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return Optional.ofNullable(isDone);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    \u0026\u0026 getIsDone() \u003d\u003d (e.getIsDone())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "ccyccyccy": 1,
      "fadisng": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateSlotCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeSlotGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class GenerateSlotCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final Prefix PREFIX_TIMERANGE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \": Generate timeslot from requested meeting duration and time range\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Parameters: DURATION (must be positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"[r/TIMERANGE (DAY TIME DAY TIME)]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            + PREFIX_DURATION + \"2 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + PREFIX_TIMERANGE + \"MONDAY 0800 MONDAY 1700\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_NOT_CHECKED_OUT \u003d \"A project must be checked out first before running this command\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_ERROR \u003d \"Unknown error occured in generation algorithm. Please contact the dev team to report on this bug\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private int durationInHours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TimeRange timeRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public GenerateSlotCommand(int durationInHours, TimeRange timeRange) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(durationInHours, timeRange);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.durationInHours \u003d durationInHours;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (model.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeTable\u003e timeTables \u003d model.getMembers().stream().map(Person::getTimeTable).collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new CommandResult(new TimeSlotGenerator(timeTables, durationInHours, timeRange).generate().toString(), COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 56,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ListBudgetCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBudget\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Project workingProject \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cBudget\u003e budgetArrayList \u003d workingProject.getFinance().getBudgets();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(budgetArrayList, Comparator.comparing(budget -\u003e budget.getRemainingAmount()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Budget budget : budgetArrayList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(index + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(budget.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(sb.toString(), COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 34,
      "fadisng": 7,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogOutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class LogOutCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logOut\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out successfully\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sign In to your Email Account.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_HAVE_NOT_SIGNED_IN \u003d \"User have not signed in. You can proceed to sign in immediately\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public LogOutCommand(){}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_HAVE_NOT_SIGNED_IN);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        model.logOut();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveMemberCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemoveMemberCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeMember\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Removes the member from the working project.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: n/NAME\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/John doe\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_REMOVE_MEMBER_SUCCESS \u003d \"Removed %1$s from %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String targetMember;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemoveMemberCommand(String targetMember, NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetMember \u003d targetMember;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Finding the person and removing the project from the person\u0027s list of projects"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e memberProjectList \u003d targetPerson.getProjects();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        memberProjectList.remove("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                memberProjectList.indexOf("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        projectToEdit.getTitle().toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //Creating the new member list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e memberListToEdit \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        memberListToEdit.remove(targetPerson.getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e editedMemberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedMemberList.addAll(memberListToEdit);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                editedMemberList, projectToEdit.getTasks(), projectToEdit.getFinance());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        editedProject.setListOfMeeting(projectToEdit.getListOfMeeting());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MEMBER_SUCCESS, targetMember,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                editedProject.getTitle().toString()), COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "philipalexanderb": 1,
      "jerryk1997": 5,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SendMailCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Mailer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendMailCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sendMail\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mail has been sent successfully\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN \u003d \"Please sign in using your email account before sending Email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Failed to send email.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Please check your internet connection and ensure that the following has been modified to your account security settings:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Enable Less secure app access\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Disable the 2-Step Verification when Signing into your Google account\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - Please ensure the recipient\u0027s email address is correct\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends Mail to recipient. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_RECIPIENT + \"RECIPIENT EMAIL ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"EMAIL BODY \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_RECIPIENT + \"bob@gmail.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_SUBJECT + \"sending email \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_MESSAGE + \"Hello World!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String recipient;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendMailCommand(String recipient, String subject, String message) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.recipient \u003d recipient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d model.getOwnerAccount();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!model.isSignedIn()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Mailer.sendEmail(ownerAccount.getEmail().value, ownerAccount.getPassword(), this.recipient, this.subject, this.message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE, COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignInCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SignInCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private OwnerAccount ownerAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"signIn\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Signed In Successfully\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGNED_IN \u003d \"You have signed in, please log out to sign in to another account\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_SIGN_IN_ISSUE \u003d \"Unable to sign in. Please check that: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have enabled Less secure app access in your Google Account Setting\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have disabled the 2-Step Verification in your Google Account Setting\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You have correctly input the email address and password.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"  - You are connected to the Internet.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sign In to your Email Account. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_ACCOUNT + \"EMAIL_ACCOUNT \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_ACCOUNT + \"alice@gmail.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            + PREFIX_PASSWORD + \"12345678\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SignInCommand(OwnerAccount ownerAccount) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(ownerAccount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d ownerAccount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    final Logger logger \u003d LogsCenter.getLogger(SendMailCommand.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (model.isSignedIn() \u0026\u0026 this.ownerAccount.equals(model.getOwnerAccount())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(\"You are signed in with the Account\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } else if (model.isSignedIn()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGNED_IN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Can try to use other legit method, current method is to send dummy email to cs2103t17@gmail.com and see if email can be sent."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            model.signIn(ownerAccount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new CommandException(MESSAGE_SIGN_IN_ISSUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortSpendingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Sorts the tasks in the current project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortSpendingCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortSpending\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the spendings for each expense in the list of budgets according to given index.\\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"1 - Sorts by alphabetical order.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"2 - Sorts by increasing date/time.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"5 - Sorts by increasing spending.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1-2 or 5)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SORT_SPENDING_SUCCESS \u003d \"Spendings sorted by%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortSpendingCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String sortType \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        switch (index.getOneBased()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" alphabetical order.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByAlphabeticalOrder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increasing date/time.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increase expenses.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentSpendingSortingOrderByExpense();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cBudget\u003e budgetListToEdit \u003d projectToEdit.getFinance().getBudgets();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Budget budget : budgetListToEdit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Collections.sort(budget.getSpendings(), SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), new ArrayList\u003c\u003e(), projectToEdit.getTasks(), finance);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        editedProject.getMemberNames().addAll(members);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_SPENDING_SUCCESS, sortType), COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof SortSpendingCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        SortSpendingCommand e \u003d (SortSpendingCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PROJECTS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_CHECKED_OUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Sorts the tasks in the current project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortTask\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the task from the current project according to given index.\\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"1 - Sorts by alphabetical order.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"2 - Sorts by increasing date/time.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"3 - Sorts by whether tasks are done.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"4 - Sorts by whether tasks are done and then by increasing date/time.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer between 1-4)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_SORT_TASK_SUCCESS \u003d \"Tasks sorted by%1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortTaskCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!model.isCheckedOut()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_CHECKED_OUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project projectToEdit \u003d model.getWorkingProject().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cString\u003e members \u003d projectToEdit.getMemberNames();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e taskToEdit \u003d projectToEdit.getTasks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        String sortType \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        switch (index.getOneBased()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" alphabetical order.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByAlphabeticalOrder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \" increasing date/time.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \"  whether tasks are done.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            sortType \u003d \"  whether tasks are done and then by increasing date/time.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            SortingOrder.setCurrentTaskSortingOrderByDoneThenDate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        taskList.addAll(taskToEdit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(taskList, SortingOrder.getCurrentSortingOrderForTask());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Finance finance \u003d projectToEdit.getFinance();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Project editedProject \u003d new Project(projectToEdit.getTitle(), projectToEdit.getDescription(), new ArrayList\u003cString\u003e(), taskList, finance);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        editedProject.getMemberNames().addAll(members);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.setProject(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SORT_TASK_SUCCESS, sortType), COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof SortTaskCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        SortTaskCommand e \u003d (SortTaskCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "ccyccyccy": 2,
      "fadisng": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddBudgetCommandParser implements Parser\u003cAddBudgetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddBudgetCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BUDGET)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cBudget\u003e budgetList \u003d ParserUtil.parseBudgets(argMultimap.getAllValues(PREFIX_BUDGET));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddBudgetCommand(budgetList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"docs/empty_profile_picture.png\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person person \u003d new Person(name, phone, email, profilePicture, address, tagList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "fadisng": 1,
      "jerryk1997": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddMemberCommand.NewMemberDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " * Parses input arguments and creates a new AddMemberCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddMemberCommandParser implements Parser\u003cAddMemberCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMemberCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * and returns an AddMemberCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddMemberCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NewMemberDescriptor newMemberDescriptor \u003d new NewMemberDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            newMemberDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(newMemberDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddMemberCommand(newMemberDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 19,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProfilePictureCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddProfilePictureCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class AddProfilePictureCommandParser implements Parser\u003cAddProfilePictureCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public AddProfilePictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE_PATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfilePictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!argMultiMap.getValue(PREFIX_FILE_PATH).isPresent()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d new File(argMultiMap.getValue(PREFIX_FILE_PATH).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!imgFile.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FILE_DOES_NOT_EXIST, AddProfilePictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new AddProfilePictureCommand(index, imgFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProjectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddProjectCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddProjectCommandParser implements Parser\u003cAddProjectCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddProjectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Finance finance \u003d new Finance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Project project \u003d new Project(title, description, members, tasks, finance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45,
      "fadisng": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProjectMeetingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.AddProjectMeetingCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class AddProjectMeetingCommandParser implements Parser\u003cAddProjectMeetingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public AddProjectMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIME, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectMeetingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Description description \u003d ParserUtil.parseMeetingDescription((argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meeting \u003d new Meeting(time, description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new AddProjectMeetingCommand(meeting);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddSpendingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.AddSpendingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new AddSpendingCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class AddSpendingCommandParser implements Parser\u003cAddSpendingCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBudgetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns an AddSpendingCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public AddSpendingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_EXPENSE, PREFIX_TIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_EXPENSE, PREFIX_TIME)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSpendingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSpendingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal spending \u003d ParserUtil.parseSpending(argMultimap.getValue(PREFIX_EXPENSE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()).toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Spending expense \u003d new Spending(spending, date, description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new AddSpendingCommand(index, expense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_TIME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task task \u003d new Task(description, time, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTimetableCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.AddTimetableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class AddTimetableCommandParser implements Parser\u003cAddTimetableCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Cannot use argMultimap for this because argument is a classpath, and the current tokenizer would tokenize the filepath as well"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public AddTimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, AddTimetableCommand.PREFIX_FILEPATH, AddTimetableCommand.PREFIX_NUSMODS_URL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTimetableCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        URL url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(AddTimetableCommand.PREFIX_FILEPATH).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            absoluteFilepath \u003d argMultimap.getValue(AddTimetableCommand.PREFIX_FILEPATH).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new AddTimetableCommand(index, absoluteFilepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (argMultimap.getValue(AddTimetableCommand.PREFIX_NUSMODS_URL).isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                url \u003d new URL(argMultimap.getValue(AddTimetableCommand.PREFIX_NUSMODS_URL).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new AddTimetableCommand(index, url);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(AddTimetableCommand.MESSAGE_INVALID_URL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(AddTimetableCommand.MESSAGE_NO_TIMETABLE_SOURCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.LogOutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddProjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case AddProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new AddProjectMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case AddProfilePictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AddProfilePictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        case AddMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return new AddMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddFromContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddFromContactsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new AddSpendingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new EditTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case RemoveMemberCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RemoveMemberCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case ListBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new ListBudgetCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new CheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case GenerateSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new GenerateSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case SendMailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new SendMailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case BroadcastMailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new BroadcastMailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case SignInCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new SignInCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case LogOutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new LogOutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortTaskParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        case SortSpendingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortSpendingParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        case AddTimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new AddTimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        case DeleteProjectMeetingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new DeleteProjectMeetingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17,
      "ccyccyccy": 6,
      "philipalexanderb": 19,
      "fadisng": 16,
      "jerryk1997": 10,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BroadcastMailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.BroadcastMailCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class BroadcastMailCommandParser implements Parser\u003cBroadcastMailCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public BroadcastMailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SUBJECT, PREFIX_MESSAGE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BroadcastMailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String subject \u003d argMultimap.getValue(PREFIX_SUBJECT).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String message \u003d argMultimap.getValue(PREFIX_MESSAGE).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new BroadcastMailCommand(subject, message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckoutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Parses input arguments and creates a new CheckoutCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class CheckoutCommandParser implements Parser\u003cCheckoutCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckoutCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * and returns a CheckoutCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public CheckoutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new CheckoutCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckoutCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE \u003d new Prefix(\"ex/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final Prefix PREFIX_FILE_PATH \u003d new Prefix((\"f/\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_RECIPIENT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_ACCOUNT \u003d new Prefix(\"ac/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"su/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"me/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final Prefix PREFIX_DONE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "philipalexanderb": 6,
      "fadisng": 1,
      "jerryk1997": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteProjectMeetingCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.DeleteProjectMeetingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Parses input arguments and creates a new DeleteProjectMeetingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class DeleteProjectMeetingCommandParser implements Parser\u003cDeleteProjectMeetingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProjectMeetingCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns a DeleteProjectMeetingCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public DeleteProjectMeetingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new DeleteProjectMeetingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProjectMeetingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class EditTaskParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TIME, PREFIX_DONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DONE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            editTaskDescriptor.setIsDone(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateSlotCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.commands.GenerateSlotCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.logic.commands.GenerateSlotCommand.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class GenerateSlotCommandParser implements Parser\u003cGenerateSlotCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public GenerateSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                PREFIX_DURATION, PREFIX_TIMERANGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GenerateSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange timeRangeSpecified;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIMERANGE).isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRangeSpecified \u003d ParserUtil.parseTimeRange(argMultimap.getValue(PREFIX_TIMERANGE).get());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRangeSpecified \u003d new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"00:00\"), DayOfWeek.SUNDAY, LocalTime.parse(\"23:59\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                // Should never reach this place."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new GenerateSlotCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                Integer.parseInt(argMultimap.getValue(PREFIX_DURATION).get()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRangeSpecified);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LogOutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.LogOutCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class LogOutCommandParser implements Parser\u003cLogOutCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public LogOutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LogOutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new LogOutCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    T parse(String userInput) throws ParseException, java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.finance.Spending.DATE_FORMAT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return new Time(trimmedTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static Description parseMeetingDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String trimmedDesc \u003d description.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!Description.isValidDescription(trimmedDesc)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new Description(trimmedDesc);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Parses {@code String timeRange} into a {@code TimeRange}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Example: parseTimeRange(MONDAY 1100 TUESDAY 1500)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRange Format \"DAYSTART TIMESTART DAYEND TIMEEND\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static TimeRange parseTimeRange(String timeRange) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(timeRange);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] split \u003d timeRange.trim().split(\" \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            DayOfWeek dayStart \u003d DayOfWeek.valueOf(split[0].trim().toUpperCase());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(split[1].trim(), DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            DayOfWeek dayEnd \u003d DayOfWeek.valueOf(split[2].trim().toUpperCase());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(split[3].trim(), DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return new TimeRange(dayStart, startTime, dayEnd, endTime);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } catch (IllegalValueException | ArrayIndexOutOfBoundsException | java.lang.IllegalArgumentException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeRange.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Parses a {@code String name, @code String number} into a {@code Budget}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code number} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Budget parseBudget(String name, String number) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(name, number);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedNumber \u003d number.trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal doubleNumber;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Budget.isValidAmount(trimmedNumber)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        doubleNumber \u003d new BigDecimal(trimmedNumber);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Budget(trimmedName, doubleNumber, spendings);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses {@code List\u003cString\u003e budgets} into a {@code Set\u003cBudget\u003e}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static List\u003cBudget\u003e parseBudgets(List\u003cString\u003e budgets) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(budgets);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String[] strs \u003d budgets.get(0).split(\" \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if ((strs.length) % 2 !\u003d 0) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final List\u003cBudget\u003e budgetSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (int i \u003d 0; i \u003c strs.length / 2; i++) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            budgetSet.add(parseBudget(strs[i], strs[i + 1]));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgetSet;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static TimeTable parseTimeTable(String timeTableString) throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] splitted \u003d timeTableString.split(\"\\n\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (String s : splitted) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                timeRanges.add(parseTimeRange(s));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimeRange.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeTable(timeRanges);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Spending.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date result \u003d new Date();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result \u003d DATE_FORMAT.parse(trimmedDate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Parses a {@code String spending} into an {@code Spending}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws ParseException if the given {@code spending} is invalid."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static BigDecimal parseSpending(String spending) throws ParseException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        String trimmedSpending \u003d spending.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Spending.isValidAmount(trimmedSpending)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ParseException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new BigDecimal(spending);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 107,
      "ccyccyccy": 44,
      "fadisng": 1,
      "philipalexanderb": 22,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveMemberCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RemoveMemberCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses the given {@code String} of arguments in the context of RemoveMemberCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * and returns a RemoveMemberCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @throws ParseException if the user input does not conform to the expected formart."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemoveMemberCommandParser implements Parser\u003cRemoveMemberCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemoveMemberCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String memberName \u003d ParserUtil.parseName(args).toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new RemoveMemberCommand(memberName, new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SendMailCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SendMailCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SendMailCommandParser implements Parser\u003cSendMailCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SendMailCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * and returns a SendMailCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SendMailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPIENT, PREFIX_SUBJECT, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECIPIENT, PREFIX_SUBJECT, PREFIX_MESSAGE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SendMailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String recipient \u003d argMultimap.getValue(PREFIX_RECIPIENT).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String subject \u003d argMultimap.getValue(PREFIX_SUBJECT).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String message \u003d argMultimap.getValue(PREFIX_MESSAGE).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new SendMailCommand(recipient, subject, message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignInCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SignInCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.OwnerAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOUNT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class SignInCommandParser implements Parser\u003cSignInCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public SignInCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOUNT, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ACCOUNT, PREFIX_PASSWORD) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignInCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String account \u003d argMultimap.getValue(PREFIX_ACCOUNT).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        OwnerAccount ownerAccount \u003d new OwnerAccount(new Email(account), password);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new SignInCommand(ownerAccount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortSpendingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.SortSpendingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new SortSpendingCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortSpendingParser implements Parser\u003cSortSpendingCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a SortTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortSpendingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortSpendingCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortSpendingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortTaskParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortTaskParser implements Parser\u003cSortTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * and returns a SortTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public SortTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return new SortTaskCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Mailer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.logic.commands.SendMailCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Mailer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public static void sendEmail(String from, String password, String to, String sub, String msg) throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final Logger logger \u003d LogsCenter.getLogger(SendMailCommand.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //Get properties object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //for gmail server need to set this to true (need to provide authentication)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.auth\", \"true\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //in gmail have to provide true value for this key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.starttls.enable\", \"true\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //the email host which in this case is gmail"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.host\", \"smtp.gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //the port is 587 for gmail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        props.put(\"mail.smtp.port\", \"587\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //get Session \u003d\u003e to log in using the email address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Session session \u003d Session.getInstance(props,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                new javax.mail.Authenticator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    protected PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                        return new PasswordAuthentication(from, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //compose message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        MimeMessage message \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setFrom(new InternetAddress(from));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setSubject(sub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        message.setText(msg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //send message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Transport.send(message); //throws an exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Predicate\u003cProject\u003e PREDICATE_SHOW_ALL_PROJECTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Set the current project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setWorkingProject(Project project);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Remove the working project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void removeWorkingProject();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Get the current working project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cProject\u003e getWorkingProject();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Checks if the user performed checkout command before."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    boolean isCheckedOut();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Get list of members in current checked out project."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    List\u003cPerson\u003e getMembers();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email Account for Owner of application \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Checks whether User has signed in using his Email Account"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    boolean isSignedIn();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Lets user signs in with the given Account."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    void signIn(OwnerAccount ownerAccount) throws Exception;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Returns user\u0027s Email Account"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    OwnerAccount getOwnerAccount();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Signs out of the Account"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    void logOut();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project list \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Sets the user prefs\u0027 project list file path."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    void setProjectListFilePath(Path projectListFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces project list data with the data in {@code ProjectList}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    void setProjectList(ReadOnlyProjectList projectList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns the ProjectList */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ReadOnlyProjectList getProjectList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a Project with the same identity as {@code Project} exists in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    boolean hasProject(Project project);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Deletes the given Project."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must exist in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void deleteProject(Project target);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void addProject(Project project);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the given project {@code target} with {@code editedProject}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the project list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The project identity of {@code editedProject} must not be the same as another existing Project in the project list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a given member from every project involved."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * The member must exist in at least one project."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteMember(String name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /** Returns an unmodifiable view of the filtered project list */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getFilteredProjectList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Updates the filter of the filtered Project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 71,
      "ccyccyccy": 9,
      "philipalexanderb": 23,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ProjectList projectList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final FilteredList\u003cProject\u003e filteredProjects;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // this is the current branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Optional\u003cProject\u003e workingProject \u003d Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectList \u003d new ProjectList(projectList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList().sorted(SortingOrder.getCurrentSortingOrderForPerson()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        filteredProjects \u003d new FilteredList\u003c\u003e(this.projectList.getProjectList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ProjectList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Mimic a git checkout action. What it does is simply assign the project as the working"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * project."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param project"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setWorkingProject(Project project) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.workingProject \u003d Optional.of(project);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeWorkingProject() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.workingProject \u003d Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return An Optional object containing the working project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cProject\u003e getWorkingProject() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (workingProject.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return workingProject;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @return If the user checkout to a project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isCheckedOut() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return workingProject.isPresent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cPerson\u003e getMembers() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cPerson\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return members;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Project workingProject \u003d getWorkingProject().get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        addressBook.getPersonList().forEach(person -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (workingProject.hasMember(person)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                members.add(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return userPrefs.getProjectListFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        userPrefs.setProjectListFilePath(projectListFilePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectList(ReadOnlyProjectList projectList) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectList.resetData(projectList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ReadOnlyProjectList getProjectList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList.hasProject(project);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void deleteProject(Project target) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectList.removeProject(target);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        projectList.addProject(project);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectList.setProject(target, editedProject);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        setWorkingProject(editedProject);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String name) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        projectList.deleteMember(name);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_PROJECTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email Account for Owner of application \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private OwnerAccount ownerAccount;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private boolean isSignedIn \u003d false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void signIn(OwnerAccount ownerAccount) throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String account \u003d ownerAccount.getEmail().value;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        String pass \u003d ownerAccount.getPassword();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Mailer.sendEmail(account, pass, \"cs2103t17@gmail.com\", \"SignInCheck\", \"Email Exists and can sign in\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d ownerAccount;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.isSignedIn \u003d true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean isSignedIn() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.isSignedIn;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public OwnerAccount getOwnerAccount() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.ownerAccount;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void logOut() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.ownerAccount \u003d null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.isSignedIn \u003d false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code versionedProjectList}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getFilteredProjectList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return filteredProjects;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        filteredProjects.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 projectList.equals(other.projectList)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 filteredProjects.equals(other.filteredProjects);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 106,
      "ccyccyccy": 21,
      "fadisng": 2,
      "philipalexanderb": 25,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OwnerAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class OwnerAccount {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public OwnerAccount(Email email, String password) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(OwnerAccount ownerAccount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.email.equals(ownerAccount.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        builder.append(\" Email Address: \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getPassword());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.UniqueProjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Duplicates are not allowed (by .isSameProject comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectList implements ReadOnlyProjectList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final UniqueProjectList projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects \u003d new UniqueProjectList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Creates an AddressBook using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectList(ReadOnlyProjectList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the contents of the Project list with {@code Projects}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code Projects} must not contain duplicate Projects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects.setProjects(projects);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void resetData(ReadOnlyProjectList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// Project-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns true if a Project with the same identity as {@code project} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds a Project to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addProject(Project p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the given Project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project identity of {@code editedProject} must not be the same as another existing Project in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(editedProject);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.setProject(target, editedProject);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void removeProject(Project key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        projects.deleteMember(member);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.asUnmodifiableObservableList().size() + \" Projects\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof ProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 projects.equals(((ProjectList) other).projects));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projects.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 112,
      "ccyccyccy": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Unmodifiable view of a projects list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface ReadOnlyProjectList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns an unmodifiable view of the projects list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * This list will not contain any duplicate project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ObservableList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path projectListFilePath \u003d Paths.get(\"data\", \"projectlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        setProjectListFilePath(newUserPrefs.getProjectListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjectListFilePath(Path projectListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(projectListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectListFilePath \u003d projectListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 11,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Budget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.util.SortingOrder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final BigDecimal amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private BigDecimal remainingAmount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Budget should have a name followed by an amount in the form 99.99\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+.\\\\d{1,2}?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMAT \u003d new DecimalFormat(\"#,###.00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget(String name, BigDecimal amount, List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, amount, spendings);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spendings.addAll(spendings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.remainingAmount \u003d calculateRemaining(amount, spendings);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The project has spend on something under this type of budget."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Add a spending object to the list of spendings"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param spending A spending object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addSpending(Spending spending) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spendings.add(spending);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        remainingAmount \u003d remainingAmount.subtract(spending.getSpending());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String amountInString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return DECIMAL_FORMAT.format(amount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BigDecimal getRemainingAmount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return remainingAmount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String remainingAmountInString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return DECIMAL_FORMAT.format(remainingAmount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cSpending\u003e getSpendings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spendings;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BigDecimal calculateRemaining(BigDecimal amount, List\u003cSpending\u003e spendings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal result \u003d new BigDecimal(amount.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : spendings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result \u003d result.subtract(spending.getSpending());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Return is a string is a valid money amount."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Collections.sort(spendings, SortingOrder.getCurrentSortingOrderForSpending());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        sb.append(String.format(\"Budget %s has $%s remaining: \", name, DECIMAL_FORMAT.format(remainingAmount)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : spendings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            sb.append(\"\\n \" + spending.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherBudget.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherBudget.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherBudget.getSpendings().equals(getSpendings());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(name, amount, spendings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 107,
      "fadisng": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Finance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Finance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance(List\u003cBudget\u003e budgets) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cBudget\u003e getBudgets() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cBudget\u003e getBudgetObservableList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ObservableList\u003cBudget\u003e internalList \u003d FXCollections.observableArrayList(budgets);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgets.add(budget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof Finance // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 getBudgets().equals(((Finance) other).getBudgets())); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(budgets);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/finance/Spending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Spending {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final BigDecimal spending;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+.\\\\d{1,2}?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Spending should be in the form of description in text format, amount in xx.xxformat and date in dd/MM/yy format\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMAT \u003d new DecimalFormat(\"#,###.00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Spending(BigDecimal spending, Date date, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(spending, date, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BigDecimal getSpending() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String spendingInString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return DECIMAL_FORMAT.format(spending);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Return is a string is a valid money amount."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Return is a string is a valid date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            DATE_FORMAT.parse(test);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return String.format(\"Spent $%s for %s on %s \", DECIMAL_FORMAT.format(spending), description, DATE_FORMAT.format(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof Spending)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Spending otherSpending \u003d (Spending) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return otherSpending.getSpending().equals(getSpending())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherSpending.getDate().equals(getDate())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 otherSpending.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Objects.hash(description, date, spending);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final TimeTable timeTable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Every field must be present and not null, except for timeTable which can be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Person(Name name, Phone phone, Email email, ProfilePicture profilePicture, Address address, Set\u003cTag\u003e tags, TimeTable timeTable) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public Person(Name name, Phone phone, Email email, ProfilePicture profilePicture, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this(name, phone, email, profilePicture, address, tags, new TimeTable(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return profilePicture;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getProjects() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.projects;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeTable getTimeTable() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeTable;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Timetable field is not included in comparison of equality."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 otherPerson.getProfilePicture().equals(getProfilePicture())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 ((this.getTimeTable() \u003d\u003d null \u0026\u0026 otherPerson.getTimeTable() \u003d\u003d null)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    || otherPerson.getTimeTable().equals(getTimeTable()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return Objects.hash(name, phone, email, profilePicture, address, tags, timeTable);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        builder.append(\" TimeTable: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .append(getTimeTable());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 20,
      "jerryk1997": 16,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ProfilePicture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class ProfilePicture {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            \"File path should not contain special characters, and should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([A-Z|a-z]:\\\\\\\\[^*|\\\"\u003c\u003e?\\\\n]*)|(\\\\\\\\\\\\\\\\.*?\\\\\\\\.*)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public ProfilePicture(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //checkArgument(isValidFilePath(filePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.value \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                || (other instanceof ProfilePicture"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                \u0026\u0026 value.equals(((ProfilePicture) other).value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \"Description should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 29,
      "ccyccyccy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Meeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Represents a meeting in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Meeting(Time time, Description description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        requireAllNonNull(time, description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Meeting meeting \u003d (Meeting) o;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return time.equals(meeting.time)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                \u0026\u0026 Objects.equals(description, meeting.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return Objects.hash(time, description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        builder.append(\"Meeting Description: \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(\"Meeting Time: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Project.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a project in the app."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Project {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Finance finance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Set\u003cMeeting\u003e meeting \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Project(Title name, Description description, List\u003cString\u003e members, List\u003cTask\u003e tasks, Finance finance) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.title \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.finance \u003d finance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Set\u003cMeeting\u003e getListOfMeeting() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return meeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void setListOfMeeting(Set\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.meeting.addAll(meetings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void addNewMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.meeting.add(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance getFinance() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return finance;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean isSameProject(Project project) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.title.equals(project.getTitle().title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cString\u003e getMemberNames() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.members;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setMembers(List\u003cString\u003e members) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.members.addAll(members);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d members.indexOf(member);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            members.remove(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasMember(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return members.contains(person.getName().fullName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 51,
      "ccyccyccy": 7,
      "fadisng": 12,
      "philipalexanderb": 10,
      "jerryk1997": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Represents a Project\u0027s task in the app."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Description description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final Time time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * @param description A description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task(Description description, Time time, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task(Description description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return \"[\" + this.getStatusIcon() + \"] \" + description + \" by \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                \u0026\u0026 otherTask.getTime().equals(getTime())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                \u0026\u0026 otherTask.isDone() \u003d\u003d (isDone());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fadisng": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be written in the following format with valid date and time : dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\\\d\\\\d (2[0-3]|[01]?[0-9])([0-5]?[0-9])$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public final String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Time(String time) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        requireAllNonNull(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.date \u003d formatter.parse(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 40,
      "philipalexanderb": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \"Title should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 30,
      "ccyccyccy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/UniqueProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.exceptions.DuplicateProjectException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.exceptions.ProjectNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * I just copied from UniquePeronList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class UniqueProjectList implements Iterable\u003cProject\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final ObservableList\u003cProject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns true if the list contains an equivalent Project as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean contains(Project toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProject);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Adds a Project to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void add(Project toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Replaces the Project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project identity of {@code editedProject} must not be the same as another existing Project in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!target.isSameProject(editedProject) \u0026\u0026 contains(editedProject)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.set(index, editedProject);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Removes the equivalent Project from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * The Project must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void remove(Project toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new ProjectNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void setProjects(UniqueProjectList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Replaces the contents of this list with {@code projects}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * {@code projects} must not contain duplicate projects."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void setProjects(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        requireAllNonNull(projects);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!projectsAreUnique(projects)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DuplicateProjectException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        internalList.setAll(projects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteMember(String member) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Project project : internalList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            project.deleteMember(member);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ObservableList\u003cProject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Iterator\u003cProject\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                || (other instanceof UniqueProjectList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 internalList.equals(((seedu.address.model.project.UniqueProjectList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Returns true if {@code projects} contains only unique projects."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private boolean projectsAreUnique(List\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c projects.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (projects.get(i).isSameProject(projects.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 113,
      "ccyccyccy": 11,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/DuplicateProjectException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class DuplicateProjectException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public DuplicateProjectException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(\"Operation would result in duplicate projects\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/project/exceptions/ProjectNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Duration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * A class to store time duration in number of days and hours and minutes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class Duration implements Comparable\u003cDuration\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int days;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int hours;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final int minutes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration(int days, int hours, int minutes) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(Duration duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this.days !\u003d duration.days) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.days - duration.days;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else if (this.hours !\u003d duration.hours) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.hours - duration.hours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.minutes - duration.minutes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getDays() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getHours() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return hours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int getMinutes() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return minutes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Duration duration \u003d (Duration) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return days \u003d\u003d duration.days"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 hours \u003d\u003d duration.hours"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 minutes \u003d\u003d duration.minutes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return String.format(\"Days: %d Hours: %d Minutes: %d\", days, hours, minutes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/LessonTypeMapping.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.google.common.collect.BiMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.google.common.collect.HashBiMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class LessonTypeMapping {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static LessonTypeMapping mapping \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private BiMap\u003cString, String\u003e lessonTypeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // private constructor restricted to this class itself"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private LessonTypeMapping() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap \u003d HashBiMap.create();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"LEC\", \"Lecture\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"TUT\", \"Tutorial\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"LAB\", \"Laboratory\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"REC\", \"Recitation\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        lessonTypeMap.put(\"SEC\", \"Sectional Teaching\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String get(String key) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return lessonTypeMap.get(key);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // static method to create instance of Singleton class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static LessonTypeMapping getInstance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (mapping \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            mapping \u003d new LessonTypeMapping();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return mapping;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeRange implements Comparable\u003cTimeRange\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final WeekTime start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final WeekTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"TimeRange should be constructed in the following format : STARTDAY STARTTIME ENDDAY ENDTIME.\\ne.g. MONDAY 1234 TUESDAY 2345\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange(WeekTime start, WeekTime end) throws IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (!rangeIsValid(start, end)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new IllegalValueException(\"start should be earlier than end\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange(DayOfWeek dayStart, LocalTime timeStart, DayOfWeek dayEnd, LocalTime timeEnd) throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(new WeekTime(dayStart, timeStart), new WeekTime(dayEnd, timeEnd));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return end.minus(start);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime getStart() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime getEnd() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange timeRange \u003d (TimeRange) o;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start.equals(timeRange.start)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 end.equals(timeRange.end);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(start, end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Compare by start time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param other Other TimeRange to compare with."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Negative if start earlier, positive if start later."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(TimeRange other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.start.compareTo(other.start);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlap(TimeRange timeRange) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.start.compareTo(timeRange.end) \u003c 0 \u0026\u0026 this.end.compareTo(timeRange.start) \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlapInclusive(TimeRange other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.overlap(other) || this.getEnd().equals(other.getStart()) || this.getStart().equals(other.getEnd());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static boolean rangeIsValid(WeekTime start, WeekTime end) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return start.compareTo(end) \u003c 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return \"From: \" + this.start.toString() + \" To: \" + this.end.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeSlotGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.google.common.collect.Sets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotGenerator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private Collection\u003cTimeTable\u003e timeTables;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private int numberOfHours;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TimeRange userSpecifiedTimeRange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Timeslot generator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeTables List of timetables of all members."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param numberOfHours Must be \u003c\u003d 23 hour"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param userSpecifiedTimeRange TimeRange to generate timeslot within."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotGenerator(Collection\u003cTimeTable\u003e timeTables, int numberOfHours, TimeRange userSpecifiedTimeRange) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeTables \u003d timeTables;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.numberOfHours \u003d numberOfHours;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.userSpecifiedTimeRange \u003d userSpecifiedTimeRange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return List of TimeRange where meeting is possible."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException When unable to generate timeslot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e generate() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e combined \u003d combineTimetables(timeTables);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e merged \u003d mergedOverlappingTimeRanges(combined);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e inverted \u003d getFreeTimeRanges(merged);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e truncated \u003d truncateTimeRanges(inverted, userSpecifiedTimeRange);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e accepted \u003d filterSuitableTimeRanges(truncated, numberOfHours);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(accepted);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return accepted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable generateWithMostPeople() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cTimeTable\u003e set \u003d new HashSet\u003c\u003e(timeTables);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cSet\u003cTimeTable\u003e\u003e powerSet \u003d Sets.powerSet(set);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cSet\u003cTimeTable\u003e\u003e powerList \u003d new ArrayList\u003c\u003e(powerSet);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        powerList.sort((x, y) -\u003e y.size() - x.size()); // Descending order of size"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (Set\u003cTimeTable\u003e possibleTimeTables : powerList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cTimeRange\u003e timeRanges \u003d new TimeSlotGenerator(possibleTimeTables, numberOfHours, userSpecifiedTimeRange).generate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (!timeRanges.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                return new TimeSlotsAvailable(possibleTimeTables, timeRanges);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeSlotsAvailable(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e combineTimetables(Collection\u003cTimeTable\u003e timeTables) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Set\u003cTimeRange\u003e timeRanges \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeTable timeTable : timeTables) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(timeTable.getTimeRanges());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new ArrayList\u003c\u003e(timeRanges);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Merge overlapping TimeRange into 1 TimeRange."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges List of TimeRange."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Merged list of TimeRange."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e mergedOverlappingTimeRanges(Collection\u003cTimeRange\u003e timeRanges) throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRangesList \u003d new ArrayList\u003c\u003e(timeRanges);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(timeRangesList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e merged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRangesList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (merged.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.add(timeRange);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            TimeRange latest \u003d merged.get(merged.size() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (latest.overlapInclusive(timeRange)) { // If last TimeRange in merged overlaps with new latest"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                TimeRange tr \u003d mergeTimeRange(timeRange, latest);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.set(merged.size() - 1, tr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                merged.add(timeRange);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return merged;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Merge 2 TimeRange together, assuming that they overlap."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param r1 TimeRange 1."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param r2 TimeRange 2."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return new merged TimeRange."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException If error in creating new TimeRange."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static TimeRange mergeTimeRange(TimeRange r1, TimeRange r2) throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeRange(r1.getStart().isBefore(r2.getStart()) ? r1.getStart() : r2.getStart(), r1.getEnd().isAfter(r2.getEnd()) ? r1.getEnd() : r2.getEnd());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e getFreeTimeRanges(List\u003cTimeRange\u003e timeRanges) throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Start from MONDAY 0000, to SUNDAY 2359"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e inverted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        DayOfWeek curDay \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime curTime \u003d LocalTime.parse(\"00:00\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime cur \u003d new WeekTime(curDay, curTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            TimeRange toAdd \u003d new TimeRange(cur, timeRange.getStart());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            inverted.add(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            cur \u003d timeRange.getEnd();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        inverted.add(new TimeRange(cur.getDay(), cur.getTime(), DayOfWeek.SUNDAY, LocalTime.parse(\"23:59\")));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return inverted;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e truncateTimeRanges(List\u003cTimeRange\u003e timeRanges, TimeRange limit) throws IllegalValueException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e truncated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (!timeRange.overlap(limit)) { // Start after end"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            WeekTime start \u003d timeRange.getStart().isBefore(limit.getStart()) ? limit.getStart() : timeRange.getStart();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            WeekTime end \u003d timeRange.getEnd().isAfter(limit.getEnd()) ? limit.getEnd() : timeRange.getEnd();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            truncated.add(new TimeRange(start, end));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return truncated;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static List\u003cTimeRange\u003e filterSuitableTimeRanges(List\u003cTimeRange\u003e timeRanges, int numberOfHours) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e possibleRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (TimeRange timeRange : timeRanges) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (timeRange.getDuration().compareTo(new Duration(0, numberOfHours, 0)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                possibleRanges.add(timeRange);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return possibleRanges;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeSlotsAvailable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotsAvailable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final Collection\u003cTimeTable\u003e timeTables;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final List\u003cTimeRange\u003e timeRanges;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final boolean isEmpty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(Collection\u003cTimeTable\u003e timeTables, List\u003cTimeRange\u003e timeRanges) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(timeTables, timeRanges, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(boolean isEmpty) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this(null, null, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeSlotsAvailable(Collection\u003cTimeTable\u003e timeTables, List\u003cTimeRange\u003e timeRanges, boolean isEmpty) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeTables \u003d timeTables;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRanges \u003d timeRanges;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.isEmpty \u003d isEmpty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Collection\u003cTimeTable\u003e getTimeTables() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeTables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRanges() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return isEmpty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeTable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private List\u003cTimeRange\u003e timeRanges;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Takes in a formatted string of timings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param timeRanges List of TimeRange to populate the timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeTable(List\u003cTimeRange\u003e timeRanges) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRanges \u003d timeRanges;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        Collections.sort(this.timeRanges);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRanges() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isAvailable(TimeRange timeRange) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.timeRanges.stream().noneMatch(tr -\u003e tr.overlap(timeRange));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean overlaps(TimeRange timeRange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.timeRanges.stream().anyMatch(timeRange::overlap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable timeTable \u003d (TimeTable) o;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges.equals(timeTable.timeRanges);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(timeRanges);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.getTimeRanges().stream().map(Object::toString).collect(Collectors.joining(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeTableInput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeTableInput {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeTable getTabletableFromFilepath(String absoluteFilepath) throws IOException, ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String content \u003d new Scanner(new File(absoluteFilepath)).useDelimiter(\"\\\\Z\").next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return ParserUtil.parseTimeTable(content);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param url URL of NUSMods shared timetable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @return Retrieved {@code TimeTable}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IOException URL parsing error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException Cannot find lesson grouping on NUSMods"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeTable getTimetableFromUrl(URL url) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String urlString \u003d url.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int semMatch \u003d urlString.toString().indexOf(\"sem-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int sem \u003d Integer.parseInt(urlString.substring(semMatch + 4, semMatch + 5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int start \u003d urlString.indexOf(\"share?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String relevantInfo \u003d urlString.substring(start + 6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String[] splitted \u003d relevantInfo.split(\"\u0026\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (String moduleString : splitted) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String[] moduleCodePartition \u003d moduleString.split(\"\u003d\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            if (moduleCodePartition.length \u003c 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String moduleCode \u003d moduleCodePartition[0].toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String rest \u003d moduleCodePartition[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cString\u003e lessonTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            List\u003cString\u003e groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String[] timings \u003d rest.split(\",\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (String timing : timings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                String[] typeAndGroup \u003d timing.split(\":\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                lessonTypes.add(LessonTypeMapping.getInstance().get(typeAndGroup[0]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                groups.add(typeAndGroup[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(getTimeRangesForModule(moduleCode, groups, lessonTypes, sem));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new TimeTable(timeRanges);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Send HTTP GET request here, return list of timeRange for that particular module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param moduleCode e.g. CS1101S"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param groups List of groups. Each index of list must correspond with that of lessonTypes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param lessonTypes List of lessonTypes. Can be found on left side of mapping in {@code LessonTypeMapping.java}. Each index of list must correspond with that of groups."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param sem e.g. 1 or 2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRangesForModule(String moduleCode, List\u003cString\u003e groups, List\u003cString\u003e lessonTypes, int sem) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        URL url \u003d new URL(\"https://api.nusmods.com/v2/2019-2020/modules/\" + moduleCode.toUpperCase() + \".json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        JsonNode root \u003d objectMapper.readTree(url);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.addAll(getTimeRangeFromEntry(root, groups.get(i), lessonTypes.get(i), sem));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Given JSON data, get time ranges for a certain class group. Possible to have more than 1 time range for a single combination of class group and lesson type of a module."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param moduleNode Slice of JsonNode for that particular module."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param group Class group. e.g. 8"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param lessonType Type of lession. Can be found on left side of mapping in {@code LessonTypeMapping.java}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @param sem either 1 or 2"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public List\u003cTimeRange\u003e getTimeRangeFromEntry(JsonNode moduleNode, String group, String lessonType, int sem) throws IllegalValueException, JsonProcessingException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cJsonNode\u003e targets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        moduleNode.path(\"semesterData\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .path(sem - 1) // Sem 1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .path(\"timetable\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                .forEach(node -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    if (node.path(\"classNo\").asText().equals(group) \u0026\u0026 node.path(\"lessonType\").asText().equals(lessonType)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        targets.add(node);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (targets.size() \u003c 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            // System.out.println(String.format(\"Group:%s,LessonType:%s,sem:%d\", group, lessonType, sem));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            throw new IllegalValueException(\"No such lesson exists\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Possible to have more than"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (JsonNode lesson : targets) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String day \u003d lesson.path(\"day\").asText().toUpperCase();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String startTime \u003d lesson.path(\"startTime\").asText();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            String endTime \u003d lesson.path(\"endTime\").asText();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.add(ParserUtil.parseTimeRange(day + \" \" + startTime + \" \" + day + \" \" + endTime));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRanges;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/TimeTableVisualization.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeTableVisualization {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private TimeTable timeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private static final int SPACES_BETWEEN_DAY_AND_TIMETABLE \u003d 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeTableVisualization(TimeTable timeTable) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeTable \u003d timeTable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String visualize() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.add(getHeader());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.add(getBody());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 0 -- 23"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 4 dash per hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // Should look like this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // 0000 0100 0200 0300"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    // -------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getHeader() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"  \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(getIndentation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            sj.add(String.format(\"%02d\", i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(sj.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(getIndentation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24 * 4; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.append(\"_\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getBody() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringJoiner result \u003d new StringJoiner(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.add(getDayString(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getDayString(int dayOfWeek) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        // Right pad with space"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        DayOfWeek day \u003d DayOfWeek.of(dayOfWeek);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        String dayString \u003d String.format(\"%-\" + SPACES_BETWEEN_DAY_AND_TIMETABLE + \"s\", day.toString().substring(0, 3));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        result.append(dayString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange dummyTimerange;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c 24; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            for (int j \u003d 0; j \u003c\u003d 3; j++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                dummyTimerange \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                if (j !\u003d 3) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(String.format(\"%02d:%02d\", i, j * 15)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(String.format(\"%02d:%02d\", i, (j + 1) * 15)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                } else if (i !\u003d 23) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(String.format(\"%02d:45\", i)),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(String.format(\"%02d:00\", i + 1)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        dummyTimerange \u003d new TimeRange(day, LocalTime.parse(\"23:45\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                                day, LocalTime.parse(\"23:59\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                result.append((dummyTimerange !\u003d null) \u0026\u0026 this.timeTable.overlaps(dummyTimerange) ? \"-\" : \" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private String getIndentation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (int i \u003d 0; i \u003c SPACES_BETWEEN_DAY_AND_TIMETABLE; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            result.append(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/WeekTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class WeekTime implements Comparable\u003cWeekTime\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public WeekTime(DayOfWeek day, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime weekTime \u003d (WeekTime) o;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return day \u003d\u003d weekTime.day"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                \u0026\u0026 time.equals(weekTime.time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return Objects.hash(day, time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public int compareTo(WeekTime weekTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (this.day !\u003d weekTime.day) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            return this.day.getValue() - weekTime.day.getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.time.compareTo(weekTime.time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isAfter(WeekTime weekTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.compareTo(weekTime) \u003e 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public boolean isBefore(WeekTime weekTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.compareTo(weekTime) \u003c 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return this.day.toString() + \" \" + this.time.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public Duration minus(WeekTime other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int diffInMinutes \u003d this.getDay().getValue() * (24 * 60) + this.getTime().getHour() * 60 + this.getTime().getMinute()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                - other.getDay().getValue() * (24 * 60) - other.getTime().getHour() * 60 - other.getTime().getMinute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int days \u003d diffInMinutes / (24 * 60);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        diffInMinutes \u003d diffInMinutes % (24 * 60);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int hours \u003d diffInMinutes / 60;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        int minutes \u003d diffInMinutes % 60;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return new Duration(days, hours, minutes);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ProjectList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.project.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.model.finance.Spending.DATE_FORMAT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProfilePicture profilePicture \u003d new ProfilePicture(\"docs/empty_profile_picture.png\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"), profilePicture,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static List\u003cTask\u003e getTaskList(Task... tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            list.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static List\u003cBudget\u003e getBudgetList(Budget... budgets) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Arrays.stream(budgets)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static List\u003cSpending\u003e getSpendingList(Spending... spendings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return Arrays.stream(spendings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new Project[]{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new Project(new Title(\"CS2103T\"), new Description(\"The mod that takes most time\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                        getTaskList(new Task(new Description(\"Finish GUI\"), new Time(\"04/04/1997 1600\"), false),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                new Task(new Description(\"Finish Parser\"), new Time(\"04/04/1997 1600\"), true)),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        new Finance(getBudgetList(new Budget(\"Team building\", new BigDecimal(\"500.00\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                        getSpendingList(new Spending(new BigDecimal(\"50.50\"), DATE_FORMAT.parse(\"10/10/2019 1800\"), \"order in pizza\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                                new Spending(new BigDecimal(\"200.50\"), DATE_FORMAT.parse(\"12/10/2019 1800\"), \"Went for Zoukout\"))),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                new Budget(\"Venue\", new BigDecimal(\"200.00\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                                        getSpendingList(new Spending(new BigDecimal(\"20.00\"), DATE_FORMAT.parse(\"14/10/2019 1800\"), \"booked conference room for discussion\")))))),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new Project(new Title(\"GER1000\"), new Description(\"Free and easy\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                        getTaskList(new Task(new Description(\"Finish Quiz 10\"), new Time(\"04/04/1997 1600\"), false)), new Finance()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return new Project[]{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                new Project(new Title(\"CS2103T\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Description(\"The mod that takes most time\"), new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                        getTaskList(new Task(new Description(\"Finish GUI\"), false)), new Finance())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static ReadOnlyProjectList getSampleProjectList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectList samplePl \u003d new ProjectList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Project project : getSampleProjects()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            samplePl.addProject(project);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return samplePl;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 46,
      "ccyccyccy": 1,
      "fadisng": 17,
      "jerryk1997": 9,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SortingOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Container class to store the current and different types of sorting orders."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": "public class SortingOrder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cTask\u003e currentSortingOrderForTask \u003d Comparator.comparing(task -\u003e task.getTime().getDate());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cString\u003e currentSortingOrderForMember \u003d Comparator.comparing(String::toString);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cPerson\u003e currentSortingOrderForPerson \u003d Comparator.comparing(person -\u003e person.getName().fullName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private static Comparator\u003cSpending\u003e currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getDate());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByAlphabeticalOrder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e task1.getDescription().description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .compareToIgnoreCase(task2.getDescription().description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d Comparator.comparing(task -\u003e task.getTime().getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e Boolean.compare(task1.isDone(), task2.isDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentTaskSortingOrderByDoneThenDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForTask \u003d (task1, task2) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            if (task1.isDone() \u003d\u003d task2.isDone()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return task1.getTime().getDate().compareTo(task2.getTime().getDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                return Boolean.compare(task1.isDone(), task2.isDone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByAlphabeticalOrder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForSpending \u003d (spending1, spending2) -\u003e spending1.getDescription().compareToIgnoreCase(spending2.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static void setCurrentSpendingSortingOrderByExpense() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        currentSortingOrderForSpending \u003d Comparator.comparing(spending -\u003e spending.getSpending());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cTask\u003e getCurrentSortingOrderForTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cString\u003e getCurrentSortingOrderForMember() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForMember;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cPerson\u003e getCurrentSortingOrderForPerson() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static Comparator\u003cSpending\u003e getCurrentSortingOrderForSpending() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return currentSortingOrderForSpending;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedSpending\u003e spendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given {@code name, @code amount, @code remainingAmount, @code spendings}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount, @JsonProperty(\"spendings\") List\u003cJsonAdaptedSpending\u003e spendings) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(name, amount, spendings);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spendings.addAll(spendings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : source.getSpendings()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            spendings.add(new JsonAdaptedSpending(spending));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cJsonAdaptedSpending\u003e getSpendings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spendings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted Budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Budget."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Budget.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BigDecimal resultDouble \u003d new BigDecimal(amount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cSpending\u003e resultSpendings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedSpending spending : spendings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultSpendings.add(spending.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Budget(name, resultDouble, resultSpendings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFinance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Finance}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedFinance {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e budgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedFinance} with the given {@code budgets}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedFinance(@JsonProperty(\"budgets\") List\u003cJsonAdaptedBudget\u003e budgets) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budgets.addAll(budgets);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Finance} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedFinance(Finance source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : source.getBudgets()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            budgets.add(new JsonAdaptedBudget(budget));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public List\u003cJsonAdaptedBudget\u003e getBudgets() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted Finance object into the model\u0027s {@code Finance} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Finance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Finance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        List\u003cBudget\u003e resultBudget \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedBudget budget : budgets) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultBudget.add(budget.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Finance(resultBudget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMeeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"time\") String time, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        time \u003d source.getTime().time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //@JsonValue \u003d\u003e is for the key : value pairs mapping, there can only be one in each json file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    //@JsonValue"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if ((!Time.isValidTime(time)) || (!Description.isValidDescription(description))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS + \" \" + Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Time time \u003d new Time(this.time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Description description \u003d new Description(this.description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        return new Meeting(time, description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "philipalexanderb": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeTable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final String profilePicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final List\u003cJsonAdaptedTimeRange\u003e timetable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"profilePicture\") String profilePicture,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"address\") String address, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                             @JsonProperty(\"projects\") List\u003cString\u003e projects, @JsonProperty(\"timetable\") List\u003cJsonAdaptedTimeRange\u003e timetable) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (projects !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.projects.addAll(projects);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (timetable !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            this.timetable.addAll(timetable);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d source.getProfilePicture().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        projects.addAll(source.getProjects());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        if (source.getTimeTable() !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timetable.addAll(source.getTimeTable().getTimeRanges().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    .map(JsonAdaptedTimeRange::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (!ProfilePicture.isValidFilePath(profilePicture)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            throw new IllegalValueException(ProfilePicture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        final ProfilePicture modelProfilePicture \u003d new ProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e modelProjectList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelProjectList.addAll(projects);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e timeRanges \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        for (JsonAdaptedTimeRange timeRange : timetable) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "            timeRanges.add(timeRange.toModelType());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        final TimeTable timeTable \u003d new TimeTable(timeRanges);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelProfilePicture, modelAddress, modelTags, timeTable);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getProjects().addAll(modelProjectList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 18,
      "jerryk1997": 20,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Finance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final JsonAdaptedFinance finance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description, @JsonProperty(\"members\") List\u003cString\u003e members,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                              @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks, @JsonProperty(\"meetingList\") List\u003cJsonAdaptedMeeting\u003e meetingList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                              @JsonProperty(\"finance\") JsonAdaptedFinance finance) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (members !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            this.members.addAll(members);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        if (meetingList !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            this.meetingList.addAll(meetingList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.finance \u003d finance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        members.addAll(source.getMemberNames());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        tasks.addAll(source.getTasks().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fadisng"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        meetingList.addAll(source.getListOfMeeting().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .map(JsonAdaptedMeeting::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        finance \u003d new JsonAdaptedFinance(source.getFinance());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Project toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        for (JsonAdaptedTask task : tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fadisng"
        },
        "content": "            taskList.add(task.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cString\u003e modelPersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String person : members) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            modelPersonList.add(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final List\u003cTask\u003e modelTasks \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        //need to convert the List\u003cJsonAdaptedMeeting\u003e to List\u003cMeeting\u003e then put it in the Set\u003cMeeting\u003e and set it to the given project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        final List\u003cMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (JsonAdaptedMeeting meeting : meetingList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetings.add(meeting.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        final Finance modelFinance \u003d finance.toModelType();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Project project \u003d new Project(modelTitle, modelDescription, modelPersonList, modelTasks, modelFinance);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        Set\u003cMeeting\u003e meetingsList \u003d new HashSet\u003c\u003e(meetings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        project.setListOfMeeting(meetingsList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58,
      "ccyccyccy": 1,
      "fadisng": 17,
      "philipalexanderb": 18,
      "jerryk1997": 8,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSpending.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.model.finance.Spending.DATE_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Jackson-friendly version of {@link Spending}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonAdaptedSpending {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String spending;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonAdaptedSpending} with the given {@code spending, @code date, @code description}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedSpending(@JsonProperty(\"spending\") String spending, @JsonProperty(\"date\") String date, @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireAllNonNull(spending, date, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.spending \u003d spending;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getSpending() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return spending;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code Spending} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonAdaptedSpending(Spending source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        spending \u003d source.getSpending().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        date \u003d DATE_FORMAT.format(source.getDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this Jackson-friendly adapted spending object into the model\u0027s {@code Spending} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Spending."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Spending toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Date result \u003d new Date();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Spending.isValidAmount(spending)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!Spending.isValidDate(date)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new IllegalValueException(Spending.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            result \u003d DATE_FORMAT.parse(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return new Spending(new BigDecimal(spending), result, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fadisng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import seedu.address.model.project.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fadisng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fadisng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fadisng"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fadisng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fadisng"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given {@code description, time and isDone}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\")String description, @JsonProperty(\"time\")String time, @JsonProperty(\"isDone \")boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        description \u003d source.description.description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        time \u003d source.time.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        isDone \u003d source.isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fadisng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fadisng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public Task toModelType() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fadisng"
        },
        "content": "        return new Task(modelDescription, modelTime, isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fadisng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTimeRange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.model.timetable.TimeRange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " * Jackson-friendly version of {@link TimeRange}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "class JsonAdaptedTimeRange {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    private final String timeRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Constructs a {@code JsonAdaptedTimeRange} with the given {@code timeRange}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public JsonAdaptedTimeRange(String timeRange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Converts a given {@code TimeRange} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public JsonAdaptedTimeRange(TimeRange source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeRange \u003d source.getStart().getDay().toString() + \" \" + source.getStart().getTime().format(DateTimeFormatter.ofPattern(\"HHmm\")) + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + source.getEnd().getDay().toString() + \" \" + source.getEnd().getTime().format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public String getTimerange() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return timeRange;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * Converts this Jackson-friendly adapted timeRange object into the model\u0027s {@code TimeRange} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted timeRange."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public TimeRange toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        return ParserUtil.parseTimeRange(timeRange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonProjectListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * A class to access ProjectList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class JsonProjectListStorage implements ProjectListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonProjectListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return readProjectList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Similar to {@link #readProjectList()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Optional\u003cJsonSerializableProjectList\u003e jsonProjectList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                filePath, JsonSerializableProjectList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (jsonProjectList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return Optional.of(jsonProjectList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        } catch (IllegalValueException | ParseException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Similar to {@link #saveProjectList(ReadOnlyProjectList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(projectList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectList(projectList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 71,
      "philipalexanderb": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableProjectList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ProjectList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An Immutable ProjectList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "@JsonRootName(value \u003d \"projectlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "class JsonSerializableProjectList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Project list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectList} with the given projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonSerializableProjectList(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProjectList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public JsonSerializableProjectList(ReadOnlyProjectList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Converts this project list into the model\u0027s {@code ProjectList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public ProjectList toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectList projectList \u003d new ProjectList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (projectList.hasProject(project)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectList.addProject(project);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 58,
      "philipalexanderb": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ProjectListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ProjectList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface ProjectListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Returns ProjectList data as a {@link ReadOnlyProjectList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see #getProjectListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @param projectList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see #saveProjectList(ReadOnlyProjectList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ProjectListStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d Project List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Path getProjectListFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    void saveProjectList(ReadOnlyProjectList projectList) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 12,
      "jerryk1997": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.ReadOnlyProjectList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectListStorage projectListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                          ProjectListStorage projectListStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projectListStorage \u003d projectListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static String copyImageToData(File file, String personName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String fileExtension \u003d FilenameUtils.getExtension(file.getPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String destPath \u003d \"data/\" + personName.replaceAll(\" \", \"_\") + \".\" + fileExtension;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            byte[] fileContent \u003d FileUtils.readFileToByteArray(file);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            String encodedString \u003d Base64.getEncoder().encodeToString(fileContent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            File outputFile \u003d new File(destPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            byte[] decodedBytes \u003d Base64.getDecoder().decode(encodedString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            FileUtils.writeByteArrayToFile(outputFile, decodedBytes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return destPath;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Path getProjectListFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListStorage.getProjectListFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return readProjectList(projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public Optional\u003cReadOnlyProjectList\u003e readProjectList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return projectListStorage.readProjectList(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        saveProjectList(projectList, projectListStorage.getProjectListFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public void saveProjectList(ReadOnlyProjectList projectList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListStorage.saveProjectList(projectList, filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32,
      "jerryk1997": 21,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BudgetListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"BudgetListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ListView\u003cBudget\u003e budgetListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox wrapper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetListPanel(ObservableList\u003cBudget\u003e budgetList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgetListView.setItems(budgetList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        budgetListView.setCellFactory(listView -\u003e new BudgetListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Budget} using a {@code BudgetPieChart}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class BudgetListViewCell extends ListCell\u003cBudget\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        protected void updateItem(Budget budget, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            super.updateItem(budget, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (empty || budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(new BudgetPieChart(budget, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Spending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class BudgetPieChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"BudgetPieChart.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox wrapper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public BudgetPieChart(Budget budget, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        Double remaining \u003d budget.getRemainingAmount().doubleValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (remaining \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(\"Overshot by: $\", Math.abs(remaining)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(\"Remaining: $\", remaining));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Spending spending : budget.getSpendings()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            pieChartData.add(new PieChart.Data(spending.getDescription() + \": $\" + spending.getSpending().doubleValue(), spending.getSpending().doubleValue()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        wrapper.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        cardPane.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setData(pieChartData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setTitle(budget.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        pieChart.setLabelsVisible(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof BudgetPieChart)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        BudgetPieChart pieChart \u003d (BudgetPieChart) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return budget.equals(pieChart.budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 3,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t17-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fadisng": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.logic.UiEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import static seedu.address.logic.commands.CheckoutCommand.MESSAGE_CHECKOUT_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private State currentState \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private BudgetListPanel budgetListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectListPanel projectListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ProjectOverview projectOverview;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox projectList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox budgetList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private StackPane budgetListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        logic.addUiEvent(new UiEvent(State.PROJECT_LIST, Optional.empty()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListPanel \u003d new ProjectListPanel(logic.getFilteredProjectList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Display the previous Ui."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private void handleBack() throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        State temp \u003d currentState;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (currentState \u003d\u003d State.PROJECT_LIST) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            throw new CommandException(\"Oops can\u0027t go back any further!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        UiEvent event \u003d logic.getPreviousEvent();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!event.getProjectIndex().isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logic.setWorkingProject(logic.getFilteredProjectList().get(event.getProjectIndex().get()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        changeUiDisplay(event.getState());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        switch (event.getState()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_LIST:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (!logic.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                logic.removeWorkingProject();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logger.severe(currentState + \"\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (temp !\u003d State.ADDRESS_BOOK) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"You\u0027ve checked out of the project!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_OVERVIEW:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            resultDisplay.setFeedbackToUser(String.format(MESSAGE_CHECKOUT_SUCCESS, logic.getFilteredProjectList().get(event.getProjectIndex().get()).toString()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            assert false : \"Unrecognised previous state\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            String commandWord \u003d commandResult.getCommandWord();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            // Only change Ui if certain command demands it"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (commandResult.changeNeeded()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                State nextState \u003d stateOf(commandWord);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (logic.getWorkingProject().isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    logic.addUiEvent(new UiEvent(nextState, Optional.empty()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    int projectIndex \u003d logic.getFilteredProjectList().indexOf(logic.getWorkingProject().get());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    logic.addUiEvent(new UiEvent(nextState, Optional.of(projectIndex)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                changeUiDisplay(nextState);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                // if not needed refresh current page unless is back command"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                if (!commandWord.equals(\"back\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    changeUiDisplay(currentState);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (commandResult.isBack()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                handleBack();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void changeUiDisplay(State nextState) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (nextState) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        case ADDRESS_BOOK:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(personListPanel.getRoot());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        case PROJECT_LIST:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(projectListPanel.getRoot());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_OVERVIEW:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectOverview \u003d new ProjectOverview(logic.getFilteredProjectList(), logic.getWorkingProject().get());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(projectOverview.getRoot());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case PROJECT_FINANCE:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            budgetListPanel \u003d new BudgetListPanel(logic.getWorkingProject().get().getFinance().getBudgetObservableList());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            projectListPanelPlaceholder.getChildren().setAll(budgetListPanel.getRoot());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            currentState \u003d nextState;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Unrecognised state\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    private State stateOf(String commandWord) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        State state \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case AddProjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_LIST;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        case GenerateSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_OVERVIEW;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            state \u003d State.PROJECT_FINANCE;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            state \u003d State.ADDRESS_BOOK;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"Unrecognised Command\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 95,
      "jerryk1997": 1,
      "-": 231
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.input.DragEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.scene.input.TransferMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label projectHeader;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane projects;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonCard(Person person, int displayedIndex, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d new File(person.getProfilePicture().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            Image img \u003d new Image(new FileInputStream(imgFile));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            profilePicture.setImage(img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getProjects().stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(project -\u003e projects.getChildren().add(new Label(project)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        projectHeader.setText(\"Projects:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void handleDragOver(DragEvent event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        if (event.getDragboard().hasFiles()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            event.acceptTransferModes(TransferMode.COPY_OR_MOVE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private void handleDrop(DragEvent event) throws FileNotFoundException, CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        List\u003cFile\u003e files \u003d event.getDragboard().getFiles();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        File imgFile \u003d files.get(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        Image img \u003d new Image(new FileInputStream(imgFile));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture.setImage(img);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        logic.executeImageDrop(imgFile, person);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 1,
      "jerryk1997": 40,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, Logic logic) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1, logic).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 8,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label meetingTitle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectCard(Project project, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setText(project.getTitle().title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description.setText(project.getDescription().description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof ProjectCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectCard card \u003d (ProjectCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u0026\u0026 project.equals(card.project);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void displayMeeting(FlowPane meetings, Project project) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cMeeting\u003e listOfMeetings \u003d new ArrayList\u003cMeeting\u003e(project.getListOfMeeting());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int meetingCount \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        listOfMeetings.sort(Comparator.comparing(m -\u003e m.getTime().getDate()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Meeting meeting: listOfMeetings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetings.getChildren().add(new Label(\"    \" + meetingCount++ + \". \" + meeting.getDescription().description + \" \" + meeting.getTime().time));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 62,
      "philipalexanderb": 17,
      "fadisng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProjectListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ListView\u003cProject\u003e projectListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectListPanel(ObservableList\u003cProject\u003e projectList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListView.setItems(projectList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        projectListView.setCellFactory(listView -\u003e new ProjectListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    class ProjectListViewCell extends ListCell\u003cProject\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        protected void updateItem(Project project, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            super.updateItem(project, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            if (empty || project \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                setGraphic(new ProjectCard(project, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 44,
      "jerryk1997": 2,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProjectOverview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.finance.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import seedu.address.model.project.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.model.project.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public class ProjectOverview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private static final String FXML \u003d \"ProjectOverview.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final Project project;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public final ObservableList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private ScrollPane cardPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label memberTitle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane members;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private Label taskTitle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    private Label meetingTitle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private FlowPane meetings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    private VBox wrapper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public ProjectOverview(ObservableList\u003cProject\u003e projects, Project project) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.projects \u003d projects;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        this.project \u003d projects.filtered(x -\u003e x.getTitle() \u003d\u003d project.getTitle()).get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        cardPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        title.setText(project.getTitle().title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        description.setText(project.getDescription().description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        memberTitle.setText(\"Members:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        members.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        members.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        project.getMemberNames().forEach(member -\u003e members.getChildren().add(new Label(member)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Task task : project.getTasks()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            tasks.getChildren().add(new Label(\"    \" + ++count + \". \" + task.toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        taskTitle.setText(\"Tasks: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        tasks.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        meetingTitle.setText(\"Meetings: \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        displayMeeting(meetings, this.project);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Defining the x axis"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        xAxis.setCategories(FXCollections.observableArrayList(project.getFinance().getBudgetObservableList().stream().map(x -\u003e x.getName()).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        xAxis.setLabel(\"budgets\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Defining the y axis"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Creating the Bar chart"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        StackedBarChart\u003cString, Number\u003e stackedBarChart \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                new StackedBarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        stackedBarChart.setTitle(\"Budget Summary\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Prepare XYChart.Series objects by setting data"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e amountSpent \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        amountSpent.setName(\"Amount spent\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e remainingAmount \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        remainingAmount.setName(\"Amount remaining\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        for (Budget budget : project.getFinance().getBudgetObservableList()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            amountSpent.getData().add(new XYChart.Data\u003c\u003e(budget.getName(), budget.getAmount().subtract(budget.getRemainingAmount())));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            remainingAmount.getData().add(new XYChart.Data\u003c\u003e(budget.getName(), budget.getRemainingAmount()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Setting the data to bar chart"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        stackedBarChart.getData().addAll(amountSpent, remainingAmount);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        //Add the chart to the HBox"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        wrapper.getChildren().add(stackedBarChart);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    public void displayMeeting(FlowPane meetings, Project project) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetings.setOrientation(Orientation.VERTICAL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        meetings.setPrefWrapLength(100);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        List\u003cMeeting\u003e listOfMeetings \u003d new ArrayList\u003cMeeting\u003e(project.getListOfMeeting());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        int meetingCount \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        listOfMeetings.sort(Comparator.comparing(m -\u003e m.getTime().getDate()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        for (Meeting meeting: listOfMeetings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            meetings.getChildren().add(new Label(\"    \" + meetingCount++ + \". \" + meeting.getDescription().description + \" \" + meeting.getTime().time));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        if (!(other instanceof ProjectOverview)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        ProjectOverview card \u003d (ProjectOverview) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        return project.equals(card.project);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 126,
      "philipalexanderb": 17,
      "jerryk1997": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    ADDRESS_BOOK,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    PROJECT_LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    PROJECT_OVERVIEW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    PROJECT_FINANCE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 3,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BudgetListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003cListView fx:id\u003d\"budgetListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 16
    }
  },
  {
    "path": "src/main/resources/view/BudgetPieChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"320\" prefWidth\u003d\"320\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003cVBox fx:id\u003d\"wrapper\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "             \u003cPieChart id\u003d\"pieChart\" fx:id\u003d\"pieChart\" legendSide\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 19
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    -fx-font-family: \"monospaced\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#cardPane .label {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#members {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "#members .label {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fadisng"
        },
        "content": "#tasks .label {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fadisng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "#meetings .label {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "#projects {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#projects .label {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #053E6F;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-min-width: 300pt;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-legend .label {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 8pt;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".data0.chart-pie { -fx-pie-color: turquoise; }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-stroke: white;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".chart-pie-label { /*this is what you need for labels*/"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#project-overview {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "#project-overview .label {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-size: 1.4em;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-tick-label-fill: white;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-tick-length: 20;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    -fx-minor-tick-length: 10;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 46,
      "ccyccyccy": 1,
      "fadisng": 2,
      "philipalexanderb": 7,
      "jerryk1997": 18,
      "-": 368
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cVBox fx:id\u003d\"projectList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onDragDropped\u003d\"#handleDrop\" onDragOver\u003d\"#handleDragOver\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"150.0\" prefWidth\u003d\"147.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "         \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"147.0\" layoutX\u003d\"73.0\" layoutY\u003d\"75.0\" nodeOrientation\u003d\"INHERIT\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" x\u003d\"73.0\" y\u003d\"75.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"projectHeader\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$projectHeader\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"projects\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7,
      "-": 49
    }
  },
  {
    "path": "src/main/resources/view/ProjectListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32,
      "jerryk1997": 2
    }
  },
  {
    "path": "src/main/resources/view/ProjectListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cListView fx:id\u003d\"projectListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 8
    }
  },
  {
    "path": "src/main/resources/view/ProjectOverview.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cScrollPane id\u003d\"project-overview\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1 VGrow\u003dALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003cVBox id\u003d\"project-overview\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cLabel fx:id\u003d\"meetingTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$meetingTitle\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "                \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "philipalexanderb"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"meetings\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" orientation\u003d\"vertical\" prefWrapLength\u003d\"55\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"memberTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$memberTitle\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "                \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"members\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cLabel fx:id\u003d\"taskTitle\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$taskTitle\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tasks\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\"Finance\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003cVBox id\u003d\"bar-chart\" fx:id\u003d\"wrapper\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 42,
      "philipalexanderb": 6
    }
  },
  {
    "path": "src/main/resources/view/ProjectWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "      \u003cMenuBar BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_AMY \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String VALID_PROFILE_PICTURE_BOB \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_AMY \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public static final String PROFILE_PICTURE_DESC_BOB \u003d \" \" + PREFIX_FILE_PATH + VALID_PROFILE_PICTURE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (CommandException | IllegalValueException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, \"Command word placeholder\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 4,
      "jerryk1997": 4,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "///**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "///**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "///**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "///**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "// */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 7,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException | java.text.ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "        } catch (ParseException | java.text.ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/member/Member.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "package seedu.address.model.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/TimeRangeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeRangeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_startBeforeEnd_successful() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_endBeforeStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void constructor_startEqualEnd_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_differentDay_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.SATURDAY, start, DayOfWeek.SATURDAY, end);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_sameDayOverlap_returnsTrue() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"08:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertTrue(tr3.overlap(tr1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void overlap_sameDayNoOverlap_returnsFalse() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr1 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"14:00\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr2 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        start \u003d LocalTime.parse(\"08:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        end \u003d LocalTime.parse(\"10:00\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeRange tr3 \u003d new TimeRange(DayOfWeek.FRIDAY, start, DayOfWeek.FRIDAY, end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr1.overlap(tr3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr2.overlap(tr3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertFalse(tr3.overlap(tr2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void equals_sameContentDifferentObject_equal() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void equals_differentContentDifferentObject_notEqual() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"11:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.MONDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertNotEquals(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"10:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/TimeSlotGeneratorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class TimeSlotGeneratorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForSingleTimetable() throws IllegalValueException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable timeTable \u003d ParserUtil.parseTimeTable(\"MONDAY 1300 MONDAY 1500\\nMONDAY 1400 MONDAY 1600\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                + \"MONDAY 1700 MONDAY 1900\\nTUESDAY 0900 TUESDAY 1200\\nWEDNESDAY 1000 WEDNESDAY 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeTable\u003e timeTables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(timeTable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timeTables, 2,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:00\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForMultipleTimetables() throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t1 \u003d ParserUtil.parseTimeTable(\"MONDAY 1400 MONDAY 1600\\nTUESDAY 0900 TUESDAY 1200\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t2 \u003d ParserUtil.parseTimeTable(\"MONDAY 1300 MONDAY 1500\\nMONDAY 1700 MONDAY 1900\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t3 \u003d ParserUtil.parseTimeTable(\"WEDNESDAY 1000 WEDNESDAY 1500\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeTable\u003e timeTables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timeTables, 2,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:00\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:00\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:00\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:00\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:00\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_validTimeRanges_generatesCorrectTimeslotForMultipleTimetablesWithMinutes() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:35\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:31\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t1 \u003d ParserUtil.parseTimeTable(\"MONDAY 1412 MONDAY 1634\\nTUESDAY 0923 TUESDAY 1255\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t2 \u003d ParserUtil.parseTimeTable(\"MONDAY 1446 MONDAY 1519\\nMONDAY 1754 MONDAY 1923\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t3 \u003d ParserUtil.parseTimeTable(\"WEDNESDAY 1024 WEDNESDAY 1544\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeTable\u003e timeTables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timeTables, 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.MONDAY, LocalTime.parse(\"14:12\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"16:34\"), DayOfWeek.MONDAY, LocalTime.parse(\"17:54\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.MONDAY, LocalTime.parse(\"19:23\"), DayOfWeek.TUESDAY, LocalTime.parse(\"09:23\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.TUESDAY, LocalTime.parse(\"12:55\"), DayOfWeek.WEDNESDAY, LocalTime.parse(\"10:24\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        expected.add(new TimeRange(DayOfWeek.WEDNESDAY, LocalTime.parse(\"15:44\"), DayOfWeek.FRIDAY, LocalTime.parse(\"09:31\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void generate_timeRangesWithNoPossibleTimeslots_generatesEmptyTimeRangeList() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(\"11:35\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(\"09:31\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t1 \u003d ParserUtil.parseTimeTable(\"MONDAY 1412 MONDAY 1634\\nTUESDAY 0923 TUESDAY 1255\\nTHURSDAY 1544 SATURDAY 1924\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t2 \u003d ParserUtil.parseTimeTable(\"MONDAY 0800 MONDAY 1519\\nMONDAY 1600 TUESDAY 1100\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        TimeTable t3 \u003d ParserUtil.parseTimeTable(\"TUESDAY 1024 THURSDAY 1544\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeTable\u003e timeTables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        timeTables.add(t3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e generated \u003d new TimeSlotGenerator(timeTables, 1,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "                new TimeRange(DayOfWeek.MONDAY, start, DayOfWeek.FRIDAY, end)).generate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        List\u003cTimeRange\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(generated, expected);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/WeekTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "public class WeekTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    public void minus_otherDuration_givesCorrectResult() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w1 \u003d new WeekTime(DayOfWeek.MONDAY, LocalTime.parse(\"12:30\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        WeekTime w2 \u003d new WeekTime(DayOfWeek.TUESDAY, LocalTime.parse(\"14:56\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "        assertEquals(w2.minus(w1), new Duration(1, 2, 26));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                null, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ccyccyccy"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ccyccyccy": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public EditPersonDescriptorBuilder withProfilePicture(String profilePicture) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        descriptor.setProfilePicture(new ProfilePicture(profilePicture));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 9,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "    public static final String DEFAULT_PROFILE_PICTURE \u003d \"docs/empty_profile_picture.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d new ProfilePicture(DEFAULT_PROFILE_PICTURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        profilePicture \u003d personToCopy.getProfilePicture();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    public PersonBuilder withProfilePicture(String profilePicture) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        this.profilePicture \u003d new ProfilePicture(profilePicture);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "        return new Person(name, phone, email, profilePicture, address, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 1,
      "jerryk1997": 13,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerryk1997": 6,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"heinz@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"werner@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"anna@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"stefan@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "R-D-D-D"
        },
        "content": "            .withEmail(\"hans@example.com\").withProfilePicture(\"docs/empty_profile_picture.png\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withProfilePicture(VALID_PROFILE_PICTURE_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerryk1997"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withProfilePicture(VALID_PROFILE_PICTURE_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "R-D-D-D": 7,
      "jerryk1997": 2,
      "-": 58
    }
  }
]
