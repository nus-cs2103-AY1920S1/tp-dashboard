[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103-F09-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103-F09-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "https://app.netlify.com/sites/flashcardpro/deploys[image:https://api.netlify.com/api/v1/badges/342bdfcd-063b-4527-b762-2139c38ba234/deploy-status[Netlify"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-2/addressbook-level3/badge.svg?branch\u003dmaster[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* FlashCard Pro is an application designed for students of all fields who prefer to use a desktop app for managing flashcards, as well as teachers who would like to provide resources (in the form of custom flashcard decks) to support their students’ learning."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Who is FlashCard Pro for?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Have you ever felt like there should be more kinds of flashcards you could create in order to learn different things? Like flashcards that require you to complete code snippets, or flashcards with multiple choice?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "FlashcardPro allows you to create these kinds of flashcards!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* FlashCard Pro created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 7,
      "huiminlim": 4,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "mainClassName \u003d \u0027dream.fcard.core.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // https://mvnrepository.com/artifact/org.mozilla/rhino"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    compile group: \u0027org.mozilla\u0027, name: \u0027rhino\u0027, version: \u00271.7.11\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    archiveName \u003d \u0027FlashCardPro.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u0027site-name\u0027: \u0027Flash Card Pro\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F09-2/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AHaliq": 1,
      "timothyleong97": 8,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro was developed by the https://github.com/AY1920S1-CS2103-F09-2/main[F09-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Lim Hui Min"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::huiminlim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "{empty}[http://github.com/huiminlim[github]] [\u003c\u003chuiminlim#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Responsibilities: Team Lead, in charge of Flash Cards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Leong Jia Hao, Timothy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::timothyleong97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "{empty}[http://github.com/timothyleong97[github]] [\u003c\u003ctimothyleong97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d\u003d Tan Yan Zhen, Natalie"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "image::nattanyz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "{empty}[http://github.com/nattanyz[github]] [\u003c\u003cnattanyz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "\u003d\u003d\u003d Abdul Haliq"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "image::ahaliq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "{empty}[https://github.com/ahaliq[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d Shawn Chew"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "image::shawnpunchew11.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "{empty}[https://github.com/shawnpunchew11[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "..."
      }
    ],
    "authorContributionMap": {
      "nattanyz": 4,
      "AHaliq": 4,
      "shawnpunchew11": 4,
      "PhireHandy": 1,
      "timothyleong97": 5,
      "huiminlim": 5,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Email us* : You can also reach us at `huimin.lim [at] u.nus.edu`, `timothy.leong [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "By: `Team F09-2`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ArchitectureDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-gui,*`GUI`*\u003e\u003e: The GUI of the App."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-Responder,*`Responder`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-Util,*`Utilities`*\u003e\u003e: Shared resources of the App."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user \u003c\u003cTBC\u003e\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ArchitectureSequenceDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[Design-GUI]]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d GUI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::UiClassDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[Design-Responder]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Responder component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[fig-ResponderClassDiagram]]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".Structure of the Responder Component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ResponderClassDiagram.png[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ModelClassDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/model[`Model`]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::cards[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".`FlashCard`,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* There are 3 types of cards used by our App, the `JavascriptCard`, `FrontBackCard` and `MultipleChoiceCard`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::cards_class_diagram.png[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `JavascriptCard` and `FrontBackCard` implements from `FlashCard`, an interface class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `MultipleChoiceCard` inherits from `FrontBackCard`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The interface class `FlashCard` also implements `JsonInterface` class to allow loading and saving to Json format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Refer to the activity diagram below to see the process of creating a `MultipleChoiceCard`:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::MultipleChoiceCardCreation.png[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For the `MultipleChoiceCard`, the choices provided by the user must be unique, i.e. there cannot be any duplicate in the choices provided."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "If a duplicate choice is detected, then the creation of the `MultipleChoiceCard` will not be successful."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".FlashCard Priority"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Each FlashCard has an associated priority level, which the user can indicate his/her value of the importance of the card."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The priority levels are described below:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| Priority| Value| Intended Action"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| HIGH_PRIORITY| 10| Valued as important by user, should be tested more often"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| LOW_PRIORITY| 1| Valued, but less important by user, should be tested less often"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The sequence diagram below shows how the `ExamRunner` component can use the `createSubsetForTest()` method in the `Deck` and make use of the priorities associated with the `FlashCards` to create a test that emphasises the `FlashCards` that the user deems as important."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::PriorityFlashCardTestSetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Step 1: Constructor of `ExamRunner` is called."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Step 2: In the constructor of `ExamRunner`, a method call is made to `Deck` to create a subset of cards for test."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Step 3: If there are less than 10 cards in `Deck`, return all the cards."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Step 4 - 10: Return a set of cards with both `HIGH_PRIORITY` and `LOW_PRIORITY` cards, which the proportion is weighted at 60% to 40% ratio respectively."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Step 11: `Deck` returns the test set to `ExamRunner`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: how to store and select the `HIGH_PRIORITY` and `LOW_PRIORITY` cards"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* **Alternative 1:** Use a priority queue to store the cards"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Pros: Allows the user to test the cards according to `HIGH_PRIORITY` cards first, effectively choosing only `HIGH_PRIORITY` cards first, then `LOW_PRIORITY` cards."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Cons: Certain `LOW_PRIORITY` cards may not be tested if the test set size is smaller than the number of `HIGH_PRIORITY` cards"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Cons: FlashCard Pro cannot have the flexibility of letting the user select the number of `LOW_PRIORITY` cards in the test set."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* **Alternative 2: (Current Choice)** Maintain two lists of cards, `HIGH_PRIORITY` and `LOW_PRIORITY` cards"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Pros: Can control the ratio of `HIGH_PRIORITY` and `LOW_PRIORITY` cards in the test set created"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Pros: Have the flexibility to randomize the card order and choose a random set each time"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Cons: FlashCard Pro cannot have the flexibility of letting users assign more than 2 priority levels"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::cards[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/logic/storage/StorageManager.java[`StorageManager.java`]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/util/json/JsonParser.java[`JsonParser.java`]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/util/FileReadWrite.java[`FileReadWrite.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface to save deck by calling `FileReadWrite`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface to load deck by calling `FileReadWrite`, send string to `JsonParser` and creating deck objects from `JsonValue`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The `JsonParser` component,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* takes any string of JSON format and returns a `JsonValue`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The `FileReadWrite` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* resolves root directory for app save data"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface for user to provide their custom root directory"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* writes file and creates path directories if none"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "[[Design-Util]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Code Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ".Structure of the Code component within Utilities"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::CodeClassDiagram.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The `Code` component supports code-running flashcards in Java and Javascript. Cards will take in user input"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "via the JavaScript card (Java card to be implemented soon) and"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "the `JavascriptRunner` class"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* can evaluate JS code from a file using the `FileImporter` class"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* can evaluate JS code as an input string"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "the `JavaRunner` class"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Read/write to the `Solution.java` file during runtime after user has typed"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Java code into the file"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Compile and run `Solution.java`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* the Java code written in each card is stored in the card itself, but this `Solution.java` will be overwritten"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "and used to run the code in each card."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "To be implemented: An in-app Flashcard Pro compiler and debugger for JS and Java as a playground for the user"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Classes used by multiple components are in the `dream.fcard.datastructures` package and root of `dream.fcard.util`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// tag::parsejson[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The parsing is done by `JsonParser`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "It takes a string and attempts to read it as one of a `JsonValueTypes` and create its corresponding object wrapped in `JsonValue`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Since Objects and Arrays can recursively contain a json value, their contents are also read, created and wrapped."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* `JsonParser#parseJsonInput()` -- constructs the `JsonValue` object from a string input"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Given below is the overview activity diagram of parsing a json string input."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "image::jsonParserProcessDynamicValue.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "It will first be tested to see if its an integer and if it fails it will be tested for a double."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Consequently, boolean, string, json object, json array."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Json object values are themselves json values thus the activity diagram is called recursively"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Likewise for json array values."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "If all parsing types fail, there must be an error with the string input, thus a JsonFormatException is thrown."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The JsonParser is designed to be a utility class with a pure function without any mutation of state."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Thus it should be self contained within a single function call."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d [Proposed] Saving User Statistics feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How saving executes"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "The GUI of the application is started up by the `UiManager` class, when the application is initialised."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "The `GUI` class handles operations on the GUI, such as rendering nodes to the application window,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "and passing user command input to the `Responder` class."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d Timed/Untimed Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "The timed/untimed test is a exam mechanism facilitated by the `ExamRunner` class which extends from the `Exam` interface."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Given below is an example usage scenario and how the timed/untimed mechanism behaves at each step."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 1. User keys in the command `test \u003cduration\u003e \u003cdeck name\u003e` (Eg. test 120 German)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 2. If `\u003cduration\u003e` is 0, untimed test will be initiated. Else, a timed test will be initiated."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 3. User will be showed the card front, and prompted for a String answer."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 4. Answer will be evaluated against the card back, and if it is correct, score will be updated."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "The following activity diagram displays the action flow of the test mechanism."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "image::ExamRunnerActivityDiagram.png[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: how the timed/untimed test mechanism works"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "* **Alternative 1:** Use forEach or while loops to iterate through the deck"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Pros: Ensures that the entire deck will be iterated through"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Cons: Limited control wihtin the loop"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "* **Alternative 2: (Current Choice)** Use a nextCard method that the GUI can trigger on click"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Pros: High amount of control as every individual card can be controlled."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Cons: More code for a relatively small function"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Running a code flashcard"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ".Activity diagram for creating a code flashcard"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::JSCardActivityDiagram.png[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The code flashcard is a card that allows users to answer coding questions by running code directly."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The  following use case illustrates how the card works."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* System: FlashCard Pro"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Actor: User"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Use case: Create a code flashcard"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user initialises the card for the appropriate language (i.e. Java or JS)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user enters starter code if necessary (e.g boilerplate code, helper methods)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user enters test cases (specifying inputs and corresponding expected outputs)."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". FlashCard Pro saves the newly created card."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*Extensions:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". a) The user enters 0 test cases."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    .. 1) FlashCard Pro prompts for at least 1 test case."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    .. 2) The user enters a test case."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::configure_difficulty[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d [Proposed] Configure difficulty of test set in `test` mode"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Currently, the user is restricted to a test set of 60% `HIGH_PRIORITY` and 40% `LOW_PRIORITY` cards in the test set."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "In V2.0, the user should be able to configure the proportion of `HIGH_PRIORITY` and `LOW_PRIORITY` cards in the test set to pitch the level of difficulty of the test."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ConfigurePriorityFlashCardTestSetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The ExamRunner will be expanded to allow the user to take in the ratio of `HIGH_PRIORITY`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Then, the computation of the number of `HIGH_PRIORITY` and `LOW_PRIORITY` cards will be done according to the ratio provided by the user."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::configure_difficulty[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::productscope[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* wishes to learn new materials by retrieval learning and self-testing"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* is an independent learner"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* contents of learning are largely textual"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Value proposition*: allow effective reinforcement learning of textual content by answering using CLI input to a question prompt from a GUI"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::productscope[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::user_stories[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| add a new deck| create a new topic collection of flash cards to test myself"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| add a new card to a deck| include a new question into the topic of the deck to test myself"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| save my deck of flash cards into my local drive| I can share it with my friends"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| load my deck of flash cards into the app| I can reuse the deck of cards created"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |user that takes flash card tests |select an option out of four that best matches the front of a flash card |I can check that I have understood the concept the flash card aims to impart"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |learner who wants to track his/her progress |view the questions I have not done well in| improve my understanding on these concepts tested"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |learner who wants to prioritise some test questions over others |set which questions are more important | be exposed to these important questions more in the tests"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |beginner user |access a help page |i can learn about the features at a glance"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* *` |student with subjects of different language mediums |add flashcards of differing languages  |I can customise my flashcards to the subject I am interested to do"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* *` |user creating flash cards |save collections of thematically similar flash cards | I can share my cards easily to other users"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| view the list of flashcards in a deck| remember the material at the back of the flashcard"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| edit the front and/or back of the flashcard in a deck|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| delete a flashcard from a deck|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| view the decks of flashcards in my library| I know what are the decks available for my usage"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| intermediate learner| vary the amount of difficult questions in a test| expose myself to a test with varying difficult each time I test myself"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| expert learner with MCQ flashcard test| remove the choices given by the MCQ choices and enter the answers via CLI| test my understanding of the concept without a MCQ choice prompt"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| learner attempting MCQ questions| have randomised choices each time I try the test| I will not copy the choice from the previous test"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| restore my library state of my previous session| continue using FlashCard Pro without much time wasted"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user attempting a test| view my score after the test|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user who attempted a test| track my progress across mutliple test| monitor my attempts and correctness"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::user_stories[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::use_case[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(For all use cases below, the *System* is the `FlashCard Pro` and the *Actor* is the `learner`, unless specified otherwise)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Create a deck of cards"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner creates a new empty deck and specifies the name of the deck of cards."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. Learner adds individual cards to the deck and specifies the content of the front and back of the cards."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. FlashCard Pro detects deck name provided by learner is identical to an existing deck of cards in the library."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. FlashCard Pro informs the learner that deck creation is unsuccessful."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. Learner creates a new deck with another unique deck name."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Use case resumes from step 2."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2a. FlashCard Pro detects no front and/or back content specified by the learner."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a1. FlashCard Pro informs the learner that card creation is unsuccessful."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a2. Learner creates a new card with the correct front and/or back content."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Steps 2a1-2a2 are repeated until the format of the command entered is correct."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(Was wondering if FlashCard Pro should create the deck, but with a numbering like untitled_1, untitled_2 etc)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Start a untimed test"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner starts untimed test with a deck of cards by specifying deck name."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. FlashCard Pro begins test."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. FlashCard Pro flashes text on the front of a flash card to learner."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. FlashCard Pro waits for learner\u0027s answer."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. Learner enters answer."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. FlashCard Pro matches answer with text on back of flash card."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. FlashCard Pro informs learner about correctness of the learner\u0027s answer."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8. FlashCard Pro displays the correct answer, the text on the back of the flash card."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 3-8 are repeated until all the flash cards in the deck are completed."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Import an existing deck of cards from a JSON file"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner specifies the filepath of the deck of cards to import, in a JSON file format."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. FlashCard Pro loads the file in the filepath."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. FlashCard Pro parses the fields in the JSON file."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. FlashCard Pro constructs the deck of cards."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. FlashCard Pro stores the deck of cards in the library."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2a. FlashCard Pro detects filepath is invalid."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a1. FlashCard Pro informs the learner that import of deck of cards is unsuccessful."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2b. FlashCard Pro detects that filepath does not lead to a JSON file."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2b1. FlashCard Pro informs the learner that import of deck of cards is unsuccessful."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Running a test using Front Back Cards"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test with a deck of card and supplies deck name."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System obtains the deck of cards."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System shows front of card to user, waits for answer."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. User enters the answer."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. System evaluates the answer."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System reports the correctness of the answer."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8. System moves to next card."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Step 4-8 repeated until there are no cards in the deck remaining."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a deck of cards"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to create a deck."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System creates a new deck."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. User enters command to create a new card in the deck."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System creates a card."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System stores the card in the deck."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 2-5 repeats as long as the user wants to add a card."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Untimed Test with a deck of Multiple Choice Cards"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test on a deck."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(System creates a test subset)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System gets the deck the user wants to test on."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System randomises the choice ordering."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System displays the front of card and choices."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. User enters the choice of correct answer."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System evaluates the answer."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "8. System shows the correctness of the answer."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "9. System moves to next card."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 4-9 are repeated until there are no more cards in the test set."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 6a. User enters an invalid choice."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a1. System checks if choice is valid."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a2. System tells User that choice entered is invalid."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a3. System requests User to enter another choice."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 6a1-6a3 repeats until the User enters a valid choice."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Timed Test with a deck of Multiple Choice Cards"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test on a deck."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(System creates a test subset)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System gets the deck the user wants to test on."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System randomises the choice ordering."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System displays the front of card and choices."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. User enters the choice of correct answer."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System evaluates the answer."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "8. System shows the correctness of the answer."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "9. System moves to next card."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 4-9 are repeated until there are no more cards in the test set."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 6a. User enters an invalid choice."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a1. System checks if choice is valid."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a2. System tells User that choice entered is invalid."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 6a1-6a3 repeats 3 times."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a4. User enters invalid choice for 4th time."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a5. System receives invalid choice for 4th time."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a6. System terminates test."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a7. System tells User that test has terminated due to incorrect inputs."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a Multiple Choice Card"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to create a MCQ Card to a deck."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System starts MCQ Card creation."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System stores MCQ card in deck."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. User enters duplicated choices."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System detects duplicated choices in choices provided by user."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System tells User that there are duplicates in chocies provided."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a3. System ends card creation."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::use_case[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".  Should handle text input of english alphabets."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nattanyz": 5,
      "shawnpunchew11": 35,
      "AHaliq": 28,
      "timothyleong97": 48,
      "huiminlim": 318,
      "-": 280
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "By: `Team F09-02`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro is an application designed for students of all fields who prefer to use a desktop app for managing flashcards, as well as teachers who would like to provide resources (in the form of custom flashcard decks) to support their students’ learning."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro is optimised for users who are comfortable with Command Line Interface-based interaction, allowing them to work more efficiently than with traditional Graphical User Interface (GUI)-based flashcard apps, while still being able to use their flashcards in a familiar GUI format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d Flashcards"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "What is a flashcard? Flashcards are containers for information. Each card has a “front” and a “back”. Although FlashCard Pro is agnostic in its implementation, one recommended use case is such: the user stores a question on the “front” of the card and the answer on the “back”."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "After sets of flashcards (known as “decks”) have been created, the user may interact with the flashcards in various ways. For example, FlashCard Pro can be configured to show the “front” of the card, prompting the user to enter their guess for what is on the “back” of the card. The user’s attempt is gauged “correct” if it matches the definition of the card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "As with physical flashcards, the flashcards in FlashCard Pro can be shuffled, used in reverse, mixed between decks, etc. Unlike physical flashcards, flashcards in FlashCard Pro are dynamic, offering a range of possibilities from traditional memorisation-type uses to support for learning programming."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "For example, teachers may define basic coding problems which their students can attempt to answer. FlashCard Pro will evaluate the output of the student’s solution, allowing students to gauge their own coding knowledge, and teachers to evaluate their students’ progress."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".  Download the latest `flashcardpro.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Commands are case-sensitive."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Show help page for commands available : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Shows the help page and guides you through the available commands for FlashCard Pro. You can also choose a specific command to look up how to use it"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `help [command/COMMAND_NAME]`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If user does not supply parameter for command: shows all the available commands and syntax in FlashCard Pro"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If user supply a parameter in command: shows the specific command syntax."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** All commands that are available, except for help, can be queried."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Other non-valid commands will give a `command not found` message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `help` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the commands available for use in FlashCard Pro."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `help command/view` +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the syntax to use command `view`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Importing flashcards from disk : `import`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Adds a deck of flashcards from a JSON file path to FlashCard Pro\u0027s library"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `import filepath/FILE_NAME`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You are advised to save your FlashCard Pro decks of flashcards in a folder that is separate from your files. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro recommends createing a folder in desktop named `flashcardpro`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `import filepath/C:\\Users\\user\\Desktop\\flashcardpro\\german.json` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Importing the JSON file `german.json` file from a Windows OS file path."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Exporting flashcards to disk: `export`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Saves the deck of flashcards to a JSON file in the specified file path"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `export deck/DECK_NAME`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `export deck/german` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Exports a deck named `german` in FlashCard Pro library to a JSON file named `german.json`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can share the deck of cards in the JSON file saved to another user to use in FlashCard Pro via the `import` function.+"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Refer to \u003c\u003cImporting flashcards from disk : `import`\u003e\u003e for steps."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You are advised to save your FlashCard Pro decks of flashcards in a folder that is separate from your files. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro recommends createing a folder in desktop named `flashcardpro`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::view[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Viewing flashcards in library: `view`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "View the flashcard decks or the individual flashcards in a specific deck"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `view [deck/DECK_NAME]`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `view` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays all the decks of cards in the library"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `view deck/science_deck` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays all the cards in the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::view[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::create_deck[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Create new empty deck: `create`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Creates an empty deck in FlashCard Pro library."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `create deck/DECK_NAME."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Note :"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The `DECK_NAME` must be unique and no deck that exist in FlashCard Pro library should have the same name of `DECK_NAME`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If there is another deck with the same name `DECK_NAME`, there will be an error message and the empty deck will not be created."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `create deck/german` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Creates a new empty deck named `german`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::create_deck[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::add_front_MCQ[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Add new Front Back card or Multiple Choice Card to deck: `add`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Creates an Front Back card or Multiple Choice Card in a deck of FlashCard Pro library."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `create deck/DECK_NAME [priority/PRIORITY_LEVEL] front/FRONT_TEXT back/BACK_TEXT [choice/CHOICE_TEXT]...`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The `DECK_NAME` must be a name of an existing deck in FlashCard Pro."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If there is not deck with the name of `DECK_NAME`, there will be an error message and the card will not be created."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* When entering the `PRIORITY_LEVEL`, there are only 2 valid choices `HIGH` and `LOW`. Refer to the table below to know how to use the `PRIORITY_LEVEL`:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[width\u003d\"59%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| Priority | Value | Input for PRIORITY_LEVEL"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| High | You find the card important and want it to be tested more often | `HIGH`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| Low | You find the card less important and want it to be tested less often | `LOW`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If no `priority/` parameter is entered, then the default priority level is `LOW`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If you enter any input other than `HIGH` or `LOW`, there will be an error message and the card will not be created."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `FRONT_TEXT` is the question that you wish to see in the flashcard."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* To create a Front Back card,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** `BACK_TEXT` is the answer of the Front Back flashcard."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** No choice should be entered under `choice/`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* To create a Multiple Choice card,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** the `BACK_TEXT` parameter should correspond to choice entered by the user, using the order of choice entered and should be a integer value from 1, 2, ...., Number of choices entered."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** To create a Multiple Choice card, there should be at least 2 `choice/` parameters entered."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If there are only 1 `choice/` parameters entered, there will be an error message and the card will not be created."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `add deck/german  front/hello back/moin moin` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Creates a new Front Back card in deck `german`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `add deck/german  front/hello back/1 choice/hello choice/bye choice/zzz` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Creates a new Multiple Choice card in deck `german`, with the answer as the first `choice/` parameter, hello."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::add_front_MCQ[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Add new Javascript card or Java Card"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(TBC)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Editing the card of an existing deck of flashcards : `edit`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The edit command allows the user to edit flashcards in any existing deck."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `edit deck/DECK_NAME index/INDEX [front/FRONT_TEXT] [back/BACK_TEXT] [choiceIndex/CHOICE_INDEX] [choice/CHOICE_TEXT]`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Note:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The `DECK_NAME` must be an existing deck in the FlashCard Pro library."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If no deck with `DECK_NAME` exist in the FlashCard Pro library, there will be an error message and no card will be edited."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The `INDEX` refers to the index of a card in the deck."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** `INDEX` must be a valid integer from 1, 2, ..., Number of cards in deck."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If the `INDEX` is invalid, there will be an error message and no card will be edited."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If you want to edit the front of the card, `FRONT_TEXT` should be supplied."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If you want to edit the back of the card, `BACK_TEXT` should be supplied."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* If you want to edit a choice of an Multiple Choice card, `CHOICE_INDEX` and `CHOICE_TEXT` should be supplied."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If the `CHOICE_TEXT` entered by the user exists as one of the choices in the Multiple Choice card, an error message will be shown and the edit will not be made."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "If you edit `CHOICE_TEXT`, do remember that the back of the Multiple Choice card will still determine the correct choice of the Multiple Choice card."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro will not be responsible if the editing of an answer choice lead to the choice to be incorrect."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `edit deck/science_deck index/1 front/what is a cell back/a cell is a building block` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Edits the first flashcard of the deck `science_deck`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `edit deck/science_deck index/1 choiceIndex/3 choice/Hello` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Edits the first Multiple Choice flashcard of the deck `science_deck`, edit 3rd choice to hello."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Delete the card of an existing deck of flashcards : `delete`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deletes a card from an existing deck in FlashCard Pro."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `delete deck/DECK_NAME index/INDEX`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `delete deck/german index/1` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deletes the first card of the deck `german`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Start test with flashcards : `test`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a test with a deck of flashcards, with the choice of an untimed test (timed mode will be added in `v1.4`)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(TBC)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `test deck/DECK_NAME [duration/TIME_LIMIT_ALLOWED]` (to be implemented in `v1.4`)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `test deck/science_deck` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a untimed test with the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `test duration/50 deck/science_deck` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a timed test of 50 seconds with the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::stop[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d\u003d Quit test: `stop`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Exits the test process when the user is in test mode. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Exams will also terminate automatically upon running out of cards in the test deck. This will trigger a popup with the results of the test."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::stop[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Viewing user statistics : `stats`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Shows your usage statistics, such as time spent and usage count in general of for a deck of cards."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `stats [deck/DECK_NAME]`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `stats` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the overview of the time spent and usage count of all decks of cards. Also shows the statistics of the current program State."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `stats deck/science_deck` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Display the overview of time spend and usage count of the deck of cards, `science_deck`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::FAQ[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::FAQ[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *help* `help [command/COMMAND_NAME]` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `help command/view`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *import* : `import filepath/FILE_NAME`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *export* : `export deck/DECK_NAME FILE_NAME`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *stats* : `stats [deck/DECK_NAME]` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `stats deck/science_deck`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *view* : `view [deck/DECK_NAME]` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `view deck/science_deck`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *create* : `create deck/DECK_NAME`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *test* : `test [duration/TIME_LIMIT_ALLOWED] deck/DECK_NAME` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `test deck/science_deck`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *exit* : `exit`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *edit* : `edit deck/DECK_NAME action/DESIRED_ACTION [index/CARD_INDEX] [front/NEW_FRONT_TEXT] [back/NEW_BACK_TEXT]` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `edit deck/science_deck action/edit index/1 front/what is a cell back/a cell is a building block`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// end::summary[]"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 2,
      "shawnpunchew11": 4,
      "timothyleong97": 1,
      "huiminlim": 260,
      "-": 102
    }
  },
  {
    "path": "docs/diagrams/CodeClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package Code {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package Data {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Class Solution"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class FileImporter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaRunner"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaScriptRunner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "JavaRunner ..\u003e Solution :\u003e externally runs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "JavaScriptRunner ..\u003e FileImporter :\u003e reads JS files with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 23
    }
  },
  {
    "path": "docs/diagrams/ConfigurePriorityFlashCardTestSetSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "autonumber"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " -\u003e ExamRunner: ExamRunner(Deck, ratioOfHighPriority)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate ExamRunner"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "ExamRunner -\u003e Deck: createSubsetForTest()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "opt Number of cards \u003c\u003d 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck --\u003e ExamRunner: return cards"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: compute sizeOfHighPrioritySet"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: compute sizeOfLowPrioritySet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "loop temp"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: getRandomCard(highPriorityQueue)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: add chosen card to test set"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "loop temp2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: getRandomCard(lowPriorityQueue)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: add chosen card to test set"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck --\u003e ExamRunner: return testSet"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[\u003c--ExamRunner:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 49
    }
  },
  {
    "path": "docs/diagrams/JSCardActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "(*) --\u003e \"Initialization\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "if \"User provides starter code\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  --\u003e[true] \"Type starter code\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  -right-\u003e \"Enter test cases and expected output\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "else"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  -\u003e[false] \"Enter test cases and expected output\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "--\u003e[Ending process] (*)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 11
    }
  },
  {
    "path": "docs/diagrams/MultipleChoiceCard.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(*) --\u003e \"Multiple Choice Card\\n adds Front String\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " --\u003e \"Multiple Choice Card\\n adds Back String\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "--\u003e \"Multiple Choice Card\\n checks for duplicate in\\n user choices\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "if \"[Duplicates detected]\" then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "--\u003e [true] \"Multiple Choice Card\\n throws\\n DuplicateInChoiceException\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-down-\u003e(*)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "else"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-left-\u003e [false] \"Multiple Choice Card \\nadds user choices\\n to Choices\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-down-\u003e \"Multiple Choice Card\\n parse user\u0027s answer\\n index\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "if \"[Invalid answer provided]\" then"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-down-\u003e [true]\"Multiple Choice Card\\n throws\\n NumberFormatException\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-\u003e(*)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "-\u003e[false] \"Multiple Choice Card\\n adds answer \\nto answerIndex\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 23
    }
  },
  {
    "path": "docs/diagrams/PriorityFlashCardTestSetSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "autonumber"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " -\u003e ExamRunner: ExamRunner(Deck)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate ExamRunner"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "ExamRunner -\u003e Deck: createSubsetForTest()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "opt Number of cards \u003c\u003d 10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck --\u003e ExamRunner: return cards"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: compute sizeOfHighPrioritySet"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: compute sizeOfLowPrioritySet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "loop temp"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: getRandomCard(highPriorityQueue)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: add chosen card to test set"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "loop temp2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: getRandomCard(lowPriorityQueue)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck -\u003e Deck: add chosen card to test set"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "activate Deck #DarkSalmon"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck #DarkSalmon"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "end"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Deck --\u003e ExamRunner: return testSet"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deactivate Deck"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[\u003c--ExamRunner:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 49
    }
  },
  {
    "path": "docs/team/huiminlim.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d Lim Hui Min - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d PROJECT: FlashCard Pro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro is an application designed for students of all fields who prefer to use a desktop app for managing flashcards, as well as teachers who would like to provide resources (in the form of custom flashcard decks) to support their students’ learning."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). The GUI is to support the user if he/she prefers using the GUI to interact with FlashCard Pro."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Major enhancement*: expanded the *functionality and type of FlashCards*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Allows the user to assign priorities to each flash card."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Allows the creation of a random set of flash cards for the `test` function. The set of flash cards created for the test will have a proportion of high priority and low priority cards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Expanded the cards to support Multiple Choice cards on top of ordinary Front and Back flash cards."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Added support for shuffling choices of Multiple Choice cards when displaying the Multiple Choice cards in `test` mode."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** This enhancement allowed the user to have more flexibility in exploring various types of flash cards to support the usage of the `test` function."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** In addition, this feature is challenging because it requires in-depth analysis and design of the Regex parser to determine which card type (Front and Back card or Multiple Choice card) is created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dhuiminlim\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Functional code]][https://github.com/AY1920S1-CS2103-F09-2/main/tree/master/src/test/java/dream/fcard/model[Test code]]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (3 releases) on GitHub [https://github.com/AY1920S1-CS2103-F09-2/main/releases[Releases on Github]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Alerted team about bugs found in issue tracker: https://github.com/AY1920S1-CS2103-F09-2/main/issues/146[#146], https://github.com/AY1920S1-CS2103-F09-2/main/issues/99[#99], https://github.com/AY1920S1-CS2103-F09-2/main/issues/109[#109]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Wrote the parsing and input validation for:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "**** Front and Back, Multiple Choice Card addition"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "**** Edit Front and Back Card, Multiple Choice Card"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "**** Delete Flash card"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Wrote additional tests (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Did documentation for the CLI commands in the User Guide. (See \u003c\u003cContributions to the User Guide\u003e\u003e below)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Did documentation in Developer Guide. (See \u003c\u003cContributions to the Developer Guide\u003e\u003e below)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S1-CS2103T-F13-2/main/pull/205[#205], https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/91[#91]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1920S1/forum/issues/137[#137])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dview]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcreate_deck]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd_front_MCQ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstop]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFAQ]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcards]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dconfigure_difficulty]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dproductscope]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duser_stories]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duse_case]"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 64,
      "-": 37
    }
  },
  {
    "path": "docs/team/nattanyz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d Tan Yan Zhen, Natalie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 67
    }
  },
  {
    "path": "docs/team/timothyleong97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d Leong Jia Hao, Timothy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 68
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 2,
      "-": 93
    }
  },
  {
    "path": "src/main/java/dream/fcard/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/dream/fcard/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStatsHolder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            VBox vbox \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(vbox);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCard Pro\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            stage.getIcons().add(new Image(MainApp.class.getResourceAsStream(\"/images/address_book_32.png\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            StorageManager.loadUserStats();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            // start a session. if UserStats has not been retrieved, it will do so at this point."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            UserStatsHolder.getUserStats().startCurrentSession();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            // when the \u0027X\u0027 button is clicked."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            stage.setOnCloseRequest(e -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                System.out.println(\"Terminating the application...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                UserStatsHolder.getUserStats().endCurrentSession();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                StorageManager.saveAll(StateHolder.getState().getDecks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                StorageManager.saveStats(UserStatsHolder.getUserStats());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            // TODO: Our yet-to-be-reinstated-logger will replace this rudimentary error printing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(\"Failed to load app\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 13,
      "timothyleong97": 19,
      "-": 17
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param args arguments"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //Application.launch(CliEditor.class, args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 6,
      "timothyleong97": 2,
      "huiminlim": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashcardpro.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 3,
      "-": 109
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final String MESSAGE_INVALID_MULTIPLE_CHOICE_CARD_INPUT \u003d \"Invalid Multiple Choice Option!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 18,
      "-": 95
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 4,
      "-": 139
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/backview/McqCardBack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.backview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The rear view of a multiple choice card."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class McqCardBack extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label correctOrWrongLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button seeFrontButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label correctAnswerLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public McqCardBack(MultipleChoiceCard card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Cards/Back/MCQCardBack.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            seeFrontButton.setOnAction(e -\u003eseeFront());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correctOrWrongLabel.setText(checkAnswer(card));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            setColourOfLabel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            int correctAnswer \u003d card.getDisplayChoicesAnswerIndex();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correctAnswerLabel.setText(\"Option \" + correctAnswer + \" is correct.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException | IndexNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Checks if the answer that the user input is correct."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Adds 1 to score if correct."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param card the card the user is viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @return \"correct\" or \"wrong\" accordingly"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @throws IndexNotFoundException //exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String checkAnswer(MultipleChoiceCard card) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        boolean isCorrect \u003d card.evaluate(Integer.toString(card.getUserAttempt()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"UPDATE_MCQ_ATTEMPT\", card.getUserAttempt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return isCorrect ? \"Correct!\" : \"Wrong...\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void setColourOfLabel() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (correctOrWrongLabel.getText().equals(\"Correct!\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correctOrWrongLabel.setTextFill(Paint.valueOf(\"#3fb710\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correctOrWrongLabel.setTextFill(Paint.valueOf(\"#dc0b0b\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeFront() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane cardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", cardFront);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 24,
      "timothyleong97": 53
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/backview/SimpleCardBack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.backview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The rear view of a front-back card."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class SimpleCardBack extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button seeFrontButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Button correctButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Button wrongButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label answerLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public SimpleCardBack(String backOfCard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Cards/\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"Back/SimpleCardBack.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerLabel.setText(backOfCard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            seeFrontButton.setOnAction(e -\u003e seeFront());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            correctButton.setOnAction(e -\u003e onCorrect());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            wrongButton.setOnAction((e -\u003e onWrong()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeFront() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SEE_FRONT\", true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Event handler for what happens when correct button is clicked."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onCorrect() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"GET_SCORE\", true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam.upIndex();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane nextCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", nextCardFront);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Event handler for what happens when wrong button is clicked."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onWrong() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam.upIndex();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane nextCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", nextCardFront);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 37,
      "timothyleong97": 32
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/frontview/BasicFrontBackCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.frontview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The front view of a front-back card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class BasicFrontBackCard extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label questionLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button seeBackButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public BasicFrontBackCard(FlashCard card) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Cards/Front\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"/BasicFrontBackCard.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d card.getFront();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionLabel.setText(front);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            seeBackButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                Consumers.doTask(\"SEE_BACK\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 3,
      "timothyleong97": 39
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/frontview/JavaFront.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.frontview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.jsjava.JavaTestRunnerApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A UI element for the JavaCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaFront extends AnchorPane {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label questionTextLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button openCoderButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaCard card;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Application javaEditor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, ArrayList\u003cTestCase\u003e\u003e\u003e getResult \u003d this::receiveResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e launchJavaCoder \u003d bool -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        startCoding();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public JavaFront(JavaCard card) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Cards/Front/JavaFront.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"LAUNCH_JAVA\", launchJavaCoder);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(card.getFront());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            openCoderButton.setOnAction(e -\u003e startCoding());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Opens up the JavaTestRunnerApplication."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void startCoding() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        final Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        stage.setTitle(\"Java Quiz Code Editor\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaEditor \u003d new JavaTestRunnerApplication(getResult, card);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaEditor.start(stage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A function that returns whether the user passed all test cases. used to tell the user via the flashcard."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param result user\u0027s attempted code, the number of passed and failed attempts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void receiveResult(Pair\u003cString, ArrayList\u003cTestCase\u003e\u003e result) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int failed \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        boolean compileWrong \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        card.setAttempt(result.fst());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cTestCase\u003e cases \u003d result.snd();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (TestCase tc : cases) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e difference \u003d tc.checkDiff(tc.getActualOutput());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (!difference.fst()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                failed++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (difference.snd().snd() \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                compileWrong \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String pass \u003d \"\\nPassed!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String fail \u003d \"\\nFailed.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String err \u003d \"\\nCould not compile/run.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String front \u003d card.getFront();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        front \u003d front.replaceAll(pass, \"\").replaceAll(fail, \"\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .replaceAll(err, \"\").strip();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (failed \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + pass);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + pass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (compileWrong) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + err);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + err);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + fail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + fail);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 9,
      "timothyleong97": 102
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/frontview/JsCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.frontview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.jsjava.JsTestRunnerApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A front view of the JS Card."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsCard extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label questionTextLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button openCoderButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Application jsEditor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, Pair\u003cInteger, Integer\u003e\u003e\u003e getResult \u003d this::receiveResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e launchJsCoder \u003d bool -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        startCoding();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public JsCard(JavascriptCard card) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Cards/Front/JsCard.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"LAUNCH_JS\", launchJsCoder);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(card.getFront());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            openCoderButton.setOnAction(e -\u003e startCoding());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Opens up the JsTestRunnerApplication."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void startCoding() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        final Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        stage.setTitle(\"Js Quiz Code Editor\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsEditor \u003d new JsTestRunnerApplication(getResult, card);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsEditor.start(stage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A function that returns whether the user passed all test cases. used to tell the user via the flashcard."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param result user\u0027s attempted code, the number of passed and failed attempts."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void receiveResult(Pair\u003cString, Pair\u003cInteger, Integer\u003e\u003e result) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        card.setAttempt(result.fst());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String pass \u003d \"\\nPassed!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String fail \u003d \"\\nFailed.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String err \u003d \"\\nCould not compile/run.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String front \u003d card.getFront();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        front \u003d front.replaceAll(pass, \"\").replaceAll(fail, \"\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .replaceAll(err, \"\").strip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (result.snd().snd().equals(0)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + pass);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + pass);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (result.snd().fst() !\u003d -1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + fail);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + fail);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            card.editFront(front + err);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionTextLabel.setText(front + err);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 9,
      "timothyleong97": 86
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/cards/frontview/McqCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.cards.frontview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.RadioButton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ToggleGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The front view of the multiple choice card."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class McqCard extends AnchorPane {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label questionLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button seeBackButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ScrollPane choiceScrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox choiceContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ToggleGroup toggleGroup \u003d new ToggleGroup();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public McqCard(MultipleChoiceCard mcqCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //if userAttempt in the card is -1, it means that the user has not done this card before in this session."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Cards/Front/MCQCard.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionLabel.setText(mcqCard.getFront());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            populateOptions(mcqCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            seeBackButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (toggleGroup.getSelectedToggle() \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to select an option!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    RadioButton chosen \u003d (RadioButton) toggleGroup.getSelectedToggle();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    int selectedAnswer \u003d toggleGroup.getToggles().indexOf(chosen) + 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    mcqCard.setUserAttempt(selectedAnswer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                    Consumers.doTask(\"SEE_BACK\", true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Used by TestDisplay to render all the options onto the card."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param mcqCard the multiple choice card."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void populateOptions(MultipleChoiceCard mcqCard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (mcqCard.getUserAttempt() \u003d\u003d -1) { //shuffle and deselect all choices"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cString\u003e shuffledChoices \u003d mcqCard.getShuffledChoices();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            shuffledChoices.forEach(option -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                RadioButton radioButton \u003d new RadioButton(option);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                radioButton.setToggleGroup(toggleGroup);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                choiceContainer.getChildren().add(radioButton);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //do not shuffle and select the preselected option"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cString\u003e previousArrangementOfChoices \u003d mcqCard.getDisplayChoices();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            int selectedIndex \u003d mcqCard.getUserAttempt() - 1; // userAttempt is 1-based"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            for (int i \u003d 0; i \u003c previousArrangementOfChoices.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                RadioButton radioButton \u003d new RadioButton(previousArrangementOfChoices.get(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                radioButton.setToggleGroup(toggleGroup);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                choiceContainer.getChildren().add(radioButton);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (i \u003d\u003d selectedIndex) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    radioButton.setSelected(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 2,
      "timothyleong97": 84
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/JsFileUploader.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A file uploader for Js card creating."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsFileUploader extends ScrollPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button uploadFileButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label filenameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsFileUploader() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Displays/JsFileUploader.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            uploadFileButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                file \u003d getFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                filenameLabel.setText(file.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    protected File getFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        final Stage dialog \u003d new Stage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        fileChooser.getExtensionFilters().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                new FileChooser.ExtensionFilter(\"JS File\", \"*.js\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return fileChooser.showOpenDialog(dialog);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return file !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getAssertions() throws FileNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            sb.append(sc.nextLine());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public void setFile(File f) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        this.file \u003d f;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 5,
      "timothyleong97": 65
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/CreateDeckDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Responder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * This class is used for editing an existing deck as well as creating a new deck."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class CreateDeckDisplay extends VBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField deckNameInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button onSaveDeck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button cancelButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label deckName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int numCards \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String deckNameString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String front;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String back;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String testCases;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private ArrayList\u003cString\u003e choices;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasFront;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasBack;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasChoice;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasTestCases;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasDeckName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private int correctIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Creates the form required to add questions to a deck."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public CreateDeckDisplay() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays/\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"CreateDeckDisplay.fxml\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            onSaveDeck.setOnAction(e -\u003e onSaveDeck());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cancelButton.setOnAction(e -\u003e Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            //TODO: replace or augment with a logger"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Note that the temporary deck is inside CardCreatingWindow. This method pulls that Deck object out and saves it"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * to the State."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public void onSaveDeck() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (deckNameInput.getText().isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to give your deck a name!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Responder.takeInput(\"create deck/\" + deckNameInput.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * Takes in the CLI input and parses it. The next action depends on the type of card found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input The CLI input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //public void processInput(String input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    hasFront \u003d hasFront(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    hasBack \u003d hasBack(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    hasChoice \u003d hasChoice(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    hasTestCases \u003d hasTestCase(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    hasDeckName \u003d hasDeckName(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (hasDeckName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        deckNameString \u003d input.split(\"deck/\")[1].split(\" \")[0].strip();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        this.deckNameInput \u003d new TextField(deckNameString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    boolean success;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (hasChoice) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        success \u003d parseMcq(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } else if (hasTestCases) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        success \u003d parseJs(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        success \u003d parseFrontBack(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (!success) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"CLI card creation failed.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        if (hasTestCases) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setCardType(js);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicChangeInputBox(js);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setQuestionFieldText(front);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setTestCases(testCases);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicAddCard();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        } else if (hasChoice) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setCardType(mcq);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicChangeInputBox(mcq);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setQuestionFieldText(front);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            McqOptionsSetter mcqSetter \u003d editingWindow.getMcqOptionsSetter();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            for (int i \u003d 0; i \u003c choices.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                System.out.println(choices.get(i));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                if (i \u003d\u003d correctIndex - 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                    mcqSetter.addNewRow(choices.get(i), true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                    mcqSetter.addNewRow(choices.get(i), false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicAddCard();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setCardType(frontBack);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicChangeInputBox(frontBack);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setQuestionFieldText(front);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.setAnswerFieldText(back);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            editingWindow.publicAddCard();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Answer not valid.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * Used to parse an MCQ-type card."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input the CLI input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return a boolean that represents if the input matches MCQ-type input."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean parseMcq(String input) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    String userInput \u003d input.replaceFirst(\"create deck/\", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    String[] userCardFields;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (hasFront \u0026\u0026 hasChoice) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        userCardFields \u003d userInput.trim().split(\"front/\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        //String newDeckName \u003d userInputFields[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        userCardFields \u003d userCardFields[1].trim().split(\"correctIndex/\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        correctIndex \u003d Integer.valueOf(userCardFields[1].strip()) - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        userCardFields \u003d userCardFields[0].trim().split(\"choice/\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        front \u003d userCardFields[0].strip();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    for (int i \u003d 1; i \u003c userCardFields.length; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        if (!userCardFields[i].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            choices.add(userCardFields[i]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (choices.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Too few choices provided\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * Used to parse FrontBack-type cards."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input the CLI input."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return a boolean that represents if the input matches FrontBack-type input."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean parseFrontBack(String input) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    String userInput \u003d input.replaceFirst(\"create deck/\", \"\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (hasBack \u0026\u0026 hasFront) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        front \u003d input.split(\"front/\")[1].split(\"back/\")[0].strip();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        back \u003d input.split(\"back/\")[1].split(\"front/\")[0].strip();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * Used to parse JS-type cards."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input the CLI input."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return a boolean that represents if the input matches JS-type input."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean parseJs(String input) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    String userInput \u003d input.replaceFirst(\"create deck/\", \"\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    if (hasFront \u0026\u0026 hasTestCases) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        String[] userInputFields \u003d input.split(\"front/\")[1].split(\"testCase/\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        front \u003d userInputFields[0].strip();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        StringBuilder temp \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        for (int i \u003d 1; i \u003c userInputFields.length; i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //            temp.append(userInputFields[i].strip());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        testCases \u003d temp.toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //        return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasFront(String input) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return input.contains(\"front/\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasBack(String input) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return input.contains(\"back/\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasChoice(String input) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return input.contains(\"choice/\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @return"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasTestCase(String input) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    System.out.println(\"hasTestCase\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return input.contains(\"testCase/\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private boolean hasDeckName(String input) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    return input.contains(\"deck/\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 2,
      "PhireHandy": 16,
      "timothyleong97": 251
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/EditDeckDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.CardCreatingWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The pane for adding questions to a deck as well as changing the deck\u0027s name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class EditDeckDisplay extends VBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField deckNameInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button doneEditingButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label deckName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label deckSize;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private VBox cardCreatingPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int numCards;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public EditDeckDisplay(Deck deck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays/\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"EditDeckDisplay.fxml\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumer\u003cFlashCard\u003e saveToDeck \u003d c -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                deck.addNewCard(c);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                StorageManager.writeDeck(deck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.RENDER_LIST, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumer\u003cInteger\u003e incrementNumCards \u003d x -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                ++numCards;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                deckSize.setText(numCards + \" cards\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            CardCreatingWindow editingWindow \u003d new CardCreatingWindow(incrementNumCards, saveToDeck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardCreatingPane.getChildren().add(editingWindow);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            deckNameInput.setText(deck.getDeckName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            numCards \u003d deck.getCards().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deckSize.setText(numCards + (numCards \u003d\u003d 1 ? \" card\" : \" cards\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            doneEditingButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                int currentIndex \u003d StateHolder.getState().hasDeckName(deck.getDeckName()); //can put in responses"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                String name \u003d deckNameInput.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (!name.isBlank()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    int index \u003d StateHolder.getState().hasDeckName(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    if (index \u003d\u003d -1 || index \u003d\u003d currentIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        deck.setDeckName(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 5,
      "timothyleong97": 74
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/javacard/JavaTestCaseInputBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck.javacard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A controller for the container of rows of test cases used during JavaCard creation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaTestCaseInputBox extends ScrollPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox testCaseBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ArrayList\u003cJavaTestCaseRow\u003e testCaseRows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Consumers to delete and add rows."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e addTestCase \u003d b -\u003e addNewRow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cJavaTestCaseRow\u003e deleteRow \u003d row -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (testCaseRows.size() \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            testCaseRows.remove(row);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            renderRows();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need at least 1 test case!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaTestCaseInputBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Displays/JavaTestCaseInputBox.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            testCaseRows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addNewRow();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Render the testcases onto the screen."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderRows() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        testCaseBox.getChildren().clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (int i \u003d 0; i \u003c testCaseRows.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavaTestCaseRow row \u003d testCaseRows.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            testCaseBox.getChildren().add(row);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void addNewRow() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        JavaTestCaseRow row \u003d new JavaTestCaseRow(addTestCase, deleteRow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        testCaseRows.add(row);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderRows();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public ArrayList\u003cTestCase\u003e getTestCases() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cTestCase\u003e cases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (JavaTestCaseRow row : testCaseRows) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String input \u003d row.getInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String output \u003d row.getOutput();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TestCase testCase \u003d new TestCase(input, output);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cases.add(testCase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return cases;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setTestCaseRows(ArrayList\u003cTestCase\u003e testCases) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        testCaseRows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (TestCase testCase : testCases) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavaTestCaseRow row \u003d new JavaTestCaseRow(addTestCase, deleteRow);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            row.setInput(testCase.getInput());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            row.setOutput(testCase.getExpectedOutput());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            testCaseRows.add(row);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderRows();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Returns whether the input box contains at least one test case"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasAtLeastOneTestCase() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        boolean hasTestCases \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (JavaTestCaseRow row : testCaseRows) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (row.hasTestCase()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                hasTestCases \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return hasTestCases;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 105
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/javacard/JavaTestCaseRow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck.javacard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A controller for a row of test case input boxes when creating a JavaCard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaTestCaseRow extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea inputTextArea;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea outputTextArea;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button addRowButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button deleteRowButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaTestCaseRow(Consumer\u003cBoolean\u003e addNewRow, Consumer\u003cJavaTestCaseRow\u003e deleteThis) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Displays/JavaTestCaseRow.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addRowButton.setOnAction(e -\u003e addNewRow.accept(true));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deleteRowButton.setOnAction(e -\u003e deleteThis.accept(this));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return inputTextArea.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return outputTextArea.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setInput(String inputText) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.inputTextArea.setText(inputText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setOutput(String outputText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.outputTextArea.setText(outputText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasTestCase() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return !outputTextArea.getText().isBlank();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 59
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/jscard/JsTestCaseInputTextArea.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck.jscard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A file uploader for Js card creating."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestCaseInputTextArea extends ScrollPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea testCaseTextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestCaseInputTextArea() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Displays/JsTestCaseInputTextArea.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasTestCase() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return !getAssertions().isBlank();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getAssertions() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return testCaseTextArea.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setTextArea(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        text \u003d text.replaceAll(\";assert\", \";\" + \"\\n\" + \"assert\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        testCaseTextArea.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 43
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/mcqcard/McqOptionInputRow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck.mcqcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.RadioButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ToggleGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The UI element to represent one multiple choice option. Housed inside the McqOptionsSetter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class McqOptionInputRow extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label optionValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField optionText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button deleteButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button addNewRowButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private RadioButton rightAnswerRadio;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public McqOptionInputRow(ToggleGroup rightAnswer, Consumer\u003cMcqOptionInputRow\u003e deleteRow,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                             Consumer\u003cBoolean\u003e addNewRow) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"/MCQOptionInputRow.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deleteButton.setOnAction(e -\u003e deleteRow.accept(this));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addNewRowButton.setOnAction(e-\u003eaddNewRow.accept(true));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            rightAnswerRadio.setToggleGroup(rightAnswer);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setOptionNumber(int i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        optionValue.setText(i + \".\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean isBlank() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return optionText.getText().isBlank();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasRightAnswer() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return rightAnswerRadio.isSelected();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getOption() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return optionText.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setOptionText(String text) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        optionText.setText(text);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setRightAnswerRadio() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        rightAnswerRadio.setSelected(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 70
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/createandeditdeck/mcqcard/McqOptionsSetter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.createandeditdeck.mcqcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.RadioButton;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ToggleGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A container to display and remember the multiple choice options the user has created."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class McqOptionsSetter extends ScrollPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox optionInputBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ArrayList\u003cMcqOptionInputRow\u003e rows;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ToggleGroup rightAnswer \u003d new ToggleGroup();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cMcqOptionInputRow\u003e deleteRow \u003d row -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (rows.size() \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            rows.remove(row);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            renderOptions();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need at least 1 option!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e addNewRow \u003d b -\u003e addNewRow();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public McqOptionsSetter() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Displays/MCQOptionsSetter.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            rows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addNewRow();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Takes the list of McqOptionInputRow objects and renders them onto the McqOptionsSetter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Shows the user the options that have currently been created."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderOptions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        optionInputBox.getChildren().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (int i \u003d 0; i \u003c rows.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            McqOptionInputRow row \u003d rows.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            row.setOptionNumber(i + 1); //switch to 1-indexing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            optionInputBox.getChildren().add(row);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Adds an empty McqOptionInputRow to the McqOptionsSetter for the user to enter another option."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void addNewRow() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        rows.add(new McqOptionInputRow(rightAnswer, deleteRow, addNewRow));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderOptions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Used by CardEditingWindow to pre-populate a MCQ card\u0027s MCQ choices one at a time into the editor."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param text the option for the row being entered"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void addNewRow(String text, boolean isCorrectAnswer) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        addNewRow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        McqOptionInputRow row \u003d rows.get(rows.size() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        row.setOptionText(text);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (isCorrectAnswer) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            row.setRightAnswerRadio();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderOptions();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Used by CardEditingWindow to remove the default first option."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void deleteFirstRow() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        rows.remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Determines whether the user has entered at least one option."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return true if there is at least one filled row in the McqOptionInputRow and false otherwise."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasAtLeastOneNonEmptyOption() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        boolean hasOptions \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (McqOptionInputRow row : rows) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (!row.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                hasOptions \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return hasOptions;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Determines whether the user has chosen an option as the right answer."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return true if the user has toggled a radio button to designate an option as the right answer,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * and false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasDesignatedRightAnswer() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        RadioButton choice \u003d (RadioButton) rightAnswer.getSelectedToggle();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (choice \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Gets 1-based index of correct answer."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return 1-based index of the correct answer."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public int getIndexOfRightAnswer() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        AtomicInteger integer \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (McqOptionInputRow row : rows) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (row.hasRightAnswer()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return integer.get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            integer.incrementAndGet();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public ArrayList\u003cString\u003e getChoices() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cString\u003e answers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        rows.forEach(row -\u003e answers.add(row.getOption()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return answers;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 145
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/displayingdecks/CardTitle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.displayingdecks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The tile for viewing a question when looking at a deck. Used inside DeckDisplay."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class CardTitle extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label questionLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button editButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button deleteButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private FlashCard card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int indexInDeck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    CardTitle(FlashCard card, int index, Consumer\u003cInteger\u003e deleteCard, Consumer\u003cInteger\u003e editCard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays/CardTitle.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionLabel.setText(card.getFront());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            indexInDeck \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            editButton.setOnAction(e -\u003e editCard.accept(index));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deleteButton.setOnAction(e -\u003e deleteCard.accept(index));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void disableDelete() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deleteButton.setDisable(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 48
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/displayingdecks/DeckDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.displayingdecks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.EditDeckDisplay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.test.TestDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.CardEditingWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The pane to view the questions of a deck and access deck editing functionality."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class DeckDisplay extends AnchorPane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label deckName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label deckSize;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button startTest;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox questionList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button deleteDeckButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button addQuestionButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cInteger\u003e deleteCard \u003d this::deleteCard;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cInteger\u003e editCard \u003d this::editCard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPane\u003e swapDisplaysInDeckDisplay \u003d p -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionList.getChildren().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionList.getChildren().add(p);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public DeckDisplay(Deck deck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays/DeckDisplay.fxml\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            deckName.setText(deck.getDeckName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            renderQuestions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deleteDeckButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    deleteDeck();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                } catch (DeckNotFoundException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    ex.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            startTest.setOnAction(e -\u003e startTest());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addQuestionButton.setOnAction(e -\u003e addQuestion());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Starts a flashcard review session."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void startTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //display the first card"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        ArrayList\u003cFlashCard\u003e testArrayListOfCards \u003d deck.getSubsetForTest();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        ExamRunner.createExam(testArrayListOfCards, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        TestDisplay testDisplay \u003d new TestDisplay(exam);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.doTask(ConsumerSchema.SWAP_DISPLAYS, testDisplay);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Displays the questions of the deck inside DeckDisplay as a list of CardTitles."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderQuestions() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionList.getChildren().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cFlashCard\u003e cards \u003d deck.getCards();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int numCards \u003d cards.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deckSize.setText(numCards + (numCards \u003d\u003d 1 ? \" card\" : \" cards\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (int i \u003d 0; i \u003c numCards; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            CardTitle cardTitle \u003d new CardTitle(cards.get(i), i + 1, deleteCard, editCard);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionList.getChildren().add(cardTitle);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (numCards \u003d\u003d 1) { //disable the delete button if user has only 1 card in the deck"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            CardTitle cardTitle \u003d (CardTitle) questionList.getChildren().get(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTitle.disableDelete();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Used by CardTitle to trigger a deletion of a card."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param index the 1-based index of a card."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void deleteCard(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (deck.getCards().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Your deck needs at least 1 card!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deck.removeCard(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            renderQuestions();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IndexNotFoundException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Delete a deck."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws DeckNotFoundException"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void deleteDeck() throws DeckNotFoundException { //can be in Responses"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        State state \u003d StateHolder.getState();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        state.removeDeck(deck.getDeckName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StorageManager.deleteDeck(deck);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void addQuestion() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        EditDeckDisplay display \u003d new EditDeckDisplay(deck);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.doTask(ConsumerSchema.SWAP_DISPLAYS, display);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Replace a card with an edited one."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void editCard(int index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FlashCard cardToEdit \u003d deck.getCards().get(index - 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumer\u003cFlashCard\u003e onSave \u003d card -\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            deck.getCards().set(index - 1, card);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumer\u003cBoolean\u003e onCancel \u003d b -\u003e renderQuestions();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        CardEditingWindow window \u003d new CardEditingWindow(cardToEdit, onSave, onCancel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionList.getChildren().clear();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionList.getChildren().add(window);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 2,
      "shawnpunchew11": 10,
      "timothyleong97": 146
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/displayingdecks/NoDecksDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.displayingdecks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A display that guides the user to create a deck if there are no decks in the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class NoDecksDisplay extends VBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button createNewDeck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e consumer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public NoDecksDisplay(Consumer\u003cBoolean\u003e consumer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays/\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"NoDecksDisplay.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            createNewDeck.setOnAction(e -\u003e onCreateNewDeck());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.consumer \u003d consumer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //TODO: again, replace with a logger later on"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Will feedback to parent container which is the main window that the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * wants to switch to creating a new form. Main window will then handle the re-rendering."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void onCreateNewDeck() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consumer.accept(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 48
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/test/EndOfTestAlert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.gui.controllers.displays.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Alert window that opens upon finishing a test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class EndOfTestAlert {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * method that can be called by controller to display the alertbox."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param title Title of alert box."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param message Contents of alert box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static void display(String title, String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        window.setTitle(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        window.setMinWidth(250);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        label.setText(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Button closeButton \u003d new Button(\"Close\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        closeButton.setOnAction(e -\u003e window.close());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        layout.getChildren().addAll(label, closeButton);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        //"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Scene scene \u003d new Scene (layout);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        window.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 40
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/test/TestDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.displays.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.StateEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The display for a user to review cards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class TestDisplay extends AnchorPane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private AnchorPane cardDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button prevButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button endSessionButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button nextButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label scoreLabel; // for Shawn"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The flashcard that is currently on display in test mode."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private FlashCard cardOnDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The deck in use for the test."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Exam exam;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The index of the card in the deck that is currently on display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int nowShowing;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The user\u0027s current score. For Shawn"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int currentScore \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Consumer for cards to update the score attained for each card by the user. This consumer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * updates the currentScore in TestDisplay."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * For Shawn"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e getScore \u003d score -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (ExamRunner.isExamOngoing()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            updateStatDeckWithScore(score);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            renderCurrentScore();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cInteger\u003e updateMcqUserAttempt \u003d input -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        MultipleChoiceCard card \u003d (MultipleChoiceCard) exam.getCurrentCard();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        card.setUserAttempt(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cString\u003e updateStringUserAttempt \u003d input -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        JavascriptCard card \u003d (JavascriptCard) exam.getCurrentCard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        card.setAttempt(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e nextCard \u003d onNext -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        onShowNext();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cFlashCard\u003e changeTestState \u003d currCard -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (currCard.getClass().getSimpleName().equals(\"FrontBackCard\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_FBCARD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (currCard.getClass().getSimpleName().equals(\"MultipleChoiceCard\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_MCQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (currCard.getClass().getSimpleName().equals(\"JavaCard\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                || currCard.getClass().getSimpleName().equals(\"JavascriptCard\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_JSJAVA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e seeBack \u003d bool -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        seeBack();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e seeFront \u003d bool -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        seeFront();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e clearCardDisplay \u003d bool -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cAnchorPane\u003e swapCardDisplay \u003d pane -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardDisplay.getChildren().add(pane);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public TestDisplay(Exam exam) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"/TestDisplay.fxml\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            //show the first card - fails if no cards are present"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.exam \u003d exam;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardOnDisplay \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"GET_SCORE\", getScore);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_MCQ_ATTEMPT\", updateMcqUserAttempt);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_STRING_ATTEMPT\", updateStringUserAttempt);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SHOW_NEXT\", nextCard);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_TEST_STATE\", changeTestState);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SEE_FRONT\", seeFront);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SEE_BACK\", seeBack);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SWAP_CARD_DISPLAY\", swapCardDisplay);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"CLEAR_CARD_DISPLAY\", clearCardDisplay);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"UPDATE_TEST_STATE\", cardOnDisplay);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"SWAP_CARD_DISPLAY\", exam.getCardDisplayFront());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prevButton.setOnAction(e -\u003e onShowPrevious());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            endSessionButton.setOnAction(e -\u003e onEndSession());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            nextButton.setOnAction(e -\u003e onShowNext());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } catch (IOException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A method that renders the front view of all cards."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * If MCQ card or code cards have already been attempted (i.e. scored), their constructors will repopulate"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * the mcq options / code editors with the user\u0027s attempt."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeFront() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane currCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", currCardFront);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A method to render the back of the current card on display."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeBack() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane currCardBack \u003d exam.getCardDisplayBack();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", currCardBack);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The handler to render the previous card."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void onShowPrevious() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam.downIndex();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The handler to render the next card."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void onShowNext() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        boolean isEndOfDeck \u003d exam.upIndex();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isEndOfDeck) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"STOP_TIMELINE\", true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //sample renderer for Shawn"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderCurrentScore() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        scoreLabel.setText(\"Current Score: \" + exam.getResult());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * helper method that updates the exam deck with scores for each card."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param isCorrect boolean on whether the answer is correct."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void updateStatDeckWithScore(Boolean isCorrect) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            FlashCard currCard \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            if (currCard.getCardResult() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                exam.gradeQuestion(isCorrect);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                currCard.updateScore(isCorrect);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } catch (IndexNotFoundException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Event handler for ending session."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Terminates exam if there is an active exam and brings user to deck display."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onEndSession() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 131,
      "timothyleong97": 99
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/displays/test/TimedTestDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.gui.controllers.displays.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.windows.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.StateEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * The display for a user to review cards."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class TimedTestDisplay extends AnchorPane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private AnchorPane cardDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Button prevButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Button endSessionButton;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Button nextButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Label scoreLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The flashcard that is currently on display in test mode."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private FlashCard cardOnDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The deck in use for the test."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Exam exam;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The index of the card in the deck that is currently on display."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int nowShowing;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The user\u0027s current score. For Shawn"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int currentScore \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Consumer for cards to update the score attained for each card by the user. This consumer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * updates the currentScore in TestDisplay."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * For Shawn"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e getScore \u003d score -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (ExamRunner.isExamOngoing()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            updateStatDeckWithScore(score);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            renderCurrentScore();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cInteger\u003e updateMcqUserAttempt \u003d input -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        MultipleChoiceCard card \u003d (MultipleChoiceCard) exam.getCurrentCard();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        card.setUserAttempt(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cString\u003e updateStringUserAttempt \u003d input -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        JavascriptCard card \u003d (JavascriptCard) exam.getCurrentCard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        card.setAttempt(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e nextCard \u003d onNext -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        onShowNext();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cFlashCard\u003e changeTestState \u003d currCard -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (currCard.getClass().getSimpleName().equals(\"FrontBackCard\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_FBCARD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (currCard.getClass().getSimpleName().equals(\"MultipleChoiceCard\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_MCQ);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (currCard.getClass().getSimpleName().equals(\"JavaCard\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                || currCard.getClass().getSimpleName().equals(\"JavascriptCard\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.TEST_JSJAVA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e clearCardDisplay \u003d bool -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cAnchorPane\u003e swapCardDisplay \u003d pane -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardDisplay.getChildren().add(pane);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Integer durationInSeconds;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private IntegerProperty timeSeconds;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e stopTimeline \u003d bool -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        timeline.stop();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e seeBack \u003d bool -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        seeBack();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Consumer\u003cBoolean\u003e seeFront \u003d bool -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        seeFront();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public TimedTestDisplay(Exam exam) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Displays\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                    + \"/TimedTestDisplay.fxml\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            //show the first card - fails if no cards are present"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.exam \u003d exam;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.durationInSeconds \u003d exam.getDuration();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardOnDisplay \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.timeSeconds \u003d new SimpleIntegerProperty(durationInSeconds);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            //"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"GET_SCORE\", getScore);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_MCQ_ATTEMPT\", updateMcqUserAttempt);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_STRING_ATTEMPT\", updateStringUserAttempt);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SHOW_NEXT\", nextCard);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"UPDATE_TEST_STATE\", changeTestState);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SEE_FRONT\", seeFront);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SEE_BACK\", seeBack);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"SWAP_CARD_DISPLAY\", swapCardDisplay);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"CLEAR_CARD_DISPLAY\", clearCardDisplay);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.addConsumer(\"STOP_TIMELINE\", stopTimeline);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"UPDATE_TEST_STATE\", cardOnDisplay);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"SWAP_CARD_DISPLAY\", exam.getCardDisplayFront());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            prevButton.setOnAction(e -\u003e onShowPrevious());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            endSessionButton.setOnAction(e -\u003e onEndSession());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            nextButton.setOnAction(e -\u003e onShowNext());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            timerLabel.textProperty().bind(timeSeconds.asString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            setTimer();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } catch (IOException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * A method that renders the front view of all cards."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * If MCQ card or code cards have already been attempted (i.e. scored), their constructors will repopulate"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * the mcq options / code editors with the user\u0027s attempt."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeFront() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane currCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", currCardFront);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * A method to render the back of the current card on display."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void seeBack() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane currCardBack \u003d exam.getCardDisplayBack();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", currCardBack);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The handler to render the previous card."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onShowPrevious() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam.downIndex();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * The handler to render the next card."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onShowNext() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        boolean isEndOfDeck \u003d exam.upIndex();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isEndOfDeck) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"STOP_TIMELINE\", true);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    //sample renderer for Shawn"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void renderCurrentScore() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        scoreLabel.setText(\"Current Score: \" + exam.getResult());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * helper method that updates the exam deck with scores for each card."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param isCorrect boolean on whether the answer is correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void updateStatDeckWithScore(Boolean isCorrect) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            FlashCard currCard \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            if (currCard.getCardResult() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                exam.gradeQuestion(isCorrect);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                currCard.updateScore(isCorrect);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } catch (IndexNotFoundException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void setTimer() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        timeSeconds.set(durationInSeconds);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        timeline \u003d new Timeline(new KeyFrame(Duration.seconds(durationInSeconds + 1),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(durationInSeconds + 1),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            event -\u003e ExamRunner.terminateExam()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Event handler for ending session."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Terminates exam if there is an active exam and brings user to deck display."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private void onEndSession() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"STOP_TIMELINE\", true);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 262
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JavaEditorApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Application controlling a Java editor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaEditorApplication extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JavaEditor.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder Java\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate Java code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic class code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"package dream.fcard.util.code.data;\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/**\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \" * Do not change the class name!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \" */\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"public class Main {\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    public static void main(String[] args) {\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        System.out.println(\\\"Hello world\\\");\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 52
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JavaEditorController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavaRunner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The controller for the Java Editor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaEditorController extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String fileName \u003d \"Main.java\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in Java and returns the output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeCode(fileName, code);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String filepath \u003d StorageManager.getCodePath(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String compileOutput \u003d JavaRunner.compile(filepath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (!compileOutput.isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            consoleOutput.setText(compileOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String output \u003d JavaRunner.runJava(filepath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            consoleOutput.setText(output);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 5,
      "timothyleong97": 39
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JavaTestEvaluator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.DeepCopy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.JavaTestCaseRunner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * An association class between a JavaCard and a JavaTestCaseRunner"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaTestEvaluator {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, ArrayList\u003cTestCase\u003e\u003e\u003e returnCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaTestCaseRunner runner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaCard card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in JavaScript and returns the output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cTestCase\u003e cases \u003d DeepCopy.duplicateTestCases(card.getTestCases());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (TestCase c : cases) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            runner \u003d new JavaTestCaseRunner(c, code);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String output \u003d runner.testCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            c.setActualOutput(output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        returnCode.accept(new Pair\u003c\u003e(code, cases)); // send results back to the card"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        setConsoleOutput(cases);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCodeReturner(Consumer\u003cPair\u003cString, ArrayList\u003cTestCase\u003e\u003e\u003e returnResult) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.returnCode \u003d returnResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCard(JavaCard c) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void setConsoleOutput(ArrayList\u003cTestCase\u003e cases) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        // return results to user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (TestCase testCase : cases) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e difference \u003d testCase.checkDiff(testCase.getActualOutput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (difference.fst()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                sb.append(\"Pass\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"____________________________\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                sb.append(\"Fail\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"____________________________\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"Expected: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(difference.snd().fst())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"____________________________\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"Actual: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(difference.snd().snd())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(sb.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 89
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JavaTestRunnerApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A popup window that allows the user to enter JS code for the flashcard in the test."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaTestRunnerApplication extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, ArrayList\u003cTestCase\u003e\u003e\u003e sendResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaCard card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaTestRunnerApplication(Consumer\u003cPair\u003cString, ArrayList\u003cTestCase\u003e\u003e\u003e sendResult, JavaCard c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.sendResult \u003d sendResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Windows/JavaTestEvaluator.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder Java\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavaTestEvaluator evaluator \u003d fxmlloader.getController();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            evaluator.setCodeReturner(sendResult);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            evaluator.setCard(card);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate JavaScript code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (card.getAttempt() \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return \"import java.util.Scanner;\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"public class Main {\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"    public static void main(String[] args) {\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"        //Write your code here\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"        Scanner sc \u003d new Scanner(System.in);\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"    }\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + \"}\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return card.getAttempt();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 75
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JsEditorApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The application for the JavaScript Editor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsEditorApplication extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JsEditor.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder JS\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate JavaScript code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"//use print() to print text\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 46
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JsEditorController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavascriptRunner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The application for the JavaScript Editor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsEditorController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in JavaScript and returns the output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String result \u003d JavascriptRunner.evaluateString(code);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 32
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JsTestEvaluator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.JsTestCaseRunner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A controller for JsTestRunnerApplication."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestEvaluator {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, Pair\u003cInteger, Integer\u003e\u003e\u003e returnCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JsTestCaseRunner runner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in JavaScript and returns the output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        runner \u003d new JsTestCaseRunner(code, card.getBack());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        returnCode.accept(runner.testCode()); // send results back to the card"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(runner.getConsoleDisplay());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCodeReturner(Consumer\u003cPair\u003cString, Pair\u003cInteger, Integer\u003e\u003e\u003e returnResult) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.returnCode \u003d returnResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCard(JavascriptCard c) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 43
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/jsjava/JsTestRunnerApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.jsjava;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A popup window that allows the user to enter JS code for the flashcard in the test."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestRunnerApplication extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cString, Pair\u003cInteger, Integer\u003e\u003e\u003e sendResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestRunnerApplication(Consumer\u003cPair\u003cString, Pair\u003cInteger, Integer\u003e\u003e\u003e sendResult, JavascriptCard c) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.sendResult \u003d sendResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JsTestEvaluator.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder JS\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JsTestEvaluator evaluator \u003d fxmlloader.getController();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            evaluator.setCodeReturner(sendResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            evaluator.setCard(card);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate JavaScript code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (card.getAttempt() \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return \"//use print() to print text\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return card.getAttempt();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 64
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/CardCreatingWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.javacard.JavaTestCaseInputBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.jscard.JsTestCaseInputTextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.mcqcard.McqOptionsSetter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ChoiceBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Creates a card within CreateDeckDisplay."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class CardCreatingWindow extends VBox {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField questionField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox answerContainer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ChoiceBox\u003cString\u003e cardTypeSelector;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button onAddQuestion;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label addAnswerLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Strings used to represent card types."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String frontBack \u003d \"Front-back\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String mcq \u003d \"MCQ\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String js \u003d \"JavaScript\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String java \u003d \"Java\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Controllers for the card inputs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea frontBackTextArea;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private McqOptionsSetter mcqOptionsSetter;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JsTestCaseInputTextArea jsTestCaseInputTextArea;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaTestCaseInputBox javaTestCaseInputBox;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String cardType \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Deck tempDeck \u003d new Deck();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String testCases;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cInteger\u003e incrementCounterInParent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public CardCreatingWindow(Consumer\u003cInteger\u003e incrementCounterInParent, Consumer\u003cFlashCard\u003e saveToDeck) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Windows/CardCreatingWindow.fxml\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.getItems().addAll(frontBack, mcq, js, java);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                String currentlySelected \u003d cardTypeSelector.getValue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (!cardType.equals(currentlySelected)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    cardType \u003d currentlySelected;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    changeInputBox(cardType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setValue(frontBack);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            onAddQuestion.setOnAction(e -\u003e addCardToDeck(saveToDeck));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.incrementCounterInParent \u003d incrementCounterInParent;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Changes the input box according to the card the user is making."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param cardType the type of card the user is making."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void changeInputBox(String cardType) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        answerContainer.getChildren().clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (cardType.equals(frontBack)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            frontBackTextArea \u003d new TextArea();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(frontBackTextArea);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addAnswerLabel.setText(\"Add your answer\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(mcq)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            mcqOptionsSetter \u003d new McqOptionsSetter();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(mcqOptionsSetter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addAnswerLabel.setText(\"Enter your options\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(js)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsTestCaseInputTextArea \u003d new JsTestCaseInputTextArea();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(jsTestCaseInputTextArea);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addAnswerLabel.setText(\"Add your asserts\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(java)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaTestCaseInputBox \u003d new JavaTestCaseInputBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(javaTestCaseInputBox);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            addAnswerLabel.setText(\"Add your test cases\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Adds a card to the temporary deck inside CardCreatingWindow."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void addCardToDeck(Consumer\u003cFlashCard\u003e saveToDeck) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (cardType.equals(mcq)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //validation - non-empty question, at least one non-empty option, and a designated right answer"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (!mcqOptionsSetter.hasAtLeastOneNonEmptyOption()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter at least 1 option!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (!mcqOptionsSetter.hasDesignatedRightAnswer()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to tell me which answer is correct!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d Integer.toString(mcqOptionsSetter.getIndexOfRightAnswer()); //already 1-indexed"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cString\u003e choices \u003d mcqOptionsSetter.getChoices();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            int numChoices \u003d choices.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            for (int i \u003d 0; i \u003c numChoices; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                String curr \u003d choices.remove(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                if (!curr.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                    choices.add(curr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            MultipleChoiceCard mcqCard \u003d new MultipleChoiceCard(front, back, choices);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            saveToDeck.accept(mcqCard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(frontBack)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            // validation - non-empty fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (frontBackTextArea.getText().isBlank()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter an answer!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d frontBackTextArea.getText();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FrontBackCard card \u003d new FrontBackCard(front, back);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            saveToDeck.accept(card);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(js)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (!jsTestCaseInputTextArea.hasTestCase()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a test case!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String testCases \u003d jsTestCaseInputTextArea.getAssertions();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavascriptCard card \u003d new JavascriptCard(front, testCases);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            saveToDeck.accept(card);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(java)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (!javaTestCaseInputBox.hasAtLeastOneTestCase()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a test case!\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cTestCase\u003e testCases \u003d javaTestCaseInputBox.getTestCases();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavaCard card \u003d new JavaCard(front, testCases);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            saveToDeck.accept(card);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        incrementCounterInParent.accept(1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        clearFields();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Wipe user input from existing input fields to make way for a new card."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void clearFields() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        questionField.setText(\"\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (frontBackTextArea !\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            frontBackTextArea.setText(\"\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (mcqOptionsSetter !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            mcqOptionsSetter \u003d new McqOptionsSetter();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(mcqOptionsSetter);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (jsTestCaseInputTextArea !\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsTestCaseInputTextArea \u003d new JsTestCaseInputTextArea();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(jsTestCaseInputTextArea);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (javaTestCaseInputBox !\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaTestCaseInputBox \u003d new JavaTestCaseInputBox();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().clear();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(javaTestCaseInputBox);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "PhireHandy": 11,
      "timothyleong97": 207
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/CardEditingWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.javacard.JavaTestCaseInputBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.jscard.JsTestCaseInputTextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.mcqcard.McqOptionsSetter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ChoiceBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A window that looks like CardCreatingWindow but which opens in DeckDisplay for the user to quickly edit a card."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "// todo: suggestion - instead of opening within DeckDisplay, do the same as CardCreatingWindow, so"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//  that the \"Save Deck\" and \"Cancel\" buttons appear too"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class CardEditingWindow extends VBox {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField questionField;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox answerContainer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ChoiceBox\u003cString\u003e cardTypeSelector;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button saveChangesButton;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button cancelButton;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea frontBackTextArea;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private McqOptionsSetter mcqOptionsSetter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JsTestCaseInputTextArea jsTestCaseInputTextArea;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavaTestCaseInputBox javaTestCaseInputBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String cardType \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String frontBack \u003d \"Front-back\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String mcq \u003d \"MCQ\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String java \u003d \"Java\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private final String js \u003d \"JavaScript\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private FlashCard card;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public CardEditingWindow(FlashCard card, Consumer\u003cFlashCard\u003e onSave, Consumer\u003cBoolean\u003e onCancel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    .getResource(\"/view/Windows/CardEditingWindow.fxml\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.getItems().addAll(frontBack, mcq, js, java);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                String currentlySelected \u003d cardTypeSelector.getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (!cardType.equals(currentlySelected)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    cardType \u003d currentlySelected;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    changeInputBox(currentlySelected);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            questionField.setText(card.getFront());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cancelButton.setOnAction(e -\u003e onCancel.accept(true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            saveChangesButton.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                FlashCard newCard \u003d getEditedCard();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (newCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                } // card editing has mistakes, keep the editing window open"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                onSave.accept(newCard);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                onCancel.accept(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            populateExistingAnswers();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Changes the input box from a textbox to the MCQ setter and vice versa."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param cardType the type of card."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void changeInputBox(String cardType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        answerContainer.getChildren().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (cardType.equals(frontBack)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            frontBackTextArea \u003d new TextArea();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(frontBackTextArea);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(mcq)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            mcqOptionsSetter \u003d new McqOptionsSetter();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(mcqOptionsSetter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(js)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsTestCaseInputTextArea \u003d new JsTestCaseInputTextArea();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(jsTestCaseInputTextArea);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(java)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaTestCaseInputBox \u003d new JavaTestCaseInputBox();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            answerContainer.getChildren().add(javaTestCaseInputBox);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Take the card\u0027s existing answer(s) and add them to the cardEditingWindow."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void populateExistingAnswers() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (card instanceof MultipleChoiceCard) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cString\u003e choices \u003d ((MultipleChoiceCard) card).generateCopyOfChoices();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setValue(mcq);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            mcqOptionsSetter.deleteFirstRow(); //take out the empty first row"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            for (int i \u003d 0; i \u003c choices.size(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (((MultipleChoiceCard) card).getCorrectAnswerIndex() - 1 \u003d\u003d i) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    mcqOptionsSetter.addNewRow(choices.get(i), true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                mcqOptionsSetter.addNewRow(choices.get(i), false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (card instanceof FrontBackCard) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setValue(frontBack);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            frontBackTextArea.setText(card.getBack());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (card instanceof JavascriptCard) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setValue(js);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsTestCaseInputTextArea.setTextArea(card.getBack());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (card instanceof JavaCard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            cardTypeSelector.setValue(java);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            javaTestCaseInputBox.setTestCaseRows(((JavaCard) card).getTestCases());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    FlashCard getEditedCard() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (cardType.equals(mcq)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //validation - non-empty question, at least one non-empty option, and a designated right answer"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (!mcqOptionsSetter.hasAtLeastOneNonEmptyOption()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter at least 1 option!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (!mcqOptionsSetter.hasDesignatedRightAnswer()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to tell me which answer is correct!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d Integer.toString(mcqOptionsSetter.getIndexOfRightAnswer()); //already 1-indexed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cString\u003e choices \u003d mcqOptionsSetter.getChoices();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new MultipleChoiceCard(front, back, choices);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(frontBack)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            // validation - non-empty fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (frontBackTextArea.getText().isBlank()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter an answer!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d frontBackTextArea.getText(); // NullPointerException will not happen"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new FrontBackCard(front, back);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(js)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            // validation"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else if (!jsTestCaseInputTextArea.hasTestCase()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a test case!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d jsTestCaseInputTextArea.getAssertions();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new JavascriptCard(front, back);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else if (cardType.equals(java)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //validation"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (questionField.getText().isBlank()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a question!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (!javaTestCaseInputBox.hasAtLeastOneTestCase()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"You need to enter a test case!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d questionField.getText();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ArrayList\u003cTestCase\u003e testCases \u003d javaTestCaseInputBox.getTestCases();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new JavaCard(front, testCases);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 3,
      "timothyleong97": 201
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/CliEditor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * JavaFX Application experimenting CLIEditor for user inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * TODO constructor takes in textarea"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class CliEditor extends Application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Caret character."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private final String caretChar \u003d \"_\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Prompt when in multiline is false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private final String promptChar \u003d \"»\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Message display at beginning of multiline input mode."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private final String multilineMessage \u003d \"(ctrl+d to submit)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * How fast the cursor blinks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private final int blinkSpeed \u003d 500;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Number of rows to be rendered."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private final int renderRows \u003d 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // setup constants --------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Text area itself."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private TextArea textArea \u003d new TextArea();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Cursor blinker."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private Timeline timeline \u003d new Timeline(new KeyFrame("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Duration.millis(blinkSpeed),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        x -\u003e toggleCaret()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // objects ----------------------------------------------------------------"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * All texts printed to the text area."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e(Arrays.asList(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * History of single line inputs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Current history index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int historyIndex \u003d -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Flag that detects just scrolled up in history"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean justHistory \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Caret position at the current line."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int linecaret \u003d lines.get(0).length();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The current line; index in lines."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int line \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The top most line to be rendered"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int renderline \u003d line;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Upper bound where user can edit and traverse"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int editableLine \u003d line;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Left bound where user can edit and traverse"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int editableCaret \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Flag if multiline mode or single line mode."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean multiline \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Blink flag."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean showCaret \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // variables --------------------------------------------------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setEditable(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setOnKeyPressed(this::processKeyInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setFont(Font.loadFont("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                getClass().getClassLoader().getResource(\"fonts/Inconsolata.otf\").toExternalForm(), 12));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setWrapText(true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StackPane root \u003d new StackPane();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        root.getChildren().add(textArea);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        primaryStage.setScene(new Scene(root, 500, 250));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        printNewLine(\"Welcome to FlashCardPro\", false, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        printMultiEdit(\"{\\n  \\\"key\\\" : 123\\n}\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print a single line of text and enter single line mode."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void printNewLine(String str) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        printNewLine(str, true, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print a single line of text."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str           string to be printed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param newPreLine    add a new line before printing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param multi         true; enters multiline mode following printing"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void printNewLine(String str, Boolean newPreLine, Boolean multi) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        multiline \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        gotoEnd();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (newPreLine) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            newLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        characterInput(str);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        newLine();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!multi) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            printPrompt();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            editableLine \u003d line;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            editableCaret \u003d linecaret;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print a multiline string that the user is able to edit"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str   string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void printMultiEdit(String str) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        printNewLine(multilineMessage, true, true);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (str.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (String s : str.split(\"\\n\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            characterInput(s);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            newLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        backSpace();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // TODO assign printNewLine methods to consumer"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * KeyEvent handler for textArea."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param e KeyEvent argument"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void processKeyInput(KeyEvent e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int code \u003d e.getCode().getCode();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (code \u003d\u003d 68 \u0026\u0026 e.isControlDown() \u0026\u0026 multiline) { //multiline escape"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            multilineEscape();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 67 \u0026\u0026 e.isControlDown() \u0026\u0026 !multiline) { // clear line"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            clearSingleLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 37) { // left"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            moveLeft();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 38) { // up"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            moveUp();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 39) { // right"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            moveRight();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 40) { // down"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            moveDown();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 10) { // enter"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            newLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (code \u003d\u003d 8) { // backspace"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            backSpace();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (validKey(code)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            characterInput(e.getText());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (code !\u003d 38 \u0026\u0026 code !\u003d 40) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            justHistory \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        render();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * User wants to submit input"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void sendInput() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String str \u003d getInput();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!multiline) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            history.add(str);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"YOUR TEXT:\\n\" + str + \"\\n---\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //TODO call responder with str"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        historyIndex \u003d -1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * End multiline mode"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void multilineEscape() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        sendInput();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        gotoEnd();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        newLine();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        multiline \u003d false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Navigation left."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void moveLeft() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003d\u003d editableLine \u0026\u0026 linecaret \u003c\u003d editableCaret) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (linecaret \u003e 0) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret--;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (line \u003e 0) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line--;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d lines.get(line).length();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Nagivation up."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void moveUp() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!multiline \u0026\u0026 history.size() \u003e 0) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (historyIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (historyIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                historyIndex \u003d history.size() - 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                historyIndex--;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            printHistory();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003d\u003d editableLine) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (line \u003e 0) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line--;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d Math.min(linecaret, lines.get(line).length());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Navigation right."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void moveRight() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003d\u003d lines.size() - 1 \u0026\u0026 linecaret \u003e\u003d lines.get(line).length()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (linecaret \u003d\u003d lines.get(line).length()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line++;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d 0;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret++;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Navigation down."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void moveDown() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (justHistory) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (historyIndex \u003c history.size() - 1) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                historyIndex++;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                printHistory();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                clearSingleLine();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003c lines.size() - 1) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line++;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d Math.min(linecaret, lines.get(line).length());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Newline action."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void newLine() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (multiline) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String lineString \u003d lines.get(line);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.set(line, lineString.substring(0, linecaret));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.add(line + 1, lineString.substring(linecaret));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line++;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            sendInput();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.add(\"\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            printPrompt();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Backspace action."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void backSpace() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003d\u003d editableLine \u0026\u0026 linecaret \u003d\u003d editableCaret) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            historyIndex \u003d -1;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (linecaret \u003d\u003d 0) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d lines.get(line - 1).length();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.set(line - 1, lines.get(line - 1) + lines.get(line));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.remove(line);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            line--;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String lineString \u003d lines.get(line);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.set(line, lineString.substring(0, linecaret - 1) + lineString"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .substring(linecaret));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret--;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Single line key in string."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c string keyed in"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void characterInput(String c) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String lineString \u003d lines.get(line);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        lines.set(line, lineString.substring(0, linecaret) + c + lineString.substring(linecaret));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        linecaret +\u003d c.length();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Set cursor to end of all texts."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void gotoEnd() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        line \u003d lines.size() - 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        linecaret \u003d lines.get(line).length();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Clears the user input for single line."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void clearSingleLine() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!multiline) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            historyIndex \u003d -1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            justHistory \u003d false;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lines.set(line, lines.get(line).substring(0, editableCaret));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            linecaret \u003d editableCaret;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print user prompt."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void printPrompt() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String status \u003d \"default\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        gotoEnd();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        characterInput(\"(\" + status + \")\" + promptChar);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        editableLine \u003d line;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        editableCaret \u003d linecaret;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        multiline \u003d false;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print history."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void printHistory() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String lineString \u003d lines.get(line);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String newLine \u003d lineString.substring(0, editableCaret) + history.get(historyIndex);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        lines.set(line, newLine);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        linecaret \u003d newLine.length();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        justHistory \u003d true;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Check if keycode is a valid printable character."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param keycode   keycode"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return          true; is valid"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean validKey(int keycode) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return keycode \u003d\u003d 13"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || (keycode \u003e 185 \u0026\u0026 keycode \u003c 193)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || (keycode \u003e 218 \u0026\u0026 keycode \u003c 223)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || (keycode \u003e\u003d 32 \u0026\u0026 keycode \u003c\u003d 126);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Collate user input into a single string."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  user input"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String getInput() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String str \u003d lines.get(editableLine).substring(editableCaret);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d editableLine + 1; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            str +\u003d \"\\n\" + lines.get(i);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Render with caret"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void render() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        render(true);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Render"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param withCaret true; with caret"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void render(Boolean withCaret) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String totalOutput \u003d \"\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (line \u003e\u003d renderline + renderRows) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            renderline \u003d line - renderRows + 1;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (line \u003c renderline) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            renderline \u003d line;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d renderline; i \u003c Math.min(lines.size(), renderline + renderRows); i++) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String lineString \u003d lines.get(i);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            totalOutput +\u003d i \u003d\u003d line \u0026\u0026 withCaret ? addCaret(lineString) : lineString;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003c lines.size() - 1) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                totalOutput +\u003d \"\\n\";"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setText(totalOutput);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        textArea.setScrollTop(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (withCaret) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            showCaret \u003d true;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            timeline.play();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Add caret to current line string."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param lineString    current line string"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return              current line string with caret"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String addCaret(String lineString) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return linecaret \u003d\u003d lineString.length() ? lineString + caretChar"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                : lineString.substring(0, linecaret) + caretChar + lineString.substring(linecaret + 1);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Used by timer for caret blinking."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private void toggleCaret() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        render(showCaret);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        showCaret \u003d !showCaret;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 467
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/DeckStatisticsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.SessionListUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Window to display statistics for a given Deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class DeckStatisticsWindow extends ScrollPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label windowTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label numCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label totalSessions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label totalDuration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label sessionsThisWeek;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private TableView\u003cDeck\u003e testSessionsTableView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private SessionList testSessionList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Creates a new instance of DeckStatisticsWindow. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public DeckStatisticsWindow(Deck deck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                .getResource(\"/view/Windows/DeckStatisticsWindow.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            //TODO: replace with logger"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        windowTitle.setText(\"My statistics for deck: \" + deck.getDeckName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.testSessionList \u003d deck.getTestSessionList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //ArrayList\u003cDeck\u003e decks \u003d State.getDecks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        displaySummaryStats();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.testSessionsTableView \u003d StatsDisplayUtil.getTestSessionsTableView(deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.sessionsScrollPane.setContent(sessionsTableView);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //sessionsTableView \u003d StatsDisplayUtil.getSessionsTableView(deckStats.getSessionList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Retrieves and displays numerical stats, like the total number of login sessions. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private void displaySummaryStats() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList testSessionList \u003d deck.getTestSessionList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int numberOfCards \u003d deck.getNumberOfCards();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.numCards.setText(\"Number of cards in deck: \" + numberOfCards"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + (numberOfCards \u003d\u003d 1 ? \" card\" : \" cards\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sublistForThisWeek \u003d SessionListUtil.getSublistForThisWeek("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            testSessionList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int numSessionsThisWeek \u003d sublistForThisWeek.getNumberOfSessions();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionsThisWeek.setText(\"Total test sessions this week: \" + numSessionsThisWeek"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + (numSessionsThisWeek \u003d\u003d 1 ? \" session\" : \" sessions\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //int numSessions \u003d testSessionList.getNumberOfSessions();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //totalSessions.setText(\"Total login sessions: \" + numSessions"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //    + (numSessions \u003d\u003d 1 ? \" session\" : \" sessions\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //String duration \u003d testSessionList.getTotalDurationAsString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //totalDuration.setText(\"Total login duration: \" + duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 80
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.createandeditdeck.CreateDeckDisplay;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.displayingdecks.DeckDisplay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.displays.displayingdecks.NoDecksDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.jsjava.JavaEditorApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.gui.controllers.jsjava.JsEditorApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.ConsumerSchema;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.respond.Responder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.StatsDisplayUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The single-page parent component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class MainWindow extends VBox {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ListView\u003cDeck\u003e deckList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ScrollPane displayScrollPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private VBox displayContainer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private MenuItem onCreateNewDeckMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private MenuItem jsEditorMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private MenuItem javaEditorMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private MenuItem quitMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private MenuItem statisticsMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Label messageLabel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextField commandLine;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e displayDecks \u003d b -\u003e render();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e renderList \u003d b -\u003e renderDecks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPane\u003e swapDisplays \u003d p -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().add(p);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cString\u003e displayMessage \u003d message -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        messageLabel.setText(message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e clearMessage \u003d b -\u003e messageLabel.setText(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //Example code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e create \u003d b -\u003e showCreateNewDeckForm();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cInteger\u003e seeDeck \u003d i -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Deck d \u003d StateHolder.getState().getDecks().get(i - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deckList.getSelectionModel().select(d);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        DeckDisplay deckDisplay \u003d new DeckDisplay(d);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().add(deckDisplay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private Consumer\u003cBoolean\u003e exitCreate \u003d b -\u003e exitCreate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cBoolean\u003e quitProgram \u003d b -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //UserStats.endCurrentSession();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        // save all files only on exit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StorageManager.saveAll(StateHolder.getState().getDecks());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //StorageManager.saveStats();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private CreateDeckDisplay tempCreateDeckDisplay;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Binds the vertical height of the scroll panes to the size of the Nodes inside them so that the scrollbar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * activates when there is a vertical overflow. Also renders the contents of the decks and the display pane."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayScrollPane.vvalueProperty().bind(displayContainer.heightProperty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        onCreateNewDeckMenuItem.setOnAction(e -\u003e showCreateNewDeckForm());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        registerConsumers();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayMessage.accept(\"Welcome to FlashCard Pro!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deckList.setOnMouseClicked(e -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Deck d \u003d deckList.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            seeDeck.accept(StateHolder.getState().getDecks().indexOf(d) + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        quitMenuItem.setOnAction(e -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            quitProgram.accept(true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        javaEditorMenuItem.setOnAction(e -\u003e openEditor(true));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        jsEditorMenuItem.setOnAction(e -\u003e openEditor(false));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        statisticsMenuItem.setOnAction(e -\u003e StatsDisplayUtil.openStatisticsWindow());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        render();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Called when app starts or user has exited editing mode."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Purpose is to refresh the whole main window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void render() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderDecks();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        renderDisplayPane();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Pulls updated list of decks from model and re-displays the deck names."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Note: can replace with ObservableList if we can figure out the API"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderDecks() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cDeck\u003e decks \u003d StateHolder.getState().getDecks();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deckList.setItems(FXCollections.observableArrayList(decks));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        deckList.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Creates the display pane telling the user there are no decks, with a button to start creating one."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Renders the display pane."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void inviteUserToCreateDeckInDisplayPane() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().add(new NoDecksDisplay(wantsToCreateDeck -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (wantsToCreateDeck) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                showCreateNewDeckForm();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Switches the display pane to an edit pane, used in initialising step/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void showCreateNewDeckForm() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        this.tempCreateDeckDisplay \u003d new CreateDeckDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        displayContainer.getChildren().add(tempCreateDeckDisplay);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * Switches the display pane to create pane, used to enter StateEnun.CREATE."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // * @param s The name of the deck being created."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //private void showCreateNewDeckForm(String s) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    this.tempCreateDeckDisplay \u003d new CreateDeckDisplay(s);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //    displayContainer.getChildren().add(tempCreateDeckDisplay);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * When user wants to create/edit deck, put the editing pane."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Otherwise when the user clicks on a deck, put the deck display Pane containing info about the deck."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * If there are no decks, and the user has not created a deck, display a pane asking user to create a"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * new deck."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void renderDisplayPane() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (StateHolder.getState().isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            inviteUserToCreateDeckInDisplayPane();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            //render the details of the first deck"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            DeckDisplay deckDisplay \u003d new DeckDisplay(StateHolder.getState().getDecks().get(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            displayContainer.getChildren().clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            displayContainer.getChildren().add(deckDisplay);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Responsible for clearing text input area after user presses the Enter key."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Also responsible for getting the Responder class to parse and execute the entered command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String input \u003d commandLine.getText();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Responder.takeInput(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        commandLine.clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Registers consumers in State for global access."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void registerConsumers() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.SWAP_DISPLAYS, swapDisplays);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.DISPLAY_DECKS, displayDecks);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.RENDER_LIST, renderList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.DISPLAY_MESSAGE, displayMessage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.CLEAR_MESSAGE, clearMessage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.CREATE_NEW_DECK, create);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.SEE_SPECIFIC_DECK, seeDeck);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Consumers.addConsumer(ConsumerSchema.QUIT_PROGRAM, quitProgram);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //Consumers.addConsumer(ConsumerSchema.OPEN_WINDOW, openWindow);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Opens the Code Editor."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void openEditor(boolean isJava) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (isJava) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JavaEditorApplication app \u003d new JavaEditorApplication();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            app.start(stage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JsEditorApplication app \u003d new JsEditorApplication();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            app.start(stage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 16,
      "AHaliq": 1,
      "PhireHandy": 7,
      "timothyleong97": 201
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/controllers/windows/StatisticsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.controllers.windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStats;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStatsHolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.SessionListUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.StatsDisplayUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Window to display user\u0027s statistics."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class StatisticsWindow extends ScrollPane {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label totalSessions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label sessionsThisWeek;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label totalDuration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Label averageDuration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private ScrollPane sessionsScrollPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private TableView\u003cSession\u003e sessionsTableView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private ScrollPane deckTableScrollPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private TableView\u003cDeck\u003e deckTableView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Creates a new instance of StatisticsWindow. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public StatisticsWindow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                .getResource(\"/view/Windows/StatisticsWindow.fxml\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            //TODO: replace with logger"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.userStats \u003d UserStatsHolder.getUserStats();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        displaySummaryStats();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionsTableView \u003d StatsDisplayUtil.getUserSessionsTableView();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionsScrollPane.setContent(sessionsTableView);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.deckTableView \u003d StatsDisplayUtil.getDeckTableView();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.deckTableScrollPane.setContent(deckTableView);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        allowDeckStatisticsWindowToBeOpened();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Retrieves and displays numerical stats, like the total number of login sessions. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private void displaySummaryStats() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int numSessions \u003d userStats.getSessionList().getNumberOfSessions();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.totalSessions.setText(\"Total login sessions: \" + numSessions"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + (numSessions \u003d\u003d 1 ? \" session\" : \" sessions\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sublistForThisWeek \u003d SessionListUtil.getSublistForThisWeek("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            userStats.getSessionList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int numSessionsThisWeek \u003d sublistForThisWeek.getNumberOfSessions();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionsThisWeek.setText(\"Total login sessions this week: \" + numSessionsThisWeek"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + (numSessionsThisWeek \u003d\u003d 1 ? \" session\" : \" sessions\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String duration \u003d userStats.getSessionList().getTotalDurationAsString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.totalDuration.setText(\"Total login duration: \" + duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String averageDuration \u003d userStats.getSessionList().getAverageDurationAsString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.averageDuration.setText(\"Average duration per login: \" + averageDuration);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Allows the relevant DeckStatisticsWindow to be opened when a row of the deckTableView is double-clicked. */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private void allowDeckStatisticsWindowToBeOpened() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author nattanyz-reused"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // solution adapted from https://stackoverflow.com/questions/30191264/javafx-tableview-"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // how-to-get-the-row-i-clicked"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.deckTableView.setRowFactory(tv -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            TableRow\u003cDeck\u003e row \u003d new TableRow\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            row.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                if (!row.isEmpty() \u0026\u0026 event.getButton() \u003d\u003d MouseButton.PRIMARY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    \u0026\u0026 event.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    Deck selectedDeck \u003d row.getItem();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    StatsDisplayUtil.openDeckStatisticsWindow(selectedDeck);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            return row;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 103,
      "-": 2
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Interface to define behaviour of exams."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Look to eventually expand to timed and untimed tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public interface Exam {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public FlashCard getCurrentCard();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getDeck();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void gradeQuestion(Boolean isCorrect) throws IndexNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public boolean upIndex();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void downIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public String getResult();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getIndex();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getDuration();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public AnchorPane getCardDisplayFront();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public AnchorPane getCardDisplayBack();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 32,
      "huiminlim": 2
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/ExamRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.displays.test.EndOfTestAlert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Singleton class that ensures that there is only ONE instance of exam."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class ExamRunner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private static Exam exam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private static boolean examOngoing;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private ExamRunner() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * static method that creates an exam."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param deck contains cards for the exam."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param duration contains duration of exam in seconds."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static void createExam(ArrayList\u003cFlashCard\u003e deck, int duration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam \u003d new UntimedExam(deck, duration);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        examOngoing \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static Exam getCurrentExam() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return exam;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * method that terminates an exam."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Calls a popup window that displays the result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Removes the instance of the exam in singleton class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static void terminateExam() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        String result \u003d exam.getResult();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        EndOfTestAlert.display(\"Results\", \"Final Score: \" + result);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        examOngoing \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static void clearExam() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        exam \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public static boolean isExamOngoing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return examOngoing;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 43,
      "AHaliq": 2,
      "timothyleong97": 6
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/Result.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Result object that helps to keep track of score."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private final int maxScore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int finalScore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public Result(int maxScore) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.finalScore \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public String getScore() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return finalScore + \"/\" + maxScore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Simulates marking a question and updates score if correct."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param correct boolean on whether answer is correct or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void mark(boolean correct) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (correct) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.finalScore++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 29
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/UntimedExam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.backview.McqCardBack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.backview.SimpleCardBack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.frontview.BasicFrontBackCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.frontview.JavaFront;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.frontview.JsCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.cards.frontview.McqCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.logic.respond.Consumers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Untimed Exam mode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class UntimedExam implements Exam {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private final ArrayList\u003cFlashCard\u003e testDeck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e initialDeck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int durationInSeconds;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public UntimedExam(ArrayList\u003cFlashCard\u003e deck, int durationInSeconds) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.initialDeck \u003d deck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.testDeck \u003d createTestDeck();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.result \u003d new Result(testDeck.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.durationInSeconds \u003d durationInSeconds;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public FlashCard getCurrentCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return testDeck.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void gradeQuestion(Boolean isCorrect) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            result.mark(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public boolean upIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (index \u003c testDeck.size() - 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.index++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (index \u003d\u003d testDeck.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"DISPLAY_MESSAGE\", \"No more cards in this deck!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void downIndex() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (this.index !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.index--;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return this.result.getScore();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getDeck() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return this.testDeck;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Duplicates the test deck so that stats class can use it (for Nat)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @return ArrayList of Flashcards from the initial deck."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e createTestDeck() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        ArrayList\u003cFlashCard\u003e testDeckConsumer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        for (FlashCard card : initialDeck) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            FlashCard duplicateCard \u003d card.duplicate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            testDeckConsumer.add(duplicateCard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return testDeckConsumer;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return this.durationInSeconds;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public AnchorPane getCardDisplayFront() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        FlashCard cardOnDisplay \u003d getCurrentCard();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        String typeOfCard \u003d cardOnDisplay.getClass().getSimpleName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        switch (typeOfCard) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        case \"FrontBackCard\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new BasicFrontBackCard(cardOnDisplay);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        case \"MultipleChoiceCard\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new McqCard((MultipleChoiceCard) cardOnDisplay);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        case \"JavascriptCard\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new JsCard((JavascriptCard) cardOnDisplay);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        case \"JavaCard\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            Consumers.doTask(\"CLEAR_CARD_DISPLAY\", true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new JavaFront((JavaCard) cardOnDisplay);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new AnchorPane();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public AnchorPane getCardDisplayBack() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        FlashCard card \u003d getCurrentCard();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        Consumers.doTask(\"CLEAR_DECK_DISPLAY\", true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        String typeOfCard \u003d card.getClass().getSimpleName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (typeOfCard.equals(\"FrontBackCard\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            String back \u003d card.getBack();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new SimpleCardBack(back);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else if (typeOfCard.equals(\"MultipleChoiceCard\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new McqCardBack((MultipleChoiceCard) card);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            return new AnchorPane();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 136
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/ConsumerSchema.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The strings used to identify consumers that are stored in State."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class ConsumerSchema {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    // For DEFAULT mode"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String DISPLAY_MESSAGE \u003d \"display_message\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String CLEAR_MESSAGE \u003d \"clear_message\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String DISPLAY_DECKS \u003d \"display_decks\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String RENDER_LIST \u003d \"render_list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String SWAP_DISPLAYS \u003d \"swap_displays\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String CREATE_NEW_DECK \u003d \"create\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String CREATE_NEW_DECK_W_NAME \u003d \"create deck/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String SEE_SPECIFIC_DECK \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static final String ADD_NEW_ROW_MCQ \u003d \"add option\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String QUIT_PROGRAM \u003d \"quit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    // For CREATE mode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String EXIT_CREATE \u003d \"exit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String PROCESS_INPUT \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 8,
      "timothyleong97": 15
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/Consumers.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Dispatches global consumers for CLI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class Consumers {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private static HashMap\u003cString, Consumer\u003e consumers \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void addConsumer(String identifier, Consumer c) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consumers.put(identifier, c);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void removeConsumer(String identifier) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consumers.remove(identifier);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Get a consumer and run it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param key The identifier for the consumer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param x the object for the consumer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return whether the consumer was successfully used."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static Boolean doTask(String key, Object x) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Consumer c \u003d consumers.get(key);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (c \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        c.accept(x);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 8,
      "timothyleong97": 27
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/Responder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface to take in user input and execute program behaviour."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Responder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static ArrayList\u003cArrayList\u003cResponses\u003e\u003e buckets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Groups responses into buckets for each ResponseGroup"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Thus processing input checks for matching group before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * matching each Responses enum; 2 level validation to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * reduce overhead of checking every Responses enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static void generateBuckets() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (buckets !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        buckets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (ResponseGroup g : ResponseGroup.values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            ArrayList\u003cResponses\u003e bucket \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            for (Responses r : Responses.values()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (r.isInGroup(g)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    bucket.add(r);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            buckets.add(bucket);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Takes in user input and the current state of the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Uses the user input to decide which is the appropriate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * responseFunc to call."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input A String representing the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void takeInput(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        generateBuckets();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        outer: for (int i \u003d 0; i \u003c buckets.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (ResponseGroup.values()[i].isInGroup(input)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (Responses r : buckets.get(i)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    if (r.call(input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        System.out.println(r);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        break outer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 49,
      "timothyleong97": 6
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/ResponseFunc.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface for lambdas or commands classes for Responses enum."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public interface ResponseFunc {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Lambda\u0027s signature interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param i input string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    boolean funcCall(String i);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 8,
      "timothyleong97": 5,
      "huiminlim": 1
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/ResponseGroup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.StateEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Enum of groups of Responses enum. Their function argument is a lambda"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * that takes in user input and state to determine if their response"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * belongs to the group."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum ResponseGroup {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    TEST(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_FBCARD(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST_FBCARD),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    TEST_FBCARD_BACK(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST_FBCARD_BACK),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_MCQ(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST_MCQ),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    TEST_MCQ_BACK(i-\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST_MCQ_BACK),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_JSJAVA(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.TEST_JSJAVA),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    DEFAULT(i -\u003e StateHolder.getState().getCurrState() \u003d\u003d StateEnum.DEFAULT),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    MATCH_ALL(i -\u003e true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ResponseFunc func;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ResponseGroup(ResponseFunc f) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        func \u003d f;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean isInGroup(String i) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return func.funcCall(i);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 19,
      "PhireHandy": 3,
      "shawnpunchew11": 2,
      "timothyleong97": 6
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/Responses.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.gui.controllers.displays.test.EndOfTestAlert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.gui.controllers.displays.test.TestDisplay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.gui.controllers.displays.test.TimedTestDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.logic.respond.commands.CreateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.logic.respond.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.StateEnum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.RegexUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.StatsDisplayUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * The enums are composed of three properties:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * 1) regex the input must match"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * 2) ResponseGroup(s) the enum belong to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * 3) function processing input and state if input matches regex"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Order in which the enums are declared is IMPORTANT, as top most enums"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * are checked first before last, thus last enums should be more generic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * and higher should be more specific; thus you can see valid enums"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * followed by error enums declared in that order often."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * This class is to be used for all parsing, state mutation logic and dispatcher calls."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * In no other class should they take the responsibility."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum Responses {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    HELP_WITH_COMMAND("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"help\", new String[]{\"command/\"}),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: HELP_WITH_COMMAND\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d RegexUtil.parseCommandFormat(\"help\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        new String[]{\"command/\"}, i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean validCommand \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    for (String curr : HelpCommand.getAllCommands()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, curr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        validCommand \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!validCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Command supplied is not a valid command!\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            + \"Type \u0027help\u0027 for the UserGuide\u0027.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    HELP("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)help)(\\\\s*)$\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: HELP\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //TODO open a window to UserGuide.html (by Taha)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    IMPORT("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"import\", new String[]{\"filepath/\"}),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: IMPORT\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true; //if valid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //return false; //if not valid"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    IMPORT_ERROR("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)import).*\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: IMPORT_ERROR\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXPORT("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"export\", new String[]{\"filepath/\"}),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: IMPORT_ERROR\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true; //if valid"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //return false; //if not valid"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXPORT_ERROR("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)export).*\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    CREATE_NEW_DECK_WITH_NAME("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"create\", new String[]{\"deck\"}),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d RegexUtil.parseCommandFormat(\"create\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            new String[]{\"deck/\"}, i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //String deckName \u003d i.split(\"(?i)deck/\\\\s*\")[1];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isOnlyOneDeck \u003d res.get(0).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!isOnlyOneDeck) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Create Command: invalid format\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String deckName \u003d res.get(0).get(0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (StateHolder.getState().hasDeckName(deckName) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        StateHolder.getState().addDeck(deckName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.RENDER_LIST, true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.SEE_SPECIFIC_DECK, StateHolder"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                .getState().getDecks().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            StorageManager.writeDeck(StateHolder.getState().getDeck(deckName));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"I could not save your deck. I\u0027ll try\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                    + \" again when you shut me down.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"That name is in use.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    CREATE_DECK_ERROR("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)create).*\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: CREATE_DECK_ERROR\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Error. Give me a deck name.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // ADD_CARD regex format: add deck/DECK_NAME [priority/PRIORITY_NAME] front/FRONT back/BACK [choice/CHOICE]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Only used for MCQ and FrontBack cards"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Note that back for MCQ cards will be used for identifying the correct CHOICE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ADD_CARD("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"add\", new String[]{\"deck/\", \"front/\", \"back/\"}),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d RegexUtil.parseCommandFormat(\"add\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            new String[]{\"deck/\", \"priority/\", \"front/\", \"back/\", \"choice/\"},"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            i);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"COMMAND: ADD_CARD\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Checks if \"deck/\", \"front/\"  and \"back/\" are supplied."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasOnlyOneDeck \u003d res.get(0).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasOnlyOnePriority \u003d res.get(1).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasOnlyOneFront \u003d res.get(2).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasOnlyOneBack \u003d res.get(3).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //boolean isFrontBack \u003d res.get(4).size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //boolean isMCQ \u003d res.get(4).size() \u003e 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isInvalidCard \u003d res.get(4).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Perform command validation"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!hasOnlyOneDeck || !hasOnlyOnePriority || !hasOnlyOneFront"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            || !hasOnlyOneBack || isInvalidCard) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Incorrect Format for create card!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return CreateCommand.createMcqFrontBack(res, StateHolder.getState());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (DuplicateInChoicesException dicExc) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"There are duplicated choices!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Answer provided is not valid\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (DeckNotFoundException dnfExc) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, dnfExc.getMessage());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ADD_CARD_ERROR("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)(add)).*\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Add command is invalid! To see the correct\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            + \"format of the Add command, type \u0027help command/add\u0027\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EDIT_CARD("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"edit\", new String[]{"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"deck/\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"index/\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"front/\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"back/\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"choiceIndex/\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"choice/\"}),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d RegexUtil.parseCommandFormat(\"add\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            new String[]{"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"deck/\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"index/\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"front/\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"back/\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"choiceIndex/\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                \"choice/\"},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            i);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasDeckName \u003d res.get(0).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasIndex \u003d res.get(1).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Checks if \"deck/\" and \"index\" are supplied."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!hasDeckName || !hasIndex) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command is invalid! To see the correct\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"format of the Edit command, type \u0027help command/Edit\u0027\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Obtain deck"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String deckName \u003d res.get(0).get(0);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Deck deck \u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        deck \u003d StateHolder.getState().getDeck(deckName);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, d.getMessage());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    assert deck !\u003d null;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cFlashCard\u003e cards \u003d deck.getCards();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int index \u003d -1;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        index \u003d Integer.parseInt(res.get(1).get(0));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command: index provided is invalid.\u0027\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    assert index !\u003d -1;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isIndexValid \u003d index \u003e 0 \u0026\u0026 index \u003c\u003d cards.size();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!isIndexValid) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command: index provided is invalid.\u0027\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    FlashCard card \u003d cards.get(index - 1);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Must check for validity of command before executing change"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasChoiceIndex \u003d res.get(4).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasChoice \u003d res.get(5).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isFrontBackCardButHasChoice \u003d (hasChoice || hasChoiceIndex)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            \u0026\u0026 card instanceof FrontBackCard;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (isFrontBackCardButHasChoice) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command is invalid! \""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"Front Back card has no choices.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasFront \u003d res.get(3).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (hasFront) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        String front \u003d res.get(3).get(0);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        card.setFront(front);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasBack \u003d res.get(3).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (hasBack) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        String back \u003d res.get(3).get(0);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        card.setBack(back);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasNoChoiceChange \u003d !hasChoice \u0026\u0026 !hasChoiceIndex;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (hasNoChoiceChange) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command is complete.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isInvalidChoiceCommand \u003d (hasChoice \u0026\u0026 !hasChoiceIndex) || (!hasChoice \u0026\u0026 hasChoiceIndex);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (isInvalidChoiceCommand) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command is invalid! \""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"Please check your choices\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    assert card instanceof MultipleChoiceCard;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    MultipleChoiceCard mcqCard \u003d (MultipleChoiceCard) card;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String newChoice \u003d res.get(5).get(0);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        int choiceIndex \u003d Integer.parseInt(res.get(4).get(0));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        mcqCard.editChoice(choiceIndex, newChoice);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (NumberFormatException | IndexNotFoundException n) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command: \""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"Choice index provided is invalid.\u0027\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.RENDER_LIST, true);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.SEE_SPECIFIC_DECK, StateHolder.getState().getDecks().size());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EDIT_CARD_ERROR("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)(edit)).*\","
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Edit command is invalid! To see the correct\""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            + \"format of the Edit command, type \u0027help command/edit\u0027\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    DELETE_CARD("
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"delete\", new String[]{\"deck/\", \"index/\"}),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d RegexUtil.parseCommandFormat(\"delete\","
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            new String[]{\"deck/\", \"index/\"},"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            i);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@@author huiminlim"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Checks if \"deck/\" and \"index/\" are supplied."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasDeck \u003d res.get(0).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasIndex \u003d res.get(1).size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!hasDeck || !hasIndex) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Delete command is invalid! To see the\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"correct format of the Delete command, type \u0027help command/delete\u0027\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String deckName \u003d res.get(0).get(0);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    assert deckName !\u003d null;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Deck deck \u003d StateHolder.getState().getDeck(deckName);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        int index \u003d Integer.parseInt(res.get(1).get(0));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        /*"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        boolean isIndexValid \u003d index \u003e 0 \u0026\u0026 index \u003c\u003d deck.getSize();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (!isIndexValid) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Delete command is invalid! \""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                    + \"Index is invalid\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                         */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        deck.removeCard(index);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Delete command is invalid! \""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"No deck with name exists\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (IndexNotFoundException n) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Delete command is invalid! \""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                + \"Index is invalid\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.RENDER_LIST, true);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.SEE_SPECIFIC_DECK, StateHolder.getState().getDecks().size());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //@author"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true; //if valid"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    SEE_SPECIFIC_DECK("
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)view)\\\\s+[0-9]+$\","
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int num \u003d Integer.parseInt(i.split(\"^(?i)view\\\\s+\")[1]);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.SEE_SPECIFIC_DECK, num);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    SEE_SPECIFIC_DECK_ERROR("
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)view).*\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Error. Give me a deck number.\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXIT_CREATE("
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)exit)\\\\s*$\","
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.EXIT_CREATE, true);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    PROCESS_INPUT_FRONT_BACK("
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"\", new String[]{\"front/\", \"back/\"}),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            RegexUtil.parseCommandFormat(\"\", new String[]{\"front/\", \"back/\"}, i);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (res.get(0).size() \u003e 0 \u0026\u0026 res.get(1).size() \u003e 0) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        FrontBackCard card \u003d new FrontBackCard(res.get(0).get(0), res.get(1).get(0));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        StateHolder.getState().getCurrentDeck().addNewCard(card);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        StorageManager.writeDeck(StateHolder.getState().getCurrentDeck());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // dispatch card to CreateDeckDisplay to be added to tempDeck"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // make editing window dispatches"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Error. Front/back fields cannot be blank.\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //todo"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    STATS("
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"stats\", new String[]{\"deck/\"}),"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            RegexUtil.parseCommandFormat(\"test\", new String[]{\"deck/\"}, i);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //Checks if a deckName is supplied."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean hasDeckName \u003d res.get(0).size() \u003e 0;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (res.get(0).size() \u003e 1) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Only 1 Deck at a time, please!\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (hasDeckName) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // todo: @PhireHandy where should I get the name of the deck?"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        //StatsDisplayUtil.openDeckStatisticsWindow(deck);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // todo: causes InvocationTargetException, due to regex PatternSyntaxException."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        StatsDisplayUtil.openStatisticsWindow();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Starts a test and enters Test Mode (Note to Shawn: rmb to change the StateEnum to TEST)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    TEST("
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            RegexUtil.commandFormatRegex(\"test\", new String[]{\"deck/\", \"duration/\"}),"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.TEST);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            RegexUtil.parseCommandFormat(\"test\", new String[]{\"deck/\", \"duration/\"}, i);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // res.get(0) returns the ArrayList of Deck Names (should only have one)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String deckName \u003d res.get(0).get(0);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // res.get(1) returns the ArrayList of duration in seconds (should have zero or one)."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String durationString \u003d res.get(1).get(0);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Duration is a String."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Deck initDeck \u003d StateHolder.getState().getDeck(deckName);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (initDeck.getNumberOfCards() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            EndOfTestAlert.display(\"Error\", \"You cannot start a test on an empty deck!\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            ArrayList\u003cFlashCard\u003e testDeck \u003d initDeck.getSubsetForTest();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            int duration \u003d Integer.parseInt(durationString);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            ExamRunner.createExam(testDeck, duration);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            Exam currExam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            if (currExam.getDuration() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                TestDisplay testDisplay \u003d new TestDisplay(currExam);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                Consumers.doTask(ConsumerSchema.SWAP_DISPLAYS, testDisplay);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            if (currExam.getDuration() \u003e 0) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                TimedTestDisplay timedTestDisplay \u003d new TimedTestDisplay(currExam);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                                Consumers.doTask(ConsumerSchema.SWAP_DISPLAYS, timedTestDisplay);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    START_TEST_ERROR("
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)test).*\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.DEFAULT},"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"Wrong Command.\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //todo"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // DEFAULT GROUP ----------------------------------------------------------"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    TEST_NEXT("
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)next)\\\\s*\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST,"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD,"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD_BACK,"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_JSJAVA,"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ_BACK},"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isEndOfDeck \u003d exam.upIndex();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (isEndOfDeck) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(\"STOP_TIMELINE\", true);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    TEST_PREV("
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)prev(ious)?)\\\\s*\","
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD,"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD_BACK,"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_JSJAVA,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ,"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ_BACK},"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    exam.downIndex();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane newCard \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", newCard);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Needs to change StateEnum back to DEFAULT"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    TEST_EXIT("
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)exit)\\\\s*\","
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD_BACK,"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_JSJAVA,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_MCQ_BACK},"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"STOP_TIMELINE\", true);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (ExamRunner.getCurrentExam() !\u003d null) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        ExamRunner.terminateExam();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        ExamRunner.clearExam();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_DECKS, true);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.CLEAR_MESSAGE, true);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // TEST GROUP (can be used by other TEST StateEnums ------------------------"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    FB_FRONT("
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)front)\\\\s*\","
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD,"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ResponseGroup.TEST_FBCARD_BACK},"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.TEST_FBCARD);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane cardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", cardFront);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    FB_BACK("
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)back)\\\\s*\","
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_FBCARD},"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.TEST_FBCARD_BACK);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane cardBack \u003d exam.getCardDisplayBack();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", cardBack);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    FB_CORRECT("
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)correct)\\\\s*\","
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_FBCARD_BACK},"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"GET_SCORE\", true);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    exam.upIndex();"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane nextCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", nextCardFront);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    FB_WRONG("
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)wrong)\\\\s*\","
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_FBCARD_BACK},"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"GET_SCORE\", false);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    exam.upIndex();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane nextCardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", nextCardFront);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"UPDATE_TEST_STATE\", exam.getCurrentCard());"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // TEST_FB GROUP ----------------------------------------------------------"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    MCQ_PROCESS_INPUT("
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)(\\\\d)+\\\\s*)\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_MCQ},"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(i);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String[] inputArray \u003d i.split(\" \");"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String choice \u003d inputArray[0];"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    MultipleChoiceCard mcqCard \u003d (MultipleChoiceCard) exam.getCurrentCard();"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    mcqCard.setUserAttempt(Integer.parseInt(choice));"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        boolean isCorrect \u003d mcqCard.evaluate(choice);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(\"GET_SCORE\", isCorrect);"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } catch (IndexNotFoundException e) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(\"DISPLAY_MESSAGE\", \"Invalid Choice\");"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane cardBack \u003d exam.getCardDisplayBack();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", cardBack);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    MCQ_FRONT("
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)front)\\\\s*\","
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_MCQ_BACK},"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    StateHolder.getState().setCurrState(StateEnum.TEST_MCQ);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    AnchorPane cardFront \u003d exam.getCardDisplayFront();"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(\"SWAP_CARD_DISPLAY\", cardFront);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // TEST_MCQ GROUP ----------------------------------------------------------"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    JSJAVA_CODE("
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)code)\\\\s*\","
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.TEST_JSJAVA},"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    FlashCard card \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (card.getClass().getSimpleName().equals(\"JavascriptCard\")) {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(\"LAUNCH_JS\", true);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else if (card.getClass().getSimpleName().equals(\"JavaCard\")) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        Consumers.doTask(\"LAUNCH_JAVA\", true);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    QUIT("
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \"^((?i)quit)\\\\s*$\","
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.MATCH_ALL},"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.QUIT_PROGRAM, true);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ),"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    UNKNOWN("
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            \".*\","
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new ResponseGroup[]{ResponseGroup.MATCH_ALL},"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                i -\u003e {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Consumers.doTask(ConsumerSchema.DISPLAY_MESSAGE, \"I did not understand that command.\");"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } //done"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    );"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // MATCH ALL GROUP --------------------------------------------------------"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String regex;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ResponseGroup[] group;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ResponseFunc func;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    Responses(String r, ResponseGroup[] grp, ResponseFunc f) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        regex \u003d r;"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        group \u003d grp;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        func \u003d f;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Given a string and program state, if string matches regex"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * this enum will call its response function."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param i input string"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean if the string has matched"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean call(String i) {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (i.matches(regex)) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return func.funcCall(i);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Given a ResponseGroup, determine if this Response belongs to it."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param groupArg ResponseGroup"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return True, belongs to group"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isInGroup(ResponseGroup groupArg) {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (ResponseGroup g : group) {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (g \u003d\u003d groupArg) {"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "AHaliq": 20,
      "PhireHandy": 13,
      "shawnpunchew11": 5,
      "timothyleong97": 5,
      "huiminlim": 708
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/ResponsesOLD.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.exam.Exam;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.exam.ExamRunner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.respond.commands.CreateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.respond.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.StateEnum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "///**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// * Enum of regex and response function pairs used by Responder to evaluate input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//enum Responses {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    NEXT("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            \"(?i)^(next)(\\\\s)?\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[]{},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            (i, s) -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is NEXT\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*if (programState.getCurrentState() \u003d\u003d StateEnum.TEST_ONGOING_WAITING_NEXT) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            exam.upIndex();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                FlashCard newCard \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                String question \u003d newCard.getFront();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                LogsCenter.getLogger(Responses.class).info(question);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                programState.setCurrentState(StateEnum.TEST_ONGOING_WAITING_ANS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                LogsCenter.getLogger(Responses.class).info(\"You have reached the end of the test!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                LogsCenter.getLogger(Responses.class).info(exam.getResult());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                programState.setCurrentState(StateEnum.DEFAULT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            //eventually make into exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"There is no active test right now!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    HELP("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            \"(?i)^(help)?(\\\\s)*(command/[\\\\w\\\\p{Punct}]+)?(\\\\s)*\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            (i, s) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"Current command is HELP\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*Print out \"Available commands are:\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Help [Command]\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Import FILEPATH\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Root DIRECTORY_PATH\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Export deck/ DECK_NAME path/ DIRECTORY_PATH\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Stats [deck/DECK_NAME]\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"View [deck/DECK_NAME]\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Create deck/DECK_NAME\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Test [duration/TIME_LIMIT_ALLOWED] deck/DECK_NAME\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Exit\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"Edit deck/DECK_NAME action/DESIRED_ACTION [index/CARD_INDEX] [front/NEW_FRONT_TEXT]\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                \"[back/NEW_BACK_TEXT]\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    ROOT(\"(?i)^r(oot)?(\\\\s)+.+\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            (i, s) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String path \u003d FileReadWrite.normalizePath(i.split(\" \")[1].trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (FileReadWrite.pathValidDirectory(path)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            StorageManager.provideRoot(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            s.reloadAllDecks(StorageManager.loadDecks());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Successfully changed root\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"argument is not a valid directory\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    ROOT_NO_PATH(\"(?i)^r(oot)?(\\\\s)*\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"No directory specified, e.g. root ~/Desktop\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    IMPORT(\"(?i)^i(mport)?(\\\\s)+.+\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"Current command is IMPORT\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String path \u003d commandInput.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Deck deck \u003d StorageManager.loadDeck(path);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (deck !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            StorageManager.writeDeck(deck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            programState.addDeck(deck);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Successfully added \" + path);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"File does not exist, or file does not match schema for a deck\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    IMPORT_NO_PATH(\"(?i)^i(mport)?(\\\\s)*\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"No path specified, e.g. import ~/Desktop/file.json\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EXPORT(\"(?i)^exp(ort)?(\\\\s)+deck/(\\\\s)*.+(\\\\s)+path/(\\\\s)*.+\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"Current command is EXPORT\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String[] parts \u003d commandInput.split(\"deck/\")[1].split(\"path/\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String deckName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String pathName \u003d parts[1].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Deck d \u003d programState.getDeck(deckName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            FileReadWrite.write(FileReadWrite.resolve(pathName, \"./\" + d.getName() + \".json\"), d.toJson().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Deck does not exist\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EXPORT_NO_PATH(\"(?i)^exp(ort)?(\\\\s)+deck/(\\\\s)*.+\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"No path specified, e.g. export deck/ deckName path/ ~/Desktop\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EXPORT_NO_DECK(\"(?i)^exp(ort)?.*\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"No deck specified, e.g. export deck/ deckName path/ ~/Desktop\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    STATS(\"(?i)^(stats)?(\\\\s)*(deck/[\\\\w\\\\p{Punct}]+)?(\\\\s)*\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is STATS\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*String deckName \u003d commandInput.replaceFirst(\"(?i)^(stats)?(\\\\s)*deck/\", \"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (deckName.strip().equals(\"\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.renderStats(programState.getStatistics());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.renderStats(programState.getDeck(deckName).getStatistics());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }*/"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    VIEW(\"(?i)^(view)?(\\\\s)*(deck/[\\\\S\\\\p{Punct}]+){1}?(\\\\s)*\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {}, (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*LogsCenter.getLogger(Responses.class).info(\"Current command is VIEW\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String deckName \u003d commandInput.replaceFirst(\"(?i)^(view)?(\\\\s)*deck/\", \"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //System.out.println(test.trim());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Deck d \u003d programState.getDeck(deckName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Gui.renderDeck(d);*/"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    CREATE(\"(?i)^(create)?(\\\\s)+(deck/[\\\\S]+){1}[\\\\s]*\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {}, (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //System.out.println(\"Current command is CREATE_DECK\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is CREATE_DECK\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (programState.getCurrentState() !\u003d StateEnum.DEFAULT) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Create not allowed here\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*String deckName \u003d commandInput.split(\"deck/\")[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (programState.hasDeck(deckName)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            // REPORT DECK EXISTS"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).warning(\"CREATE_DECK: Deck with same name exist - \" + deckName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showError(\"Error: Deck with same name exists - \" + deckName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            //System.out.println(\"Error: Deck with same name exist - \" + deckName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            //programState.setCurrentState(StateEnum.CREATE_STATE_FRONT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            programState.addDeck(deckName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"CREATED_DECK: Deck added - \" + deckName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            // PRINT INSTRUCTIONS TO USER HOW TO CREATE DECK"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Gui.showStatus(\"Deck created - \" + deckName);*/"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"CREATE_DECK: command execution successful\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    DECK_CREATE_MCQ_CARD(\"(?i)^(create)?(\\\\s)+\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(deck/[\\\\S]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(front/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(back/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"((choice/[\\\\S\\\\s]+)(\\\\s)*){1,}\" ,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*System.out.println(\"Current command is DECK_CREATE_MCQ_CARD\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is DECK_CREATE_MCQ_CARD\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        CreateCommand command \u003d new CreateCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Gui.showStatus(\"MCQ Card created\");*/"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_MCQ_CARD: command execution successful\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    // create frontbackcard"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    DECK_CREATE_REG_CARD(\"(?i)^(create)?(\\\\s)+\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(deck/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(front/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(back/[\\\\S\\\\s]+){1}(\\\\s)*\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*System.out.println(\"Current command is DECK_CREATE_REG_CARD\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is DECK_CREATE_REG_CARD\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        CreateCommand command \u003d new CreateCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        Gui.showStatus(\"Front Back card created.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_REG_CARD: command execution successful\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    TEST(\"(?i)^(test)?(\\\\s)+(duration/[\\\\w\\\\p{Punct}]+)?(\\\\s)+(deck/[\\\\w\\\\p{Punct}]+){1}(\\\\s)*\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*System.out.println(\"Current command is TEST\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        String inputName \u003d commandInput.split(\"deck/\")[1];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Deck retrievedDeck \u003d programState.getDeck(inputName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            ExamRunner.createExam(retrievedDeck);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Exam exam \u003d ExamRunner.getCurrentExam();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            FlashCard currentCard \u003d exam.getCurrentCard();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            String question \u003d currentCard.getFront();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            programState.setCurrentState(StateEnum.TEST_ONGOING_WAITING_ANS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(question);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            e.printStackTrace();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }*/"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        // *Initiate test with Test Deck*"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EXIT(\"(?i)^(exit)?\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},(commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //System.out.println(\"Current command is EXIT\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is EXIT\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        // Exit from application"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        // Added exit for convenience"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.exit(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EDIT_DECK_EDIT_CARD(\"(?i)^(edit)?(\\\\s)+(deck/[\\\\S}]+){1}(\\\\s)+(action/[edit]+){1}((\\\\s)+\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(index/[\\\\d]+){1}(\\\\s)*){1}((\\\\s)+(front/[\\\\S\\\\s]+){1}(\\\\s)*)?((\\\\s)?\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(back/[\\\\S\\\\s]+))?(\\\\s)?\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},("
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //System.out.println(\"Current command is EDIT, edit card in deck\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is EDIT_DECK_EDIT_CARD, edit card in deck\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            EditCommand command \u003d new EditCommand();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + d.getMessage());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Deck not found\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(d.getMessage());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + n.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Index not valid\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(n.getMessage());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + i.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Index not correct\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(i.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }*/"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    EDIT_DECK_REMOVE_CARD(\"(?i)^(edit)?(\\\\s)+(deck/[\\\\S}]+){1}(\\\\s)+(action/[remove]+){1}((\\\\s)+\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(index/[\\\\d]+){1}(\\\\s)*){1}((\\\\s)+(front/[\\\\S\\\\s]+){1}(\\\\s)*)?((\\\\s)*\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            + \"(back/[\\\\S\\\\s]+))?(\\\\s)*\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[] {},"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            (i, s) -\u003e {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //System.out.println(\"Current command is EDIT, removing deck\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"Current command is EDIT_DECK_REMOVE_CARD, removing deck\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            EditCommand command \u003d new EditCommand();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + d.getMessage());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Deck not found\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(d.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + n.getMessage());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Index not valid\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(n.getMessage());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            System.out.println(\"Error: \" + i.getMessage());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Index not correct\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Gui.showStatus(i.getMessage());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: command execution successful\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    UNKNOWN("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            \".*\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            new ResponseGroup[]{ResponseGroup.MATCH_ALL},"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            (i, s) -\u003e {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        System.out.println(\"Sorry, I don\u0027t know what is this command.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        LogsCenter.getLogger(Responses.class).warning(\"Unknown command entered.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        //Gui.showError(\"Sorry, I don\u0027t know what is this command.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    });"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private String regex;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private ResponseFunc func;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private ResponseGroup[] group;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    Responses(String r, ResponseGroup[] grp, ResponseFunc f) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        regex \u003d r;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        func \u003d f;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        group \u003d grp;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Given a string and program state, if string matches regex this enum will call its response"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * function."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param i input string"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param s state object"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return boolean if the string has matched"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public boolean call(String i, State s) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (i.matches(regex)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            return func.funcCall(i, s);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 351
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 7
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/CreateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.DeckAlreadyExistsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a command that creates a new deck or card (?)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class CreateCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private State progState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public CreateCommand(String i, State s) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.input \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.progState \u003d s;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Performs execution of create command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean funcCall() throws DeckAlreadyExistsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String deckName \u003d input.split(\"deck/\")[1].strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //if (deckAlreadyExists(deckName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    throw new DeckAlreadyExistsException(deckName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //} else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    Deck newDeck \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    if (!progState.isCreateMode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        progState.toggleCreateMode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    //GUI.printCreateMode(\"Let’s begin creating the deck ‘\" + deckName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    // + \"’. When done, simply type ‘quit’!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    System.out.println(\"Let’s begin creating the deck ‘\" + deckName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            + \"’. When done, simply type ‘quit’!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        // GUI.printCreateMode(\"Type the front of card #\" + (newDeck.getNumCards() + 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        System.out.println(\"Type the front of card #\" + (newDeck.getNumCards() + 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        String frontOfCard;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        String backOfCard;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        if (sc.nextLine().matches(\"(?i)^(quit)?.\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            //GUI.printCreateMode(\"You have created the deck ‘\" + deckName + \"’ with a total of \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            //        + newDeck.getNumCards() + \" cards!\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            System.out.println(\"You have created the deck ‘\" + deckName + \"’ with a total of \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //                    + newDeck.getNumCards() + \" cards!\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            frontOfCard \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        // GUI.printCreateMode(\"Type the back of card #\" + (newDeck.getNumCards() + 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        System.out.println(\"Type the back of card #\" + (newDeck.getNumCards() + 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        if (sc.nextLine().matches(\"(?i)^(quit)?.\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            //GUI.printCreateMode(\"You have created the deck ‘\" + deckName + \"’ with a total of \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            //        + newDeck.getNumCards() + \" cards!\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            System.out.println(\"You have created the deck ‘\" + deckName + \"’ with a total of \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //                    + newDeck.getNumCards() + \" cards!\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            backOfCard \u003d sc.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            FlashCard newCard \u003d new FrontBackCard(frontOfCard, backOfCard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //            newDeck.addNewCard(newCard);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    progState.toggleCreateMode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //    return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Is used to create a FrontBack or MCQ card and adds it to the State in a specific deck"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param command An ArrayList of the parsed user input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param state The State"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @return A Boolean which indicates if the creation of the card was successful."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @throws DuplicateInChoicesException"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static boolean createMcqFrontBack(ArrayList\u003cArrayList\u003cString\u003e\u003e command, State state)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        throws DuplicateInChoicesException, DeckNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Checks if deckName matches any deck in the State."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        boolean deckExistsInState \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        Deck currDeck \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        for (Deck curr : state.getDecks()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            if (curr.getDeckName().equals(command.get(0).get(0))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                // todo: @PhireHandy -- equals() between String and ArrayList\u003cString\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                deckExistsInState \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                currDeck \u003d curr;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        if (!deckExistsInState) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            throw new DeckNotFoundException(\"The specified deck does not exist! Please create it first.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        boolean hasPriority \u003d command.get(1).size() \u003e 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Checks if priority level matches high or low"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        if (hasPriority \u0026\u0026 (!command.get(1).get(0).equalsIgnoreCase(\"high\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            \u0026\u0026 !command.get(1).get(0).equalsIgnoreCase(\"low\"))) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Checks if the card is an MCQ or FrontBack card"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        boolean isMcq \u003d (command.get(4).size() \u003e 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Checks if the MCQ has more than two choices"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        if (isMcq \u0026\u0026 command.get(4).size() \u003c 2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Creates the card and adds to the State"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        if (isMcq) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            currDeck.addNewCard(CreateCommand.createMcq(command));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            currDeck.addNewCard(CreateCommand.createFrontBack(command));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Used to create an MCQ card. Only used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param command An ArrayList of the parsed user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @return The MCQ Card represented as a FlashCard"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @throws DuplicateInChoicesException"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private static FlashCard createMcq(ArrayList\u003cArrayList\u003cString\u003e\u003e command) throws DuplicateInChoicesException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Order of inputs in command: \"deck/\", \"priority/\", \"front/\", \"back/\", \"choice/\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        String front \u003d command.get(2).get(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        String correctIndex \u003d command.get(3).get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        int priority \u003d getPriorityLevel(command.get(1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return new MultipleChoiceCard(front, correctIndex, command.get(4), priority);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Used to create a Front Back card. Only used internally."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param command An ArrayList of the parsed user input"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @return The FrontBack Card represented as a FlashCard"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private static FlashCard createFrontBack(ArrayList\u003cArrayList\u003cString\u003e\u003e command) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Order of inputs in command: \"deck/\", \"priority/\", \"front/\", \"back/\", \"choice/\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        String front \u003d command.get(2).get(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        String back \u003d command.get(3).get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        int priority \u003d getPriorityLevel(command.get(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return new FrontBackCard(front, back, priority);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private static int getPriorityLevel(ArrayList\u003cString\u003e input) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        if (input.size() \u003e 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            if (input.get(0).equalsIgnoreCase(\"high\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                return Priority.HIGH_PRIORITY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 95,
      "timothyleong97": 74,
      "huiminlim": 5
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A command to edit cards using inputs from the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private State progState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public EditCommand(String i, State s) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.input \u003d i;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.progState \u003d s;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Performs execution of edit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean funcCall() throws DeckNotFoundException, InvalidInputException, IndexNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String deckName \u003d input.split(\"deck/\")[1].split(\" \")[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String action \u003d input.split(\"action/\")[1].split(\" \")[0].toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Deck currDeck \u003d progState.getDeck(deckName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        switch(action) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String front \u003d input.split(\"front/\")[1].split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String back \u003d input.split(\"back/\")[1].split(\" \")[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            currDeck.addNewCard(new FrontBackCard(front, back));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        case \"change\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            int indexC \u003d Integer.parseInt(input.split(\"index/\")[1].split(\" \")[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (indexC \u003c 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                throw new InvalidInputException(\"Index is not a positive integer!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                boolean hasFront \u003d hasOnlyOneFront(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                boolean hasBack \u003d hasOnlyOneBack(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (hasFront) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    currDeck.editFrontCardInDeck(input.split(\"front/\")[1].split(\" \")[0], indexC);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                if (hasBack) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    currDeck.editFrontCardInDeck(input.split(\"back/\")[1].split(\" \")[0], indexC);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            int indexR \u003d Integer.parseInt(input.split(\"index/\")[1].split(\" \")[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            currDeck.removeCard(indexR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            throw new InvalidInputException(\"The input given does not match any possible command!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A boolean representing that there is only one front instruction, no more and no less."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param input The String input from the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return A boolean representing that there is only one front instruction."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private boolean hasOnlyOneFront(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (input.split(\"front/\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A boolean representing that there is only one back instruction, no more and no less."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param input The String input from the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return A boolean representing that there is only one back instruction."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private boolean hasOnlyOneBack(String input) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (input.split(\"back/\").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 86,
      "huiminlim": 9
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " * A Class that stores all the formats for the different CLI commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String IMPORT \u003d \"Format: import filepath/FILEPATH.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String EXPORT \u003d \"Format: export filepath/FILEPATH.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String STATS \u003d \"Format: stats (for Application stats) OR stats deck/DECK_NAME\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            + \"(for Deck stats).\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String CREATE \u003d \"Format: create deck/DECK_NAME\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String ADD \u003d \"Format: add deck/DECK_NAME [priority/PRIORITY_NAME] front/FRONT back/BACK\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            + \"[choice/CHOICE]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String DELETE \u003d \"Format: delete deck/DECK_NAME index/CARD_TO_BE_DELETED\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String EDIT \u003d \"Format: edit filepath/FILEPATH\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static final String TEST \u003d \"Format: test deck/DECK_NAME [duration/TIME_IN_SECONDS]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private static String[] allCommands \u003d {IMPORT, EXPORT, STATS, CREATE, ADD, DELETE, EDIT, TEST};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public static String[] getAllCommands() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return allCommands;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 23
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/Session.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * A Session object represents a length of time the user spends doing a task, e.g. using the app"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * or running a test on a deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class Session implements JsonInterface {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The start time of the session, in the user\u0027s local time zone. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    protected LocalDateTime sessionStart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The end time of the session, in the user\u0027s local time zone. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    protected LocalDateTime sessionEnd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The start time of the session, as a String for rendering in the GUI. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private String sessionStartString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The start time of the session, as a String for rendering in the GUI. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private String sessionEndString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The duration of the session, as a Duration object. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The duration of the session, as a String for rendering in the GUI. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private String durationString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Constructs a new instance of Session and sets the session\u0027s start time to the present."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Session() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        startSession();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Construct a new instance of session and sets the session\u0027s start time to argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Session(LocalDateTime start) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        startSession(start);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Construct a new instance of session and sets the session\u0027s start and end time to arguments."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param end   end time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Session(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        startSession(start);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        endSession(end);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Start session start time to present."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void startSession() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        startSession(LocalDateTime.now());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Start session start time to argument."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void startSession(LocalDateTime start) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: add tests for String properties"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionStart \u003d start;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionStartString \u003d DateTimeUtil.getStringFromDateTime(this.sessionStart);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Ends this session, by setting its end time to the present."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * To be called when the session\u0027s controller exits."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void endSession() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        endSession(LocalDateTime.now());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Ends this session, to argument datetime"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param end   end time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private void endSession(LocalDateTime end) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionEnd \u003d end;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionEndString \u003d DateTimeUtil.getStringFromDateTime(this.sessionEnd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setDuration();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Calculates and sets the duration of this session."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setDuration() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration duration \u003d DateTimeUtil.calculateDuration(this.getSessionStart(), this.getSessionEnd());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.durationString \u003d DateTimeUtil.getStringFromDuration(this.duration);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        System.out.println(\"Duration set to: \" + durationString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the start time of this session, as a LocalDateTime object. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public LocalDateTime getSessionStart() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionStart;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the start time of this session, as a String. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getSessionStartString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionStartString;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the end time of this session, as a LocalDateTimeObject. */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public LocalDateTime getSessionEnd() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionEnd;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the end time of this session, as a String. */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getSessionEndString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionEndString;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the duration of this session, as a Duration object. */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the duration of this session, as a String. */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getDurationString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.durationString;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Checks if this session is an instance of TestSession. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public boolean isTestSession() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this instanceof TestSession;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            obj.put(Schema.SESSION_START,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    DateTimeUtil.getJsonFromDateTime(sessionStart).getObject());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            obj.put(Schema.SESSION_END,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    DateTimeUtil.getJsonFromDateTime(sessionEnd).getObject());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            //obj.put(Schema.SESSION_SCORE, score);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"DATETIME JSON MUST BE AN OBJECT\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 157
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/SessionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * A list of Session objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class SessionList implements JsonInterface {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private ArrayList\u003cSession\u003e sessionArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Constructs a new instance of SessionList, with an empty list by default. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public SessionList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Constructs a new instance of SessionList, with an existing list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param initialArrayList The initial list of sessions to be added to the SessionList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public SessionList(ArrayList\u003cSession\u003e initialArrayList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionArrayList \u003d initialArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Adds the given Session to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param session The Session to be added to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void addSession(Session session) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionArrayList.add(session);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Returns the number of sessions in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The number of sessions in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public int getNumberOfSessions() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionArrayList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the sessionArrayList contained in this SessionList. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public ArrayList\u003cSession\u003e getSessionArrayList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionArrayList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the total duration of sessions in this SessionList, as a String. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getTotalDurationAsString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration duration \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session session : sessionArrayList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            Duration sessionDuration \u003d session.getDuration();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            duration \u003d duration.plus(sessionDuration);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return DateTimeUtil.getStringFromDuration(duration);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the average duration of sessions in this SessionList, as a String. */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getAverageDurationAsString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration averageDuration \u003d DateTimeUtil.getAverageDuration(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return DateTimeUtil.getStringFromDuration(averageDuration);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session s : sessionArrayList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                arr.add(s.toJson().getObject());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                System.out.println(\"SESSION JSON EXPECTED TO BE OBJECT\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new JsonValue(arr);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 85
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/Stats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/** Abstract class for statistics objects, like UserStats and DeckStats. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public abstract class Stats {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** List of Sessions the user has engaged in. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    protected SessionList sessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The current Session the user is engaging in. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    protected Session currentSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Stats() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.currentSession \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Sets the sessionList of the current Stats object to the given newSessionList. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setSessionList(SessionList newSessionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.sessionList \u003d newSessionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the list of sessions. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public SessionList getSessionList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.sessionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Starts a new Session, representing the current Session the user is engaging in. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void startCurrentSession() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (this.currentSession !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            endCurrentSession(); // should not occur, but should terminate just in case"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"Existing current session detected. Terminating it first...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // debug (change to Logger when implemented)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        System.out.println(\"Starting a session...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.currentSession \u003d new Session(); // currentSession should be null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Ends the current Session the user is engaging in and saves it to the list of Sessions. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void endCurrentSession() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // assert current session is not null?"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            this.currentSession.endSession();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            this.sessionList.addSession(currentSession);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            // reset currentSession to null since this is terminated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            this.currentSession \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            // debug (change to Logger when implemented)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"Ending the current session...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"Current session not found?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the current session. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Session getCurrentSession() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.currentSession;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 63
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/TestSession.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/** A TestSession represents a review session involving a particular deck. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class TestSession extends Session {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The Result of this particular session. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private String score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public TestSession(LocalDateTime start, LocalDateTime end, String score) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super(start, end);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Gets the Result of this particular session. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getScore() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Sets the Result of this particular session. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setScore(String score) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void endSession() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super.endSession();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Ends the session, and sets the result to the given value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param score Score of the session."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void endSession(String score) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.endSession();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setScore(score);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Checks if this session has a score. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public boolean hasScore() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.score !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            obj.put(Schema.SESSION_START,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                DateTimeUtil.getJsonFromDateTime(sessionStart).getObject());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            obj.put(Schema.SESSION_END,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                DateTimeUtil.getJsonFromDateTime(sessionEnd).getObject());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            obj.put(Schema.SESSION_RESULT, score);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"DATETIME JSON MUST BE AN OBJECT\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 66
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/UserStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Represents the user\u0027s statistics. Contains a SessionList containing all the user\u0027s login sessions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class UserStats extends Stats {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** List of Sessions the user has engaged in. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private SessionList sessionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** The current Session the user is engaging in. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session currentSession;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Constructs a new instance of UserStats with no stored data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public UserStats() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        System.out.println(\"New UserStats object created\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: calculate number of sessions in past week, past month etc. should this generate a list?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: possibly compare past week to previous week etc."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // methods copied from Stats"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 25
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/UserStatsHolder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * A class to store and retrieve the one and only instance of UserStats allowed in the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class UserStatsHolder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static UserStats userStats;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static UserStats getUserStats() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (userStats \u003d\u003d null) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            userStats \u003d new UserStats();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return userStats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 16
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/storage/Schema.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of string constants used to define json files understood by the program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Schema {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DECK_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DECK_CARDS \u003d \"cards\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static final String DECK_SESSIONS \u003d \"deck-sessions\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TYPE_FIELD \u003d \"type\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String FRONT_FIELD \u003d \"front\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String BACK_FIELD \u003d \"back\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String CHOICES_FIELD \u003d \"choices\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TEST_CASES_FIELD \u003d \"test-cases\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TEST_CASE_INPUT \u003d \"input\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TEST_CASE_OUTPUT \u003d \"output\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String FRONT_BACK_TYPE \u003d \"front-back\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String JAVASCRIPT_TYPE \u003d \"javascript\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String JAVA_TYPE \u003d \"java\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String MULTIPLE_CHOICE_TYPE \u003d \"multiple-choice\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_YEAR \u003d \"year\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_DAY \u003d \" day\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_HOUR \u003d \"hour\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_MINUTE \u003d \"minute\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_SECOND \u003d \"second\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DATE_TIME_NANO \u003d \"nano\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String SESSION_START \u003d \"start\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String SESSION_END \u003d \"end\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static final String SESSION_RESULT \u003d \"result\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 2,
      "AHaliq": 35
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStats;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStatsHolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.cards.JavaCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.stats.DateTimeUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface to managing storage for the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean isRootResolved \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String root;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String decksSubDir \u003d \"./decks\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String statsSubDir \u003d \"./stats\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String statsFileName \u003d \"stats.json\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String statsFileFullPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String codeSubDir \u003d \"./code\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine root directory of the application:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *  main for intellij project,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *  jar directory when running as jar,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *  current executed directory for default"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * following resolution root is resolved to `root/data/`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void resolveRoot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (isRootResolved) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        URL thisClassUrl \u003d StorageManager.class.getResource(\"StorageManager.class\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        switch (thisClassUrl.getProtocol()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String platformIndependentPath \u003d Paths.get(StorageManager.class"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        .getResource(\"StorageManager.class\").toURI()).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                root \u003d FileReadWrite.resolve(platformIndependentPath, \"../../../../../../../../../\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (URISyntaxException i) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"error\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"jar\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                root \u003d FileReadWrite.resolve("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        new File(StorageManager.class.getProtectionDomain().getCodeSource().getLocation().toURI())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                .getPath(), \"../\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"jar is broken as unable to resolve path\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        root \u003d FileReadWrite.resolve(root, \"./data\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveStatsPath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isRootResolved \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * User provide directory to use for storage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path path to new directory for storage"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void provideRoot(String path) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        root \u003d path;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveStatsPath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isRootResolved \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns value of current root."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return root directory"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String getRoot() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // ROOT CODE --------------------------------------------------------------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Write a deck into decks storage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param deck deck object to write"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void writeDeck(Deck deck) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, decksSubDir + \"/\" + deck.getDeckName() + \".json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(path, deck.toJson().toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Delete a deck."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param deck the deck to remove."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void deleteDeck(Deck deck) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, decksSubDir + \"/\" + deck.getDeckName() + \".json\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FileReadWrite.delete(path);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Load all decks in storage."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return ArrayList of decks in storage"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static ArrayList\u003cDeck\u003e loadDecks() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, decksSubDir);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!FileReadWrite.fileExists(path)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try (Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(path))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return walk.filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .map(x -\u003e loadDeck(x.toString()))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Loads a single deck."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param filePath Must be valid existing filepath to a deck json file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return deck object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Deck loadDeck(String filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return parseDeckJsonFile(FileReadWrite.read(filePath));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"FILE DOES NOT EXIST\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parse input as a json deck string."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json deck string"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return deck object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Deck parseDeckJsonFile(String input) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                ArrayList\u003cFlashCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                JsonObject deckJson \u003d JsonParser.parseJsonInput(input).getObject();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (JsonValue x : deckJson.get(Schema.DECK_CARDS).getArray()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    JsonObject cardJson \u003d x.getObject();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    FlashCard card \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    switch (cardJson.get(Schema.TYPE_FIELD).getString()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.FRONT_BACK_TYPE:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new FrontBackCard("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.JAVASCRIPT_TYPE:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new JavascriptCard("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.MULTIPLE_CHOICE_TYPE:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        for (JsonValue choiceJson : cardJson.get(Schema.CHOICES_FIELD).getArray()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            choices.add(choiceJson.getString());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new MultipleChoiceCard("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                choices);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.JAVA_TYPE:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        ArrayList\u003cTestCase\u003e testcases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        for (JsonValue caseJson : cardJson.get(Schema.TEST_CASES_FIELD).getArray()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            testcases.add(new TestCase("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    caseJson.getObject().get(Schema.TEST_CASE_INPUT).getString(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    caseJson.getObject().get(Schema.TEST_CASE_OUTPUT).getString()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new JavaCard(cardJson.get(Schema.FRONT_FIELD).getString(), testcases);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        System.out.println(\"Unexpected card type, but silently continues\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    cards.add(card);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Deck(cards, deckJson.get(Schema.DECK_NAME).getString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueException e1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"JSON file wrong schema\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e2) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"JSON file has errors\\n\" + e2.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: add parsing for session list in deck"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Overwrite all files in the subdirectory with the given set of decks."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param decks an array list of decks"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void saveAll(ArrayList\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (Deck d : decks) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            writeDeck(d);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // DECK CODE --------------------------------------------------------------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Resolve path to stats file."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void resolveStatsPath() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        statsFileFullPath \u003d FileReadWrite.resolve(root, statsSubDir + \"/\" + statsFileName);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Save stats data."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void saveStats(UserStats userStats) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FileReadWrite.write(statsFileFullPath, userStats.getSessionList().toJson().toString());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Initialize and load stats data if any."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void loadUserStats() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            ArrayList\u003cSession\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonValue statsJson \u003d JsonParser.parseJsonInput(FileReadWrite.read(statsFileFullPath));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            for (JsonValue sessionJson : statsJson.getArray()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                JsonObject sessionJsonObj \u003d sessionJson.getObject();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Session session \u003d new Session("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        DateTimeUtil.getDateTimeFromJson(sessionJsonObj.get(Schema.SESSION_START).getObject()),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        DateTimeUtil.getDateTimeFromJson(sessionJsonObj.get(Schema.SESSION_END).getObject()));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                //session.setScore(sessionJsonObj.get(Schema.SESSION_SCORE).getInt());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                // todo: or abstract out and use this to load deck session list too?"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                arr.add(session);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            UserStatsHolder.getUserStats().setSessionList(new SessionList(arr));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // load login session"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"STATS FILE DOES NOT EXIST\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"STATS JSON IS ILL FORMED\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"UNEXPECTED JSON FORMAT FOR STATS\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // STATS CODE -------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Write a code file to the code sub directory in root."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param fileName  name of file with extensions"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param code      string content to be written"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void writeCode(String fileName, String code) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, codeSubDir + \"/\" + fileName);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(path, code);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the path to the code file assuming its in root code subdirectory."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param fileName  name of file"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return          full path to file"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String getCodePath(String fileName) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return FileReadWrite.resolve(root, codeSubDir + \"/\" + fileName);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    // CODE EXECUTION CODE ----------------------------------------------------"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 13,
      "AHaliq": 266,
      "PhireHandy": 2,
      "timothyleong97": 27,
      "huiminlim": 8
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/Deck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.HIGH_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.DeepCopy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of cards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Deck implements JsonInterface {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String deckName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e cards;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e highPriorityQueue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e lowPriorityQueue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of FlashCards with High priority levels. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e highPriorityList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of FlashCards with Low priority levels. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e lowPriorityList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** List of sessions the user has engaged in involving this Deck. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private SessionList testSessionList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck with no name and cards."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Deck() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d \"untitled\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        testSessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck with name and cards."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String name of the deck."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        testSessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck with name and cards."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String name of the deck."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck(ArrayList\u003cFlashCard\u003e initialCards, String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d initialCards;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityQueue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        addCardsToQueues(initialCards);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        testSessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void addCardsToQueues(ArrayList\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard card \u003d list.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isHighPriorityCard \u003d card.getPriority() \u003d\u003d HIGH_PRIORITY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isLowPriorityCard \u003d card.getPriority() \u003d\u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isHighPriorityCard) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                highPriorityQueue.add(card);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isLowPriorityCard) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                lowPriorityQueue.add(card);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Render all the cards of the deck in a list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Node of list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Node renderListView() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Render tile icon of this deck to display alongside other decks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Node of tile"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Node renderTileView() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns Json format of Deck."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue Json object of current Deck."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonArray cardJson \u003d new JsonArray();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (FlashCard card : cards) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            cardJson.add(card.toJson());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        JsonArray sessionsJson \u003d new JsonArray();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e testSessionArrayList \u003d testSessionList.getSessionArrayList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session s : testSessionArrayList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                sessionsJson.add(s.toJson().getObject());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                System.out.println(\"SESSION JSON EXPECTED TO BE OBJECT\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.DECK_NAME, deckName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.DECK_CARDS, cardJson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        obj.put(Schema.DECK_SESSIONS, sessionsJson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Adds new card to the ArrayList of card objects."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newCard FlashCard object to add to Deck."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void addNewCard(FlashCard newCard) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cards.add(newCard);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Removes a specified card using index from the list of cards."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of card to remove from list of Cards."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void removeCard(int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        cards.remove(indexProvided - 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edit front of card."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newFront      String of new text to replace front of card."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Index of card in the Deck."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of cards in deck or \u003c 0."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFrontCardInDeck(String newFront, int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        FlashCard cardToChange \u003d cards.get(indexProvided);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardToChange.editFront(newFront);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return getDeckName();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edit back of card."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newBack       String of new text to replace back of card."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Index of card in the Deck."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of cards in deck or \u003c 0."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBackCardInDeck(String newBack, int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        FlashCard cardToChange \u003d cards.get(indexProvided);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardToChange.editBack(newBack);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns list of FlashCards in Deck."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of FlashCard objects currently in Deck."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getCards() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns name of the deck."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String name of deck."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public String getDeckName() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Sets the name of the deck."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param deckName the name of the deck."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setDeckName(String deckName) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.deckName \u003d deckName;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns queue storing all high priority flashcards."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of flashcards of priority level, high."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getHighPriorityQueue() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return highPriorityQueue;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns queue storing all low priority flashcards."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of flashcards of priority level low."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getLowPriorityQueue() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return lowPriorityQueue;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Generates a subset of 10 flashcards for test in ExamRunner."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Currently, fixed at 6 flashcards of high priority."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * And 4 flashcards of low priority."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of shuffled flashcards."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getSubsetForTest() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cFlashCard\u003e testSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int totalDeckSize \u003d cards.size();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (totalDeckSize \u003c\u003d 10) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //int sizeOfLowPrioritySet \u003d (int) Math.floor(totalDeckSize * 0.4);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int sizeOfLowPrioritySet \u003d 4;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //int sizeOfHighPrioritySet \u003d totalDeckSize - sizeOfLowPrioritySet;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int sizeOfHighPrioritySet \u003d 6;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfHighPrioritySet; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard chosenCard \u003d getRandomCard(highPriorityQueue);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            testSet.add(chosenCard);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfLowPrioritySet; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard chosenCard \u003d getRandomCard(lowPriorityQueue);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            testSet.add(chosenCard);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Collections.shuffle(testSet);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return testSet;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a random flashcard from an Arraylist."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list ArrayList of Flashcards."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Flashcard chosen randomly from ArrayList."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private FlashCard getRandomCard(ArrayList\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Random rand \u003d new Random(System.currentTimeMillis());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int chosenCardIndex \u003d rand.nextInt(list.size());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return list.get(chosenCardIndex);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if a user provided index is valid."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Uses provide index that is 1-based, i.e. 1, 2, 3, etc."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If index provided is within 1, 2, 3, ..., last card, then it is valid and return true."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else return false."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Boolean indicating if index provided by user is valid."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return True if valid, false if invalid."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean isIndexProvidedByUserValid(int indexProvided) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return indexProvided \u003c\u003d cards.size() \u0026\u0026 indexProvided \u003e 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Deck duplicateMyself() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new Deck(DeepCopy.duplicateCards(cards), deckName);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //@@author nattanyz"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the SessionList pertaining to this deck. */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public SessionList getTestSessionList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.testSessionList;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the SessionList pertaining to this deck. */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setTestSessionList(SessionList testSessionList) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.testSessionList \u003d testSessionList;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get number of cards in this deck.*/"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Integer getNumberOfCards() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.cards.size();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the number of sessions for this deck. */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public Integer getNumberOfSessions() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return this.testSessionList.getNumberOfSessions();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the average score for the sessions has engaged in pertaining to this deck. */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //public Double getAverageScore() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //    return this.deckStats.getAverageScore();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 58,
      "AHaliq": 33,
      "PhireHandy": 1,
      "timothyleong97": 22,
      "huiminlim": 248
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * State stores data representing the state of the running program"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * It should not execute logic or parsing, simply a data store object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cDeck\u003e decks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private StateEnum currState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Deck currentDeck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a State object with no Deck objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public State() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        decks \u003d StorageManager.loadDecks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        currState \u003d StateEnum.DEFAULT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Return the current deck in Create mode."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the deck in Create Mode."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return currentDeck;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Returns false if decks is non-empty, true if decks is empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return decks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Returns the list of decks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public ArrayList\u003cDeck\u003e getDecks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return decks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Adds a new empty Deck object to decks list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void addDeck(String deckName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Deck temp \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        decks.add(temp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.currentDeck \u003d temp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a deck object to decks list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param deck deck object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        decks.add(deck);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.currentDeck \u003d deck;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Removes the deck from the decks list, if there is a deck with a matching name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Else, throw exception when no deck with matching name is found."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void removeDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int deckIndex \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (deckIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        decks.remove(deckIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Returns the deck object that matches in name, if a deck with matching name exists."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Else, throw exception when no deck with matching name is found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck getDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int indexOfDeck \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (indexOfDeck \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return decks.get(indexOfDeck);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns the index of a deck given the deck name, if a deck with matching name exists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else, return -1 if no deck with matching name is found."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Note: this method is only used internally for State processing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Should not be confused with user seen indexes, since this is 0-based index."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return index"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int getDeckIndex(String name) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Deck currentDeck \u003d decks.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            boolean isUserInputMatchDeckName \u003d currentDeck.getDeckName().equals(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isUserInputMatchDeckName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Set current state of the app."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param currState the current state."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public void setCurrState(StateEnum currState) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        this.currState \u003d currState;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        LogsCenter.getLogger(State.class).info(\"Entering state: + this.currState\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Get current state of the app."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the current state."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public StateEnum getCurrState() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return currState;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Checks whether a deck with the given name exists. To prevent duplicates."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the index."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public int hasDeckName(String name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            if (decks.get(i).getDeckName() \u003d\u003d name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 2,
      "AHaliq": 20,
      "PhireHandy": 12,
      "timothyleong97": 57,
      "huiminlim": 54
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/StateEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Enums describing state of program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public enum StateEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    DEFAULT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_FBCARD,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    TEST_FBCARD_BACK,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_MCQ,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    TEST_MCQ_BACK,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST_JSJAVA"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 4,
      "shawnpunchew11": 2,
      "timothyleong97": 1,
      "huiminlim": 7
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/StateHolder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A class to manage state."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class StateHolder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private static State state;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static State getState() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (state \u003d\u003d null) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            state \u003d new State();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 15
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/StateOLD.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// * Running state of the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//public class State {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private static State state;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private ArrayList\u003cDeck\u003e decks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private HashMap\u003cString, Consumer\u003e consumerHashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private StateEnum currState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Constructor to create a State object with existing Deck objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param initialDecks ArrayList of Deck objects to include in State object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public State(ArrayList\u003cDeck\u003e initialDecks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks \u003d initialDecks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    // todo: unused constructor - remove?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Constructor to create a State object with no Deck objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public State() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks \u003d StorageManager.loadDecks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        consumerHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        currState \u003d StateEnum.DEFAULT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * State is a singleton to avoid passing the state object through too many layers of objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return the singleton state object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public static State getState() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (state \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            state \u003d new State();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return state;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Returns false if decks is non-empty, true if decks is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public boolean isEmpty() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return decks.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Returns the list of decks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public ArrayList\u003cDeck\u003e getDecks() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return decks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Adds a new empty Deck object to decks list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void addDeck(String deckName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks.add(new Deck(deckName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Adds a deck object to decks list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param deck deck object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks.add(deck);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Getter for the ArrayList of all decks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return The ArrayList of all the decks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public ArrayList\u003cDeck\u003e getAllDecks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return this.decks;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Removes the deck from the decks list, if there is a deck with a matching name."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Else, throw exception when no deck with matching name is found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void removeDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        int deckIndex \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (deckIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks.remove(deckIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Returns the deck object that matches in name, if a deck with matching name exists."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Else, throw exception when no deck with matching name is found."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return index"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public Deck getDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        int indexOfDeck \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        if (indexOfDeck \u003d\u003d -1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return decks.get(indexOfDeck);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Load decks from StorageManager."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param newDecks the array list of all decks in Storage."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void reloadAllDecks(ArrayList\u003cDeck\u003e newDecks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        decks \u003d newDecks;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Returns the index of a deck given the deck name, if a deck with matching name exists."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Else, return -1 if no deck with matching name is found."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Note: this method is only used internally for State processing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Should not be confused with user seen indexes, since this is 0-based index."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return index"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    private int getDeckIndex(String name) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            Deck currentDeck \u003d decks.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//            boolean isUserInputMatchDeckName \u003d currentDeck.getDeckName().equals(name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            if (isUserInputMatchDeckName) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//                return i;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return -1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void addConsumer(String identifier, Consumer c) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        consumerHashMap.putIfAbsent(identifier, c);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * This method of getting consumers generifies the type of input which leads to compiler warnings."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * As such, the suppress warning annotations used whenever this method is called"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * are due to the unchecked generic Consumer types."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param identifier name of the Consumer as recorded in ConsumerSchema"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return the Consumer"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public Consumer getConsumer(String identifier) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return consumerHashMap.get(identifier);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Sets the current state at a specified StateEnum."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @param currState the StateEnum that state should be at at this time."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public void setCurrState(StateEnum currState) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        this.currState \u003d currState;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * Getter for the current StateEnum."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     * @return the StateEnum that the state is in at this time."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    public StateEnum getCurrState() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//        return this.currState;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "AHaliq": 180
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/TestCase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A testcase object to remember 1 input file and 1 output file. used by JavaCard."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class TestCase implements JsonInterface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String actualOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public TestCase(String input, String expectedOutput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.expectedOutput \u003d expectedOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A method to check if the given output matches expected output in the Test Case.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param output the actual output from running the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return a boolean specifying pass/fail, and the actual and expected output for comparison."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e checkDiff(String output) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        expectedOutput \u003d expectedOutput.strip();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        output \u003d output.strip();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Pair\u003cString, String\u003e outputs \u003d new Pair\u003c\u003e(expectedOutput, output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e obj;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (!expectedOutput.equals(output)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(false, outputs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(true, outputs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasMissingInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return input \u003d\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasMissingExpectedOutput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return expectedOutput \u003d\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getExpectedOutput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return expectedOutput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setActualOutput(String actualOutput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.actualOutput \u003d actualOutput;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getActualOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return actualOutput;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A method to clone this object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return A duplicate TestCase."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public TestCase duplicate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String in \u003d input;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String out \u003d expectedOutput;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new TestCase(in, out);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TEST_CASE_INPUT, input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TEST_CASE_OUTPUT, expectedOutput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 13,
      "timothyleong97": 68
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/FlashCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface all flash card types must implement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public abstract class FlashCard implements JsonInterface, Comparable\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String front;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String back;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    protected Integer priority \u003d Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    protected int cardResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Evaluate if the input matches the card"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param in input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return true if its a valid match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract Boolean evaluate(String in) throws IndexNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns front text of card."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of front text of card."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract String getFront();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return back text of card."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of back text of card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract String getBack();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Edits the front text of card."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace in front."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract void editFront(String newText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Edits the back text of card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace in back."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract void editBack(String newText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Create JsonValue out of this Flashcard."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Checks if this card has higher priority than other card."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If this card has higher priority, return a positive number."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If this card has lower priority, return a negative number."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param otherCard"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public int compareTo(FlashCard otherCard) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return this.priority - otherCard.getPriority();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns priority level of flashcard."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return integer value of priorirty level."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public abstract FlashCard duplicate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public abstract void updateScore(Boolean isCorrect);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public abstract int getCardResult();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setFront(String front) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.front \u003d front;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setBack(String back) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.back \u003d back;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    };"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 8,
      "shawnpunchew11": 6,
      "PhireHandy": 2,
      "timothyleong97": 24,
      "huiminlim": 59
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/FrontBackCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Card that evaluates input to match back of card."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class FrontBackCard extends FlashCard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    protected String back;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    protected String front;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    protected int cardResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a FrontBackCard."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Takes in 2 String, front text and back text."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of the front text."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString  String of the back text."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public FrontBackCard(String frontString, String backString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        back \u003d backString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Default priority is 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.cardResult \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a FrontBackCard with front and back string, and integer priority level."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString   String of front text."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString    String of back text."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param priorityLevel Integer of priority level."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public FrontBackCard(String frontString, String backString, int priorityLevel) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d backString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns JsonValue of flashcard."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TYPE_FIELD, Schema.FRONT_BACK_TYPE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.FRONT_FIELD, front);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.BACK_FIELD, back);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public FlashCard duplicate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new FrontBackCard(front, back, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in String input by user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value, if correct return true, else return false."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Boolean evaluate(String in) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return in.equals(back);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the front text of card."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of front text to replace the front."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the back text of card."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace the back text."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns front string of card."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of front text."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns back string of card."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of back text."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void updateScore(Boolean isCorrect) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardResult \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardResult \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getCardResult() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return this.cardResult;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "AHaliq": 25,
      "shawnpunchew11": 18,
      "timothyleong97": 12,
      "huiminlim": 69
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/JavaCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.util.DeepCopy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "//import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Card that evaluates input as javascript code whose output has to match back of card."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaCard extends FlashCard {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ArrayList\u003cTestCase\u003e testCases;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String attempt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaCard(String question, ArrayList\u003cTestCase\u003e testCases) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.testCases \u003d testCases;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.front \u003d newText;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //unused"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (TestCase t : testCases) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                arr.add(t.toJson().getObject());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"ERROR IN TESTCASES : \" + e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TYPE_FIELD, Schema.JAVA_TYPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.FRONT_FIELD, question);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TEST_CASES_FIELD, arr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public FlashCard duplicate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String front \u003d question;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new JavaCard(front, DeepCopy.duplicateTestCases(testCases));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getAttempt() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return attempt;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setAttempt(String attempt) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void updateScore(Boolean isCorrect) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardResult \u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.cardResult \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public int getCardResult() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return this.cardResult;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public ArrayList\u003cTestCase\u003e getTestCases() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return testCases;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 5,
      "AHaliq": 23,
      "shawnpunchew11": 15,
      "timothyleong97": 63
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/JavascriptCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Card that evaluates input as javascript code whose output has to match back of card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class JavascriptCard extends FlashCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    protected String front; //question"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    protected String back;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    protected String attempt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param outputString"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JavascriptCard(String frontString, String outputString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        back \u003d outputString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Javascript card with user specified priority."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of front text."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param outputString String of back text."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param priorityLevel Integer priority level of card."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JavascriptCard(String frontString, String outputString, int priorityLevel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d outputString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.TYPE_FIELD, Schema.JAVASCRIPT_TYPE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.FRONT_FIELD, front);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.BACK_FIELD, back);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public FlashCard duplicate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String frontText \u003d front;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String backText \u003d back;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new JavascriptCard(frontText, backText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return the user\u0027s attempted code."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return code attempt"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getAttempt() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return attempt;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Store the user\u0027s attempted code."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param attempt code attempt"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setAttempt(String attempt) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void updateScore(Boolean isCorrect) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.cardResult \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.cardResult \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getCardResult() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.cardResult;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 2,
      "AHaliq": 13,
      "shawnpunchew11": 1,
      "timothyleong97": 4,
      "huiminlim": 118
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/MultipleChoiceCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * FrontBackCard with additional data of multiple choices."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class MultipleChoiceCard extends FrontBackCard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cString\u003e choices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cString\u003e displayChoices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Answer index is 1-based"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int displayChoicesAnswerIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Answer index is 1-based"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int answerIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // Answer index is 1-based"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private int userAttempt \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct a multiple choice card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param frontString front string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param backString  original sorted answer index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param choicesArg  original sorted choices"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public MultipleChoiceCard(String frontString, String backString, ArrayList\u003cString\u003e choicesArg) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(frontString, backString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Checks if choices contain duplicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //boolean hasDuplicateInChoice \u003d hasChoiceContainDuplicate(choicesArg);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices \u003d choicesArg;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Answer index is 1-based."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            answerIndex \u003d Integer.parseInt(back);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException f) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //boolean isNotValidAnswerIndex \u003d isNotValidChoice(answerIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(MultipleChoiceCard.class).info(\"Multiple Choice Card created.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor of MCQ card, with front, back string, choices and priority level."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of front text of card."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString  String of back text of card."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choicesArg  Choices available for user to choose."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws DuplicateInChoicesException Throw exception when duplicates exist in choices."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public MultipleChoiceCard(String frontString, String backString, ArrayList\u003cString\u003e choicesArg, int priorityLevel)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throws DuplicateInChoicesException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(frontString, backString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Checks if choices contain duplicate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean hasDuplicateInChoice \u003d hasChoiceContainDuplicate(choicesArg);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasDuplicateInChoice) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - duplicates in choices.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DuplicateInChoicesException(\"Duplicates found in choices provided.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices \u003d choicesArg;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            answerIndex \u003d Integer.parseInt(back);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException f) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardResult \u003d -1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isNotValidAnswerIndex \u003d isNotValidChoice(answerIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidAnswerIndex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns JsonValue of flashcard."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            JsonObject obj \u003d super.toJson().getObject();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            JsonArray choicesJson \u003d new JsonArray();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for (String option : choices) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                choicesJson.add(option);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            obj.put(Schema.TYPE_FIELD, Schema.MULTIPLE_CHOICE_TYPE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            obj.put(Schema.CHOICES_FIELD, choicesJson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return new JsonValue(obj);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Inherited FrontBackCard unexpected json object\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return super.toJson();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Render the front of card to GUI node."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void renderFront() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Shuffle choices first"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        shuffleChoices();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //super.renderFront();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a list of shuffled choices."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author Timothy Leong"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public ArrayList\u003cString\u003e getShuffledChoices() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        shuffleChoices();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return this.displayChoices;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Evaluates if user input answer is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in String input provided by user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean, if correct return true, else return false."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException Throw exception when input provided by user is not a valid choice."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int userAnswer \u003d -1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // User answer is 1-based indexing"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            userAnswer \u003d Integer.parseInt(in);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + in);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Assume options must be a non-negative integer"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(userAnswer)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice provided is invalid - \" + in);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return userAnswer \u003d\u003d displayChoicesAnswerIndex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if ArrayList of choices contain duplicates."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns true if duplicates exist, false if no duplicates."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choiceSet ArrayList of possible String of choices to check."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean true if ArrayList of choices have duplicates, false if no duplicates."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean hasChoiceContainDuplicate(ArrayList\u003cString\u003e choiceSet) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        HashMap\u003cString, Integer\u003e choiceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c choiceSet.size(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String choiceText \u003d choiceSet.get(i).trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean hasChoice \u003d choiceMap.containsKey(choiceText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (hasChoice) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                choiceMap.put(choiceText, 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the front text of the MultipleChoiceCard."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of text to replace the front of MultipleChoiceCard."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the back text of the MultipleChoiceCard."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of text to replace the back of MultipleChoiceCard."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits one of string in choices, given new text and index."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of targeted choice to edit."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newChoice     String text of new choice option to replace current choice."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of choices or \u003c 0."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editChoice(int indexProvided, String newChoice) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(indexProvided)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // choice index is the index that works with the Arraylist"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int choiceIndex \u003d indexProvided - 1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(choiceIndex, newChoice);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.remove(choiceIndex + 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if the given choice index provided by the user is correct."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Note: the user provided index is 1-based indexing."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Valid indexes include 1, 2, 3, ..., choices."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choiceIndex"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean true if not in valid range, false if in valid range."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean isNotValidChoice(int choiceIndex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return !(choiceIndex \u003e\u003d 1 \u0026\u0026 choiceIndex \u003c\u003d choices.size());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Shuffles the choices of choices and updates the index of correct answer."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void shuffleChoices() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Obtain String of correct answer before sorting"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String correctAnswer \u003d choices.get(answerIndex - 1);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        displayChoices \u003d generateCopyOfChoices();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Collections.shuffle(displayChoices);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Find the index of the correct answer after sorting"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c displayChoices.size(); i++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String currentChoice \u003d displayChoices.get(i);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isCurrentChoiceEqualAnswer \u003d correctAnswer.equals(currentChoice);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isCurrentChoiceEqualAnswer) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                displayChoicesAnswerIndex \u003d i + 1;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cString\u003e generateCopyOfChoices() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c choices.size(); i++) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String newStringObject \u003d choices.get(i);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            newList.add(newStringObject);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the String text of choice given the index of the choice."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of targeted choice to obtain."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text of targeted option."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of choices or \u003c 0."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getChoice(int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(indexProvided)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(MultipleChoiceCard.class).info("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    \"Multiple Choice Card creation failed - Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Use chocies indexing - 0-based indexing"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // choice index is the index that works with the Arraylist"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int choiceIndex \u003d indexProvided - 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return choices.get(choiceIndex);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the String of front of MultipleChoiceCard."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text in front of MultipleChoiceCard."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the String of back of MultipleChoiceCard."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text in back of MultipleChoiceCard."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the display choices."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return the array list of choices that have already been shuffled."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cString\u003e getDisplayChoices() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return displayChoices;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the correct answer in the shuffled array list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return the correct answer (1-based)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getDisplayChoicesAnswerIndex() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return displayChoicesAnswerIndex;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Get the correct answer in the original array list."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return the correct answer (1-based)."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getCorrectAnswerIndex() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return answerIndex;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Retrieve the user\u0027s attempt within the same test."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getUserAttempt() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return userAttempt;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set the user\u0027s attempt in the test."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param userAttempt"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setUserAttempt(int userAttempt) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.userAttempt \u003d userAttempt;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public FlashCard duplicate() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String frontText \u003d front;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String backText \u003d back;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choiceDuplicate \u003d generateCopyOfChoices();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new MultipleChoiceCard(frontText, backText, choiceDuplicate);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getCardResult() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.cardResult;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 23,
      "timothyleong97": 8,
      "huiminlim": 388
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Class to handle all the preset priority."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final Integer LOW_PRIORITY \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final Integer HIGH_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 11
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/DeckAlreadyExistsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " * Represents an error when deck object is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "public class DeckAlreadyExistsException extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public DeckAlreadyExistsException(String cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 10
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/DeckNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when deck object is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DeckNotFoundException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DeckNotFoundException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/DuplicateInChoicesException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when there is a duplicate in choices."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DuplicateInChoicesException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DuplicateInChoicesException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/IndexNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when index is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IndexNotFoundException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public IndexNotFoundException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/InvalidInputException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " * Represents an error when there is an invalid input is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "public class InvalidInputException extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    public InvalidInputException(String cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 10
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/DeepCopy.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Methods for cloning our objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class DeepCopy {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Used to duplicate a deck of cards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param toClone the array list of cards to be cloned"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return an array list of a copy of each card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static ArrayList\u003cFlashCard\u003e duplicateCards(ArrayList\u003cFlashCard\u003e toClone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cFlashCard\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        toClone.forEach(card -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FlashCard newCard \u003d card.duplicate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            newList.add(newCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * An array to duplicate the test cases."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param toClone the array list of test cases."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return an array of a replica of test cases."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static ArrayList\u003cTestCase\u003e duplicateTestCases(ArrayList\u003cTestCase\u003e toClone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ArrayList\u003cTestCase\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        toClone.forEach(testCase -\u003e newList.add(testCase.duplicate()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 36
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/FileReadWrite.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of file read write and path manipulation functions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class FileReadWrite {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Resolve relative path from origin path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param origin        origin path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param relativePath  reltive path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return              absolute path relative from origin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String resolve(String origin, String relativePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return normalizePath(Paths.get(normalizePath(origin)).resolve(relativePath).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Normalize relative path symbols and home if any into absolute path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to normalize"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      normalized path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String normalizePath(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (path.startsWith(\"~\" + File.separator)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            path \u003d System.getProperty(\"user.home\") + path.substring(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Paths.get(path).normalize().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path and content, makes directories if don\u0027t exist then writes the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path    path to file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param content content to write"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void write(String path, String content) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.write(content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path, attempts to read contents of file and return it as string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      file content string"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws FileNotFoundException    file does not exist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String read(String path) throws FileNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReader fr \u003d new FileReader(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                boolean empty \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if (!empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    sb.append(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    empty \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new FileNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Delete the file of the given path. Can also delete empty directory."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true successful delete"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean delete(String path) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.delete();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine if file exists."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true if file exists"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean fileExists(String path) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine if path is a valid directory."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to directory"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true if valid directory"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean pathValidDirectory(String path) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.exists() \u0026\u0026 file.isDirectory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path to a file, extract the file name."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      name of file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String getFileName(String path) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new File(normalizePath(path)).getName();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 132
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/JavaTestCaseRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavaRunner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * This class takes in a Java file, an ArrayList of test cases, and runs the input against each test case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaTestCaseRunner {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TestCase testCase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String userAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String consoleDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaTestCaseRunner(TestCase testCase, String userAttempt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.testCase \u003d testCase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.userAttempt \u003d userAttempt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the user\u0027s attempt at writing a function against the test cases that the user has written."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return (TotalTestCases, ( TotalCorrect, TotalWrong)) in a Pair object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String testCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String filename \u003d \"Main.java\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String input \u003d \"input.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StorageManager.writeCode(filename, userAttempt); //write user code to file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StorageManager.writeCode(input, testCase.getInput()); //write input to file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String compile \u003d JavaRunner.compile(StorageManager.getCodePath(filename));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (compile.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                String output \u003d JavaRunner.runJavaWithRedirection(StorageManager.getCodePath(filename),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        StorageManager.getCodePath(input));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return compile; //compile error"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return null; //either running or compiling failed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 47
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/JsTestCaseRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.InputMismatchException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavascriptRunner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * This class takes in a Java file, an ArrayList of test cases, and runs the input against each test case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestCaseRunner {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String userAttempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String consoleDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestCaseRunner(String codeToRun, String expectedOutput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.expectedOutput \u003d expectedOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.userAttempt \u003d codeToRun;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getConsoleDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return consoleDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the user\u0027s attempt at writing a function against the assertions that the user has written."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return (TotalTestCases, ( TotalCorrect, TotalWrong)) in a Pair object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Pair\u003cString, Pair\u003cInteger, Integer\u003e\u003e testCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String finalCode \u003d processjs(userAttempt, expectedOutput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String output \u003d JavascriptRunner.evaluateString(finalCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleDisplay \u003d output;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        output \u003d output.replaceAll(\"pass\", \"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .replaceAll(\"fail\", \"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .strip();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int correct;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int wrong;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scanner sc \u003d new Scanner(output);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correct \u003d sc.nextInt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            wrong \u003d sc.nextInt();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (InputMismatchException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            correct \u003d -1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            wrong \u003d -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new Pair\u003c\u003e(userAttempt, new Pair\u003c\u003e(correct, wrong));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Inserts testing functionality around the user\u0027s code. Used to check correctness of user\u0027s code."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param userInput      the user\u0027s testing code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param expectedOutput the user\u0027s assertions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the final piece of code that the evaluator can use to score the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private static String processjs(String userInput, String expectedOutput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(\"var correct \u003d 0;\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"var wrong \u003d 0;\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"function assert(actual, expected) {\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    if (actual \u003d\u003d expected) {\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        correct++;\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        print(\u0027pass\u0027);\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    } else {\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        wrong++;\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        print(\u0027fail\u0027);\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(userInput).append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(expectedOutput).append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(\"print(correct, wrong);\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 79
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/Printer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of string utils."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Default indent text of 4 spaces."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String INDENT \u003d repeatChar(4, \u0027 \u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Surround a string with double quotes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be formatted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String surroundQuotes(String str) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\\\"\" + str + \"\\\"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Indent each line with INDENT string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return indentString(str, INDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a specific indent string, append it before each line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param ind indent string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str, String ind) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (String s : str.split(\"\\n\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(ind);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generates a string of repeated characters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param length number of repetitions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c      character to be repeated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting repeated character string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String repeatChar(int length, char c) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return String.valueOf(c).repeat(Math.max(0, length));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 60
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/RegexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A class for generating commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class RegexUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a string in the command format, extract the argument values"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * An argument can be repeated more than once, thus each argument has"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * an ArrayList of string values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param command command header for the input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param args    arguments to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input   input string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return ArrayList of each argument\u0027s ArrayList of values"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cString\u003e\u003e parseCommandFormat(String command, String[] args, String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e inp \u003d new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                .asList(command.length() \u003d\u003d 0 ? input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        : input.split(\"^\" + ignoreCase(command) + \"\\\\s*\")[1]));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        ArrayList\u003cInteger\u003e ain \u003d new ArrayList\u003c\u003e(Arrays.asList(-1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d 0; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            res.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            for (int j \u003d 0; j \u003c inp.size(); j++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                String[] sub \u003d inp.get(j).split(args[i]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (int l \u003d 0; l \u003c sub.length; l++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    sub[l] \u003d sub[l].replaceAll(\"\\\\s+$\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                inp.set(j, sub[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (int k \u003d 1; k \u003c sub.length; k++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    j++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    inp.add(j, sub[k]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    ain.add(j, i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d 1; i \u003c inp.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            res.get(ain.get(i)).add(inp.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generate regex to match a command format input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param command command header"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param args    arguments in the command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return regex matching the command format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String commandFormatRegex(String command, String[] args) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Arrays.stream(args).reduce(\"^\" + ignoreCase(command), (a, v) -\u003e a + argGroup(v), String::join) + \".*\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a regex for an argument in a command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param arg argument text"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return regex for an argument in a command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String argGroup(String arg) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return lookAhead(ignoreCase(arg));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a regex that expects a regex paired with string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param arg argument regex"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return regex paired with string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String pairWith(String arg) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return pairWith(arg, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a regex that expects a regex paired with string or number."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param arg argument regex"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param num true; pairs with number, false; any string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return regex paired with string or number"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String pairWith(String arg, Boolean num) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return arg + \"\\\\s*\" + (num ? \"[0-9]+\" : \"\\\\S\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a regex that looks ahead for regex."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param arg argument regex"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return lookahead regex"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String lookAhead(String arg) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"(?\u003d.*\" + arg + \")\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a regex that ignore case for argument."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param arg argument regex"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return ignore case regex result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String ignoreCase(String arg) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"((?i)\" + arg + \")\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 99,
      "timothyleong97": 11,
      "huiminlim": 2
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/FileImporter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Reads in code from a file and returns a BufferedReader if the file is valid or null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * if the file is invalid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class FileImporter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Stores code from a file into a BufferedReader"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param filepath the destination of the file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return a BufferedReader containing the code or null if file could not be read."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static BufferedReader readFile(String filepath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(\"The file you are trying to read from could not be found :(\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 26
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/JavaRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Type your Java code inside Main.java in the /data directory. Then run the main method in this class to see"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * your code being compiled and run during runtime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaRunner {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs a java file with input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param classFilePath The"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param inputFilePath The location of the file with input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return any output or errors"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String runJavaWithRedirection(String classFilePath, String inputFilePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ProcessBuilder pb \u003d new ProcessBuilder(\"java\", classFilePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            pb.redirectInput(new File(inputFilePath));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            pb.redirectErrorStream(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Process pro \u003d pb.start();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return getTextFromStream(pro.getInputStream()) + getTextFromStream(pro.getErrorStream());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Run Java code without needing system inputs. Used in Java Playground"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param classFilePath the location of the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return any output from the console."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String runJava(String classFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ProcessBuilder pb \u003d new ProcessBuilder(\"java\", classFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            pb.redirectErrorStream(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Process pro \u003d pb.start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return getTextFromStream(pro.getInputStream())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    + getTextFromStream(pro.getErrorStream());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * A method to compile Java files. Returns any console output arising from errors."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param javaFilePath The location of the Java class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the console output if any"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException thrown if the Process that this compilation is on fails."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String compile(String javaFilePath) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        ProcessBuilder pb \u003d new ProcessBuilder(\"javac\", javaFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        pb.redirectErrorStream(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Process pro \u003d pb.start();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return getTextFromStream(pro.getInputStream())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + getTextFromStream(pro.getErrorStream());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private static String getTextFromStream(InputStream ins) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader in \u003d new BufferedReader("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                new InputStreamReader(ins));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        while ((line \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            sb.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 75
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/JavascriptRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.mozilla.javascript.Context;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.mozilla.javascript.tools.shell.Global;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Evaluates Javascript code either from the console or from a .js file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Returns output as a string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavascriptRunner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Evaluates JS code from a given filepath. Uses FileImporter to read in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the output from Rhino as a String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String evaluateFromFile(String filepath) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader reader \u003d FileImporter.readFile(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (reader \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return \"Error: File/filepath invalid, please try again.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String lines;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        while ((lines \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            sb.append(lines);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return evaluateString(sb.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Evaluates a piece of JavaScript code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param code the JS code."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return any output from running the code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String evaluateString(String code) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Context cx \u003d Context.enter();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Global g \u003d new Global(cx);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ByteArrayOutputStream bs \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            PrintStream printStream \u003d new PrintStream(bs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            g.setOut(printStream);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Object result \u003d cx.evaluateString(g, code, \"cmd\", 1, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String evaluatedObject \u003d Context.toString(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String consoleLogs \u003d bs.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (consoleLogs.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return evaluatedObject;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return consoleLogs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (StackOverflowError | Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Context.exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 63
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/datastructures/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.datastructures;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Product type of two types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * @param \u003cU\u003e   first object type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * @param \u003cT\u003e   second object type"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Pair\u003cU, T\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private U first;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private T second;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Pair(U a, T b) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        first \u003d a;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        second \u003d b;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public U fst() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public T snd() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 25
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/JsonInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * All objects that can be represented by JSON should implement this interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public interface JsonInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns JSONValue representation of this object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return JSONValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    JsonValue toJson();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 15,
      "huiminlim": 1
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/JsonParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Parses json string to JsonValue structures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a string input, parse it as a JsonValue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      JsonValue"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException Exceptions indicate incorrect syntax for json files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static JsonValue parseJsonInput(String input) throws JsonFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        char[] arr \u003d input.toCharArray();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Pair\u003cInteger, JsonValue\u003e res \u003d processDynamicValue(arr, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int finalIndex \u003d skipWhiteSpace(arr, res.fst());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (finalIndex \u003d\u003d arr.length) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return res.snd();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(arr, finalIndex, \"expected end of json file\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json value, which can be of type specified in ValueTypes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * enum."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and DynamicValue; algebraic sum type of all possible ValueTypes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Pair\u003cInteger, JsonValue\u003e processDynamicValue(char[] input, int i)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Pair\u003cInteger, JsonValue\u003e obj;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, Integer\u003e res1 \u003d parseJsonInt(input, i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(res1.fst(), new JsonValue(res1.snd()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger, Double\u003e res2 \u003d parseJsonDouble(input, i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj \u003d new Pair\u003c\u003e(res2.fst(), new JsonValue(res2.snd()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException e2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    Pair\u003cInteger, Boolean\u003e res3 \u003d parseJsonBoolean(input, i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    obj \u003d new Pair\u003c\u003e(res3.fst(), new JsonValue(res3.snd()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } catch (JsonFormatException e3) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        Pair\u003cInteger, String\u003e res4 \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        obj \u003d new Pair\u003c\u003e(res4.fst(), new JsonValue(res4.snd()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } catch (JsonFormatException e4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            Pair\u003cInteger, JsonObject\u003e res5 \u003d parseJsonObject(input,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            obj \u003d new Pair\u003c\u003e(res5.fst(), new JsonValue(res5.snd()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        } catch (JsonFormatException e5) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                Pair\u003cInteger, JsonArray\u003e res6 \u003d parseJsonArray(input,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                obj \u003d new Pair\u003c\u003e(res6.fst(), new JsonValue(res6.snd()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            } catch (JsonFormatException e6) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                if (e3.getErrorCode() \u003d\u003d 2 \u0026\u0026 e4.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw new JsonFormatException(input, i, \"Is of unknown format\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e4.getErrorCode() \u003d\u003d 2 \u0026\u0026 e5.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e4;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e6;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json array."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and array"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, JsonArray\u003e parseJsonArray(char[] input, int i)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Encountered no more characters to be an Array\", 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027[\u0027) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expecting [\", 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027[\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Empty array did not close\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first value"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(input, i, \"Value pairs must be comma separated\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between value pairs"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            arr.add(valuePair.snd());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // process key value pairs"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Array did not close\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027]\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, arr);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and object / key value pairs HashMap"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, JsonObject\u003e parseJsonObject(char[] input, int i)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Encountered no more characters to be an Object\", 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expecting {\", 2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027{\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Empty object did not close\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first key"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(input, i, \"Key value pairs must be comma separated\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between key value pairs"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger, String\u003e keyPair \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d keyPair.fst();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                key \u003d keyPair.snd();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException ignored) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Object keys must be strings at \" + i);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse key"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] !\u003d \u0027:\u0027) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Expected : after key name\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // find \u0027:\u0027"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj.put(key, valuePair.snd());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Object did not close\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027}\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, obj);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as an int."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and int"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Integer\u003e parseJsonInt(char[] input, int i)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 (Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027-\u0027)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 (i \u003e\u003d input.length || checkIfLegalAfterValue(input[i]))) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Integer.parseInt(value.toString()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Text is not an Integer\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException(input, i, \"Expected Integer but encountered something\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a double."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and double"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Double\u003e parseJsonDouble(char[] input, int i)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 (Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027e\u0027 || input[i] \u003d\u003d \u0027.\u0027"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || input[i] \u003d\u003d \u0027-\u0027)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 (i \u003d\u003d input.length || checkIfLegalAfterValue(input[i]))) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Double.parseDouble(value.toString()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Text is not a Double\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException(input, i, \"Expected Double but encountered something else\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a boolean."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and boolean"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Boolean\u003e parseJsonBoolean(char[] input, int i)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean value;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Encountered no more characters to be a boolean\", 2);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027t\u0027 \u0026\u0026 input[i] !\u003d \u0027f\u0027) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\", 2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i + 3 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027t\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027r\u0027"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027u\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 4;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (i + 4 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027f\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027a\u0027"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027l\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027s\u0027 \u0026\u0026 input[i + 4] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 5;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003c input.length \u0026\u0026 !checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a string with double quotes surround. Escaped double quotes"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * are also replaced with regular double quotes"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and string"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, String\u003e parseJsonString(char[] input, int i)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean escape \u003d false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Encountered no more characters to be a string\", 2);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected starting double quotes for string but encountered something else\", 2);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i++;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\"\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (input[i] \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d true;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (escape) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] \u003d\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else if (input[i] \u003d\u003d \u0027n\u0027) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\\\\u0027);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d false;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                value.append(input[i]);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e input.length) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"String did not terminate with double quotes\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003c input.length \u0026\u0026 !checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    input, i, \"Expected string but encountered something else\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value.toString());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Check if character is a legal possibility after non object, array values."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c character to test"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return True if legal"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean checkIfLegalAfterValue(char c) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Character.isWhitespace(c) || c \u003d\u003d \u0027,\u0027 || c \u003d\u003d \u0027]\u0027 || c \u003d\u003d \u0027}\u0027 || c \u003d\u003d \u0027:\u0027;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Skip whitespace input[i] onwards till non whitespace encountered."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static int skipWhiteSpace(char[] input, int i) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 Character.isWhitespace(input[i])) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Replace instances of \" and n as escape characters for formatting as json string."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str   string to format"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      formatted string"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String formatStringForJson(String str) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"\\\"\" + str.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\").replaceAll(\"\\n\", \"\\\\\\\\n\") + \"\\\"\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 409,
      "timothyleong97": 1
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/exceptions/JsonFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Exception when string being parsed is of unexpected json format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonFormatException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 1 - failed due to content of file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 2 - failed due to wrong prediction of value data type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int errorCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception without message and default errorCode."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and errorCode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param err   errorCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg, Integer err) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d err;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and default errorCode."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with references to the source json file with an error code."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message for the error"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param err   error code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(char[] input, Integer index, String msg, Integer err) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg + \"\\n\" + getPointToErrorString(input, index));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d err;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with references to the source json file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message for the error"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(char[] input, Integer index, String msg) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg + \"\\n\" + getPointToErrorString(input, index));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generate reference string for error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  formatted reference string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String getPointToErrorString(char[] input, Integer index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int line \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int col \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder lineBuf \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d index \u0026\u0026 i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lineBuf.append(input[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                line++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                col \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                lineBuf \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d index + 1; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lineBuf.append(input[i]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return lineBuf.toString() + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + Printer.indentString(\"^\", Printer.repeatChar(col - 1, \u0027 \u0027))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"(\" + line + \":\" + col + \")\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get error code of object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  errorCode"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getErrorCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return errorCode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 103
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/exceptions/JsonWrongValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValueTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Exception when access wrong value of a JsonValue object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonWrongValueException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonWrongValueException(JsonValueTypes expected, JsonValueTypes got) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(\"Expecting \" + expected + \", however got \" + got);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonArray.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * A representation of a json array."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonArray extends ArrayList\u003cJsonValue\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds an int to the array."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(int value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a double to the array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(double value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a boolean to the array."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(boolean value) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a string to the array."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(String value) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonObject to the array."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonObject value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonArray to the array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonArray value) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a int to the array at the specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, int value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a double to the array at the specified index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, double value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a boolean to the array at the specified index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, boolean value) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a string to the array at the specified index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, String value) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonObject to the array at the specified index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonObject value) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonArray to the array at the specified index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonArray value) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonArray."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (JsonValue entry : this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(entry.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[\\n\" + Printer.indentString(formattedString.toString()) + \"]\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 133,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * A representation of a json object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonObject extends HashMap\u003cString, JsonValue\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an int into the object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue put(String key, int value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an double into the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, double value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an boolean into the object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, boolean value) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an string into the object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, String value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an JsonObject into the object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonObject value) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an JsonArray into the object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonArray value) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonObject."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (HashMap.Entry\u003cString, JsonValue\u003e entry : entrySet()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key \u003d JsonParser.formatStringForJson(entry.getKey());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String value \u003d entry.getValue().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(key).append(\": \").append(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"{\\n\" + Printer.indentString(formattedString.toString()) + \"}\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 93,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Algebraic data type of JsonValueTypes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonValue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonValueTypes type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int valueInt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private double valueDouble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean valueBoolean;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String valueString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonObject valueObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonArray valueArray;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as an int."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(int value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.INT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueInt \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a double."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(double value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.DOUBLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueDouble \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a boolean."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(boolean value) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.BOOLEAN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueBoolean \u003d value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(String value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.STRING;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueString \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a JsonObject."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonObject value) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.OBJECT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueObject \u003d value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a JsonArray."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonArray value) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.ARRAY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueArray \u003d value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the type of this value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  type"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValueTypes getType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an int."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getInt() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.INT) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.INT, type);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueInt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an double."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public double getDouble() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.DOUBLE) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.DOUBLE, type);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueDouble;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an boolean."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean getBoolean() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.BOOLEAN) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.BOOLEAN, type);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueBoolean;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String getString() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.STRING) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.STRING, type);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueString;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an JsonObject."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject getObject() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.OBJECT) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.OBJECT, type);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueObject;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an JsonArray."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonArray getArray() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.ARRAY) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.ARRAY, type);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueArray;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get string representation of object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case INT:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Integer.toString(getInt());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case DOUBLE:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Double.toString(getDouble());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case BOOLEAN:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Boolean.toString(getBoolean());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return JsonParser.formatStringForJson(getString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case OBJECT:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getObject().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case ARRAY:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getArray().toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"ERROR: unexpected json value type \" + type);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"ERROR: json value type does not match value its holding\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 180,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonValueTypes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Enum of value types json util can represent."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum JsonValueTypes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    INT, DOUBLE, BOOLEAN, STRING, OBJECT, ARRAY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 8
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/stats/DateTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.util.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Utilities related to LocalDateTime and Duration objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Calculate the duration between the given start and end times."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param start The start time, in LocalDateTime form."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param end The end time, in LocalDateTime form."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The duration between the start and end times, as a Duration object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Duration calculateDuration(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return Duration.between(start, end);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Returns the String representation of the given Duration object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Format: \"X hours Y minutes Z seconds\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param duration The duration to be represented as a String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The String representation of the given Duration object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getStringFromDuration(Duration duration) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Predicate\u003cString\u003e equalsZero \u003d (s -\u003e s.equals(\"0\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String hours \u003d Long.toString(duration.toHoursPart());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String minutes \u003d Long.toString(duration.toMinutesPart());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String seconds \u003d Long.toString(duration.toSecondsPart());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (!equalsZero.test(hours)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            sb.append(hours).append(\" hours \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (!equalsZero.test(minutes)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            sb.append(minutes).append(\" minutes \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (!equalsZero.test(seconds)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            sb.append(seconds).append(\" seconds\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Returns the String representation of the given LocalDateTime object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Format: \"M/D/Y, HH:MM AM/PM\", similar to \"23/8/16, 1:12 PM\"."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param localDateTime The LocalDateTime object to be represented as a String."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The String representation of the given LocalDateTime object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getStringFromDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return localDateTime.format(formatter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    //@@author AHaliq"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a JsonValue of a LocalDateTime object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param localDateTime object to convert to json"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return              resulting JsonValue"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static JsonValue getJsonFromDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_YEAR, localDateTime.getYear());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_MONTH, localDateTime.getMonthValue());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_DAY, localDateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_HOUR, localDateTime.getHour());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_MINUTE, localDateTime.getMinute());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_SECOND, localDateTime.getSecond());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.DATE_TIME_NANO, localDateTime.getNano());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static LocalDateTime getDateTimeFromJson(JsonObject obj) throws"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonWrongValueException, NullPointerException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return LocalDateTime.of("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_YEAR).getInt(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_MONTH).getInt(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_DAY).getInt(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_HOUR).getInt(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_MINUTE).getInt(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_SECOND).getInt(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj.get(Schema.DATE_TIME_NANO).getInt());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //@@author nattanyz"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Duration getAverageDuration(SessionList sessionList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration totalDuration \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e sessionsArrayList \u003d sessionList.getSessionArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session session : sessionsArrayList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            totalDuration \u003d totalDuration.plus(session.getDuration());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int numberOfSessions \u003d sessionList.getNumberOfSessions();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration averageDuration \u003d totalDuration.dividedBy(numberOfSessions);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return averageDuration;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: generate cut-off date for \"past week\", \"past month\" etc to pass to Stats class"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static LocalDateTime getLastWeekCutoffDate(LocalDateTime from) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime lastWeek \u003d from.minusWeeks(1).truncatedTo(DAYS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return lastWeek;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 94,
      "AHaliq": 31
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/stats/SessionListUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.util.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Utilities for easily manipulating and getting data from SessionList objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class SessionListUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Retrieves a sublist of the given SessionList, containing only sessions which started AFTER"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * the given cutoff."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param initialSessionList The SessionList to get the sublist from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param cutoff The LocalDateTime to be used as the cutoff time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return A sublist of the given SessionList, containing only sessions which started after the given cutoff."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static SessionList getSublistAfterCutoff(SessionList initialSessionList, LocalDateTime cutoff) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sublist \u003d new SessionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e sessionArrayList \u003d initialSessionList.getSessionArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session session : sessionArrayList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            if (session.getSessionStart().isAfter(cutoff)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                sublist.addSession(session);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return sublist;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Retrieves a sublist of the given SessionList, containing only sessions which started within"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * the previous week."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param initialSessionList The SessionList to get the sublist from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return A sublist of the given SessionList, containing only sessions which started within the previous week."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static SessionList getSublistForThisWeek(SessionList initialSessionList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime cutoff \u003d DateTimeUtil.getLastWeekCutoffDate(LocalDateTime.now());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return getSublistAfterCutoff(initialSessionList, cutoff);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Given the score of a test as a String, convert it to a String representing the percentage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * of correct answers, rounded to 2 decimal places."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param score The score to be converted, as a String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The score as a double, representing the percentage of correct answers."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getScoreAsPercentage(String score) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int finalScore \u003d Integer.parseInt(score.split(\"/\")[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int maxScore \u003d Integer.parseInt(score.split(\"/\")[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        double scoreAsDouble \u003d (finalScore / (double) maxScore) * 100;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.##\"); // rounds to 2 d.p."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return decimalFormat.format(scoreAsDouble);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Calculates the average score of a list of test sessions."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param sessionList The list of test sessions, each with a score."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The average score of a list of test sessions."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getAverageScore(SessionList sessionList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // it is known that this method will only be called on SessionLists containing TestSessions."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 72
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/stats/StatsDisplayUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.util.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.controllers.windows.DeckStatisticsWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.controllers.windows.StatisticsWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.UserStatsHolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.StateHolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/** Utilities related to displaying statistics in the GUI. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class StatsDisplayUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Opens the statistics window to show the user\u0027s overall statistics. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void openStatisticsWindow() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Scene scene \u003d new Scene(new StatisticsWindow());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.setTitle(\"My Statistics\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Opens the deck statistics window to show the statistics for the given deck. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void openDeckStatisticsWindow(Deck deck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Scene scene \u003d new Scene(new DeckStatisticsWindow(deck));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.setTitle(\"My Statistics\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Creates the TableView object from the given list of sessions. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static TableView\u003cSession\u003e getSessionsTableView(SessionList sessionList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e sessionsArrayList \u003d sessionList.getSessionArrayList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableView\u003cSession\u003e sessionsTableView \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // temporary debug"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (Session session : sessionsArrayList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"Start: \" + session.getSessionStartString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"End: \" + session.getSessionEndString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            System.out.println(\"Duration: \" + session.getDurationString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionsTableView.setItems(FXCollections.observableArrayList(sessionsArrayList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cSession, String\u003e startColumn \u003d new TableColumn\u003c\u003e(\"Start\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        startColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"sessionStartString\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cSession, String\u003e endColumn \u003d new TableColumn\u003c\u003e(\"End\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        endColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"sessionEndString\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cSession, String\u003e durationColumn \u003d new TableColumn\u003c\u003e(\"Duration\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        durationColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"durationString\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionsTableView.getColumns().add(startColumn);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionsTableView.getColumns().add(endColumn);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionsTableView.getColumns().add(durationColumn);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return sessionsTableView;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Creates the TableView object for the user\u0027s login sessions. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static TableView\u003cSession\u003e getUserSessionsTableView() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList userSessionList \u003d UserStatsHolder.getUserStats().getSessionList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return getSessionsTableView(userSessionList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    //public static TableView\u003cSession\u003e getTestSessionsTableView(Deck deck)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Creates the TableView object representing the list of decks. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static TableView\u003cDeck\u003e getDeckTableView() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // for each deck in list of decks in state, get the DeckStats object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cDeck\u003e decks \u003d StateHolder.getState().getDecks();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableView\u003cDeck\u003e deckTableView \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        deckTableView.setItems(FXCollections.observableArrayList(decks));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cDeck, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Deck name\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"deckName\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cDeck, Integer\u003e numCardsColumn \u003d new TableColumn\u003c\u003e(\"Number of cards\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        numCardsColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"numberOfCards\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TableColumn\u003cDeck, Integer\u003e numSessionsColumn \u003d new TableColumn\u003c\u003e(\"Number of sessions\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        numSessionsColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"numberOfSessions\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //TableColumn\u003cDeck, Double\u003e avgScoreColumn \u003d new TableColumn\u003c\u003e(\"Average score\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //avgScoreColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"averageScore\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        deckTableView.getColumns().add(nameColumn);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        deckTableView.getColumns().add(numCardsColumn);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        deckTableView.getColumns().add(numSessionsColumn);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //deckTableView.getColumns().add(avgScoreColumn);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return deckTableView;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    ///** Creates the TableView object representing the list of sessions for a deck. */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 113
    }
  },
  {
    "path": "src/main/resources/view/Cards/Back/JsCardBack.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cAnchorPane id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"resultLabel\" alignment\u003d\"TOP_CENTER\" layoutX\u003d\"37.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"126.0\" prefWidth\u003d\"199.0\" text\u003d\"Out of 6 test cases, you passed 5 and failed 1.\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003c/opaqueInsets\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 13
    }
  },
  {
    "path": "src/main/resources/view/Cards/Back/MCQCardBack.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" style\u003d\"-fx-background-color: #e3e3e3;\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"correctOrWrongLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"69.0\" prefWidth\u003d\"243.0\" text\u003d\"Correct!\" textAlignment\u003d\"CENTER\" textFill\u003d\"#dc0b0b\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"seeFrontButton\" layoutX\u003d\"87.0\" layoutY\u003d\"281.0\" mnemonicParsing\u003d\"false\" text\u003d\"Show Question\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"correctAnswerLabel\" alignment\u003d\"CENTER\" layoutY\u003d\"142.0\" prefHeight\u003d\"62.0\" prefWidth\u003d\"274.0\" text\u003d\"Option 1 is the correct answer.\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 12
    }
  },
  {
    "path": "src/main/resources/view/Cards/Back/SimpleCardBack.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003cfx:root id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" style\u003d\"-fx-background-color: #e3e3e3;\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cButton fx:id\u003d\"seeFrontButton\" layoutX\u003d\"88.0\" layoutY\u003d\"184.0\" mnemonicParsing\u003d\"false\" text\u003d\"Show Question\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"answerLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"15.0\" layoutY\u003d\"16.0\" prefHeight\u003d\"98.0\" prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003cButton fx:id\u003d\"correctButton\" layoutX\u003d\"95.0\" layoutY\u003d\"221.0\" mnemonicParsing\u003d\"false\" text\u003d\"I got it right!\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003cButton fx:id\u003d\"wrongButton\" layoutX\u003d\"87.0\" layoutY\u003d\"254.0\" mnemonicParsing\u003d\"false\" text\u003d\"I got it wrong :(\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 4,
      "timothyleong97": 10
    }
  },
  {
    "path": "src/main/resources/view/Cards/Front/BasicFrontBackCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" style\u003d\"-fx-background-color: #e3e3e3;\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"98.0\" prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"seeBackButton\" layoutX\u003d\"104.0\" layoutY\u003d\"282.0\" mnemonicParsing\u003d\"false\" text\u003d\"See Back\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 11
    }
  },
  {
    "path": "src/main/resources/view/Cards/Front/CodeCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cAnchorPane id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"questionTextLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"222.0\" prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cButton fx:id\u003d\"openCoderButton\" layoutX\u003d\"83.0\" layoutY\u003d\"263.0\" mnemonicParsing\u003d\"false\" text\u003d\"Go to FlashCoder\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 11
    }
  },
  {
    "path": "src/main/resources/view/Cards/Front/JavaFront.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.AnchorPane\" id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionTextLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"222.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "               prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"openCoderButton\" layoutX\u003d\"83.0\" layoutY\u003d\"263.0\" mnemonicParsing\u003d\"false\" text\u003d\"Go to FlashCoder\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 13
    }
  },
  {
    "path": "src/main/resources/view/Cards/Front/JsCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" style\u003d\"-fx-background-color: #e3e3e3;\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionTextLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"222.0\" prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"openCoderButton\" layoutX\u003d\"83.0\" layoutY\u003d\"263.0\" mnemonicParsing\u003d\"false\" text\u003d\"Go to FlashCoder\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 11
    }
  },
  {
    "path": "src/main/resources/view/Cards/Front/MCQCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"cardholder\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" style\u003d\"-fx-background-color: #e3e3e3;\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"98.0\" prefWidth\u003d\"243.0\" text\u003d\"Question goes here\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"seeBackButton\" layoutX\u003d\"104.0\" layoutY\u003d\"282.0\" mnemonicParsing\u003d\"false\" text\u003d\"See Back\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"choiceScrollPane\" layoutX\u003d\"22.0\" layoutY\u003d\"112.0\" prefHeight\u003d\"154.0\" prefWidth\u003d\"228.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cVBox fx:id\u003d\"choiceContainer\" prefHeight\u003d\"150.0\" prefWidth\u003d\"223.0\" spacing\u003d\"7.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                  \u003cInsets left\u003d\"6.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 22
    }
  },
  {
    "path": "src/main/resources/view/Displays/CardTitle.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"552.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"questionLabel\" prefHeight\u003d\"52.0\" prefWidth\u003d\"268.0\" style\u003d\"-fx-label-padding: 10;\" text\u003d\"Question \" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cPane prefHeight\u003d\"46.0\" prefWidth\u003d\"156.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"editButton\" mnemonicParsing\u003d\"false\" text\u003d\"Edit\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"deleteButton\" mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cInsets right\u003d\"10.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 18
    }
  },
  {
    "path": "src/main/resources/view/Displays/CreateDeckDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"Content\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"main-content-window\" stylesheets\u003d\"@../defaultStyles.css\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel styleClass\u003d\"window-title\" text\u003d\"Create a new deck\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cLabel fx:id\u003d\"deckName\" alignment\u003d\"CENTER\" text\u003d\"Name of deck:\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cTextField fx:id\u003d\"deckNameInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"171.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cButton fx:id\u003d\"onSaveDeck\" mnemonicParsing\u003d\"false\" text\u003d\"Save deck\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003cButton fx:id\u003d\"cancelButton\" mnemonicParsing\u003d\"false\" text\u003d\"Cancel\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 16,
      "timothyleong97": 9
    }
  },
  {
    "path": "src/main/resources/view/Displays/DeckDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003cfx:root id\u003d\"Content\" fx:id\u003d\"deckDisplay\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"420.0\" prefWidth\u003d\"620.0\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cLabel fx:id\u003d\"deckName\" alignment\u003d\"CENTER\" layoutX\u003d\"265.0\" layoutY\u003d\"5.0\" prefHeight\u003d\"26.0\" prefWidth\u003d\"95.0\" text\u003d\"Name of deck\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cButton fx:id\u003d\"startTest\" layoutX\u003d\"122.0\" layoutY\u003d\"382.0\" mnemonicParsing\u003d\"false\" text\u003d\"Start Review\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cScrollPane layoutX\u003d\"32.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"314.0\" prefWidth\u003d\"556.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                \u003cVBox fx:id\u003d\"questionList\" prefHeight\u003d\"311.0\" prefWidth\u003d\"552.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cLabel fx:id\u003d\"deckSize\" alignment\u003d\"CENTER\" layoutX\u003d\"2.0\" layoutY\u003d\"360.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"620.0\" text\u003d\"number of cards\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cButton fx:id\u003d\"deleteDeckButton\" layoutX\u003d\"417.0\" layoutY\u003d\"382.0\" mnemonicParsing\u003d\"false\" text\u003d\"Delete Deck\" textFill\u003d\"RED\" underline\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cButton fx:id\u003d\"addQuestionButton\" layoutX\u003d\"225.0\" layoutY\u003d\"382.0\" mnemonicParsing\u003d\"false\" text\u003d\"Change Name/Add Question\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 9,
      "timothyleong97": 13
    }
  },
  {
    "path": "src/main/resources/view/Displays/EditDeckDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cfx:root id\u003d\"Content\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"main-content-window\" stylesheets\u003d\"@../defaultStyles.css\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cLabel styleClass\u003d\"window-title\" text\u003d\"Edit your deck\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "              \u003cLabel fx:id\u003d\"deckName\" alignment\u003d\"CENTER\" text\u003d\"Name of deck:\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "              \u003cTextField fx:id\u003d\"deckNameInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"171.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cVBox fx:id\u003d\"cardCreatingPane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"deckSize\" text\u003d\"0 cards\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "              \u003cButton fx:id\u003d\"doneEditingButton\" mnemonicParsing\u003d\"false\" text\u003d\"Done\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 26
    }
  },
  {
    "path": "src/main/resources/view/Displays/JavaTestCaseInputBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"93.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         prefWidth\u003d\"505.0\" type\u003d\"javafx.scene.control.ScrollPane\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cVBox fx:id\u003d\"testCaseBox\" prefHeight\u003d\"90.0\" prefWidth\u003d\"502.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 10
    }
  },
  {
    "path": "src/main/resources/view/Displays/JavaTestCaseRow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"500.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"inputTextArea\" prefHeight\u003d\"43.0\" prefWidth\u003d\"187.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"outputTextArea\" prefHeight\u003d\"43.0\" prefWidth\u003d\"191.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"addRowButton\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"42.0\" prefWidth\u003d\"42.0\" text\u003d\"Add\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cButton fx:id\u003d\"deleteRowButton\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"42.0\" prefWidth\u003d\"58.0\" text\u003d\"Delete\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 21
    }
  },
  {
    "path": "src/main/resources/view/Displays/JsTestCaseInputTextArea.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"93.0\" prefWidth\u003d\"505.0\" type\u003d\"javafx.scene.control.ScrollPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"90.0\" prefWidth\u003d\"502.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cTextArea fx:id\u003d\"testCaseTextArea\" layoutX\u003d\"5.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"86.0\" prefWidth\u003d\"494.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 14
    }
  },
  {
    "path": "src/main/resources/view/Displays/MCQOptionInputRow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.RadioButton?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"59.0\" prefWidth\u003d\"493.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"optionValue\" alignment\u003d\"BOTTOM_LEFT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"22.0\" text\u003d\"1.\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextField fx:id\u003d\"optionText\" prefHeight\u003d\"26.0\" prefWidth\u003d\"191.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"deleteButton\" mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"addNewRowButton\" mnemonicParsing\u003d\"false\" text\u003d\"Add new...\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "      \u003cRadioButton fx:id\u003d\"rightAnswerRadio\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"26.0\" prefWidth\u003d\"87.0\" text\u003d\"right answer\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 20
    }
  },
  {
    "path": "src/main/resources/view/Displays/MCQOptionsSetter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"93.0\" prefWidth\u003d\"505.0\" type\u003d\"javafx.scene.control.ScrollPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cVBox fx:id\u003d\"optionInputBox\" prefHeight\u003d\"90.0\" prefWidth\u003d\"467.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 9
    }
  },
  {
    "path": "src/main/resources/view/Displays/NoDecksDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER\" style\u003d\"-fx-padding: 10;\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "         type\u003d\"javafx.scene.layout.VBox\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel fx:id\u003d\"message\" alignment\u003d\"CENTER\" prefHeight\u003d\"56.0\" prefWidth\u003d\"264.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "               text\u003d\"Hello there! You currently have no decks.\" textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButton fx:id\u003d\"createNewDeck\" mnemonicParsing\u003d\"false\" text\u003d\"Create a Deck\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "timothyleong97": 14
    }
  },
  {
    "path": "src/main/resources/view/Displays/TestDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root id\u003d\"Content\" fx:id\u003d\"deckDisplay\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"427.0\" prefWidth\u003d\"633.0\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"cardDisplay\" layoutX\u003d\"179.0\" layoutY\u003d\"21.0\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"164.0\" layoutY\u003d\"361.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"282.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"prevButton\" mnemonicParsing\u003d\"false\" text\u003d\"Prev\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"endSessionButton\" mnemonicParsing\u003d\"false\" text\u003d\"End Session\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"nextButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" text\u003d\"Next\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003cLabel fx:id\u003d\"scoreLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"286.0\" layoutY\u003d\"402.0\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "shawnpunchew11": 1,
      "timothyleong97": 18
    }
  },
  {
    "path": "src/main/resources/view/Displays/TimedTestDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003cfx:root id\u003d\"Content\" fx:id\u003d\"deckDisplay\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"427.0\" prefWidth\u003d\"633.0\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"cardDisplay\" layoutX\u003d\"179.0\" layoutY\u003d\"21.0\" prefHeight\u003d\"334.0\" prefWidth\u003d\"274.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"164.0\" layoutY\u003d\"361.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"282.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                \u003cButton fx:id\u003d\"prevButton\" mnemonicParsing\u003d\"false\" text\u003d\"Prev\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                \u003cButton fx:id\u003d\"endSessionButton\" mnemonicParsing\u003d\"false\" text\u003d\"End Session\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                \u003cButton fx:id\u003d\"nextButton\" alignment\u003d\"CENTER\" mnemonicParsing\u003d\"false\" text\u003d\"Next\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        \u003cLabel fx:id\u003d\"scoreLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"274.0\" layoutY\u003d\"404.0\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"18.0\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003cLabel fx:id\u003d\"timerLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"27.0\" layoutY\u003d\"47.0\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"26.0\" prefWidth\u003d\"35.0\" textAlignment\u003d\"CENTER\" textFill\u003d\"#ff5858\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            \u003cFont name\u003d\"Ebrima\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003cLabel fx:id\u003d\"timerLabel1\" alignment\u003d\"CENTER\" layoutX\u003d\"27.0\" layoutY\u003d\"21.0\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"26.0\" prefWidth\u003d\"35.0\" text\u003d\"Timer\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Symbol\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 30
    }
  },
  {
    "path": "src/main/resources/view/Windows/CardCreatingWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ChoiceBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"main-content-window\" stylesheets\u003d\"@../defaultStyles.css\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cLabel styleClass\u003d\"window-title\" text\u003d\"Add a new card\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cLabel text\u003d\"Enter your question\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cTextField fx:id\u003d\"questionField\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cLabel fx:id\u003d\"addAnswerLabel\" text\u003d\"Enter your answers\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cVBox fx:id\u003d\"answerContainer\" prefHeight\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cLabel text\u003d\"Type of card\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cChoiceBox fx:id\u003d\"cardTypeSelector\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cButton fx:id\u003d\"onAddQuestion\" mnemonicParsing\u003d\"false\" text\u003d\"Add card\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 18,
      "timothyleong97": 11
    }
  },
  {
    "path": "src/main/resources/view/Windows/CardEditingWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ChoiceBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" styleClass\u003d\"main-content-window\" stylesheets\u003d\"@../defaultStyles.css\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cLabel fx:id\u003d\"windowTitle\" layoutX\u003d\"22.0\" layoutY\u003d\"22.0\" styleClass\u003d\"window-title\" text\u003d\"Edit Card\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cLabel text\u003d\"Type of Card\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cChoiceBox fx:id\u003d\"cardTypeSelector\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel layoutX\u003d\"22.0\" layoutY\u003d\"107.0\" text\u003d\"Type your question\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cTextField fx:id\u003d\"questionField\" layoutX\u003d\"22.0\" layoutY\u003d\"136.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cLabel layoutX\u003d\"24.0\" layoutY\u003d\"166.0\" text\u003d\"Add your answers\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cVBox fx:id\u003d\"answerContainer\" layoutX\u003d\"22.0\" layoutY\u003d\"196.0\" prefHeight\u003d\"94.0\" prefWidth\u003d\"502.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cButton fx:id\u003d\"saveChangesButton\" mnemonicParsing\u003d\"false\" text\u003d\"Save Changes\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cButton fx:id\u003d\"cancelButton\" mnemonicParsing\u003d\"false\" text\u003d\"Cancel\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 22,
      "timothyleong97": 12
    }
  },
  {
    "path": "src/main/resources/view/Windows/DeckStatisticsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" stylesheets\u003d\"@../defaultStyles.css\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "  type\u003d\"javafx.scene.control.ScrollPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "  \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    \u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"main-content-window\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel fx:id\u003d\"windowTitle\" styleClass\u003d\"window-title\" text\u003d\"My statistics for deck\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel fx:id\u003d\"numCards\" text\u003d\"Number of cards in deck: 0 cards\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalSessions\" text\u003d\"Test sessions for this deck: 0 sessions\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel fx:id\u003d\"sessionsThisWeek\" text\u003d\"Total test sessions this week: 0 sessions\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalDuration\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        text\u003d\"Total duration of test sessions: 0 hours 0 minutes 0 seconds\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cLabel styleClass\u003d\"window-subtitle\" text\u003d\"My Test Sessions\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"testSessionsScrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        maxHeight\u003d\"200.0\" minHeight\u003d\"60.0\" prefHeight\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "          \u003cTableView fx:id\u003d\"testSessionsTableView\" fixedCellSize\u003d\"24.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "              \u003cLabel text\u003d\"There are no recorded test sessions yet!\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "          \u003c/TableView\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "  \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 32
    }
  },
  {
    "path": "src/main/resources/view/Windows/JavaEditor.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.controllers.jsjava.JavaEditorController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 19
    }
  },
  {
    "path": "src/main/resources/view/Windows/JavaTestEvaluator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dream.fcard.gui.controllers.jsjava.JavaTestEvaluator\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 18
    }
  },
  {
    "path": "src/main/resources/view/Windows/JsEditor.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.controllers.jsjava.JsEditorController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 19
    }
  },
  {
    "path": "src/main/resources/view/Windows/JsTestEvaluator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.controllers.jsjava.JsTestEvaluator\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 19
    }
  },
  {
    "path": "src/main/resources/view/Windows/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.SeparatorMenuItem?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cVBox prefHeight\u003d\"575.0\" prefWidth\u003d\"859.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dream.fcard.gui.controllers.windows.MainWindow\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cMenuBar VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"onCreateNewDeckMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Create a new deck\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Open…\" /\u003e--\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Open Recent\" /\u003e--\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e--\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e--\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Revert\" /\u003e--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c!--                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Preferences…\" /\u003e--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"quitMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Quit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Utilities\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"jsEditorMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"JavaScript Playground\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"javaEditorMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Java Playground\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"statisticsMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"View my statistics\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cHBox focusTraversable\u003d\"true\" prefHeight\u003d\"438.0\" prefWidth\u003d\"860.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003cVBox fx:id\u003d\"deckScrollPane\" spacing\u003d\"10.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cLabel styleClass\u003d\"window-subtitle\" stylesheets\u003d\"@../defaultStyles.css\" text\u003d\"Your Decks\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cScrollPane fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                         \u003cListView fx:id\u003d\"deckList\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"180.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#showCreateNewDeckForm\" text\u003d\"Add new...\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"displayScrollPane\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                        \u003cVBox fx:id\u003d\"displayContainer\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cTextField fx:id\u003d\"commandLine\" onAction\u003d\"#handleUserInput\" promptText\u003d\"Enter a command...\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/padding\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        \u003cHBox id\u003d\"HBox\" alignment\u003d\"CENTER_LEFT\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"messageLabel\" textFill\u003d\"#ed0a0a\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 46,
      "timothyleong97": 41
    }
  },
  {
    "path": "src/main/resources/view/Windows/StatisticsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003cfx:root fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" minViewportHeight\u003d\"600.0\" minViewportWidth\u003d\"600.0\" stylesheets\u003d\"@../defaultStyles.css\" type\u003d\"javafx.scene.control.ScrollPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"main-content-window\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel fx:id\u003d\"windowTitle\" styleClass\u003d\"window-title\" text\u003d\"My statistics\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel fx:id\u003d\"totalSessions\" text\u003d\"Total login sessions: 0 sessions\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel fx:id\u003d\"sessionsThisWeek\" text\u003d\"Total login sessions this week: 0 sessions\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel fx:id\u003d\"totalDuration\" text\u003d\"Total login duration: 0 hours 0 minutes 0 seconds\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel fx:id\u003d\"averageDuration\" text\u003d\"Average duration per login: 0 hours 0 minutes 0 seconds\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel styleClass\u003d\"window-subtitle\" text\u003d\"My login sessions\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cScrollPane fx:id\u003d\"sessionsScrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"400.0\" minHeight\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003cTableView fx:id\u003d\"sessionsTableView\" fixedCellSize\u003d\"24.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cplaceholder\u003e\u003cLabel text\u003d\"There are no recorded sessions yet!\" /\u003e\u003c/placeholder\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003c/TableView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel styleClass\u003d\"helper-text\" text\u003d\"To view statistics for individual decks, type \u0026quot;stats deck/[deckname]\u0026quot;\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cLabel styleClass\u003d\"window-subtitle\" text\u003d\"My statistics by deck\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003cScrollPane fx:id\u003d\"deckTableScrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" maxHeight\u003d\"400.0\" minHeight\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003cTableView fx:id\u003d\"decKTableView\" fixedCellSize\u003d\"24.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                  \u003cplaceholder\u003e\u003cLabel text\u003d\"There are no decks yet!\" /\u003e\u003c/placeholder\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "               \u003c/TableView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "         \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 35
    }
  },
  {
    "path": "src/main/resources/view/defaultStyles.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ".main-content-window {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    -fx-padding: 20px;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    -fx-spacing: 10px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ".window-title {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    -fx-font-size: 24px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ".window-subtitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "   -fx-font-size: 16px;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ".helper-text {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 15
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/respond/ResponsesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.model.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//public class ResponsesTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void rootTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String path \u003d FileReadWrite.resolve(\"./\", \"./testDir\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        new File(path).mkdirs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // make directory for testing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        Responses.ROOT.call(\"root \" + path, new State());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        assertEquals(path, StorageManager.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // cleanup"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void rootNoPathTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        assertEquals(true, Responses.ROOT_NO_PATH.call(\"root\", new State()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void importTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String deckName \u003d \"test123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String path \u003d FileReadWrite.normalizePath(\"~/\" + deckName + \".json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String root \u003d FileReadWrite.normalizePath(\"~/testDir\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // test parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        StorageManager.provideRoot(root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        State s \u003d new State();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        Deck d \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        d.addNewCard(new FrontBackCard(\"front\", \"back\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // create stubs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.write(path, d.toJson().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // create file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        Responses.IMPORT.call(\"import \" + path, s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // test import"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//            assertEquals(deckName, s.getDeck(deckName).getDeckName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//            assertEquals(d.toJson().toString(), s.getDeck(deckName).toJson().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // check deck valid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks/\" + deckName + \".json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(root);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // cleanup"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void importNoPathTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        assertEquals(true, Responses.IMPORT_NO_PATH.call(\"import\", new State()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void exportTest() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String deckName \u003d \"test123\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String path \u003d FileReadWrite.normalizePath(\"~\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String exportPath \u003d FileReadWrite.resolve(path, \"./\" + deckName + \".json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        String root \u003d FileReadWrite.normalizePath(\"~/testDir\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // test parameters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        StorageManager.provideRoot(root);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        State s \u003d new State();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        Deck d \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        d.addNewCard(new FrontBackCard(\"front\", \"back\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        s.addDeck(d);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // create stubs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        StorageManager.writeDeck(d);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // store in root"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        Responses.EXPORT.call(\"export deck/ \" + deckName + \" path/ \" + path, s);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // test export"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//            assertEquals(d.toJson().toString(), FileReadWrite.read(exportPath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // check export valid"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(exportPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks/\" + deckName + \".json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        FileReadWrite.delete(root);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        // cleanup"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void exportNoPathTest() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        assertEquals(true, Responses.EXPORT_NO_PATH.call(\"export deck/ test\", new State()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    void exportNoDeckTest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//        assertEquals(true, Responses.EXPORT_NO_DECK.call(\"export\", new State()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 1,
      "shawnpunchew11": 122
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/stats/SessionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class SessionListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void createMultipleSessionsAndAddToArrayList_verifyNoStackOverflow() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e arrayListOfSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 5; i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            LocalDateTime start \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            LocalDateTime end \u003d LocalDateTime.of(2019, 10, 30, 23, 59);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            // expected output: new Session with specified start and end times, duration of 5 hours"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            Session session \u003d new Session(start, end);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            arrayListOfSessions.add(session);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionList \u003d new SessionList(arrayListOfSessions);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 24
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/stats/SessionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class SessionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void createSessionWithStartAndEnd_verifyNoStackOverflow() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(2019, 10, 30, 23, 59);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // expected output: new Session with specified start and end times, duration of 5 hours"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Session session \u003d new Session(start, end);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 17
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/stats/UserStatsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class UserStatsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void createUserStatsFromSessionList_verifyNoStackOverflow() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e arrayListOfSessions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 5; i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            LocalDateTime start \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            LocalDateTime end \u003d LocalDateTime.of(2019, 10, 30, 23, 59);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            // expected output: new Session with specified start and end times, duration of 5 hours"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            Session session \u003d new Session(start, end);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            arrayListOfSessions.add(session);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        UserStats userStats \u003d new UserStats();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionList \u003d new SessionList(arrayListOfSessions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        userStats.setSessionList(sessionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 27
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void readWriteDecksTest() throws DuplicateInChoicesException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FlashCard d1c1 \u003d new FrontBackCard(\"What year did NASA go to the moon?\", \"1969\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FlashCard d2c1 \u003d new MultipleChoiceCard("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"A baby puffin is called a what?\", \"1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Puffin\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Puffy\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Pofette\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Poofeen\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        )));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d1 \u003d new Deck(new ArrayList\u003c\u003e(Arrays.asList(d1c1)), \"deck1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d2 \u003d new Deck(new ArrayList\u003c\u003e(Arrays.asList(d2c1)), \"deck2\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create stubs"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.provideRoot(\"~\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeDeck(d1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeDeck(d2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // write decks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (Deck d : StorageManager.loadDecks()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            if (d.getDeckName() \u003d\u003d \"deck1\") {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(d1.toJson().toString(), d.toJson().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            } else if (d.getDeckName() \u003d\u003d \"deck2\") {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(d2.toJson().toString(), d.toJson().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // load decks and check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks/deck1.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks/deck2.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // delete files"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 2,
      "AHaliq": 49,
      "timothyleong97": 1,
      "huiminlim": 1
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/StateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class StateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //State s \u003d new State();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void getDeckIndex_validIndex_returnValidIndex() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //s.addDeck(new Deck());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 24
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/FrontBackCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class FrontBackCardTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void testEvaluate() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FrontBackCard card \u003d new FrontBackCard(\"asd\", \"123\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, card.evaluate(\"123\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(false, card.evaluate(\"abc\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 13,
      "huiminlim": 7
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/JavascriptCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JavascriptCardTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testEvaluate() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //JavascriptCard card \u003d new JavascriptCard(\"Echo 123\", \"123\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //assertEquals(true, card.evaluate(\"console.log(\u0027123\u0027);\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/MultipleChoiceCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.HIGH_PRIORITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Junit testing for MultipleChoiceCard class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class MultipleChoiceCardTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void createMultipleChoiceCard_duplicateChoice_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"xxx\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"zzz\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String front \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String back \u003d \"1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(DuplicateInChoicesException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new MultipleChoiceCard(front, back, choices, HIGH_PRIORITY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void createMultipleChoiceCard_invalidAnswer_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"xxx\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"zzz\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String front \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String back \u003d \"55\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new MultipleChoiceCard(front, back, choices, HIGH_PRIORITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void createMultipleChoiceCard_nonIntegerAnswer_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"xxx\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"zzz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String front \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String back \u003d \"five\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            new MultipleChoiceCard(front, back, choices, HIGH_PRIORITY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_correctChoice_sample() throws IndexNotFoundException, DuplicateInChoicesException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"1\", choices);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(card.getPriority());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "       //assertEquals(true, card.evaluate(\"hello\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_correctChoice_trueReturned() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(true, card.evaluate(\"hello\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_wrongChoice_falseReturned() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(false, card.evaluate(\"helo\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void editChoice_changeChoiceSuccessfully() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yoyo\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yolo\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"moin\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        card.editChoice(3, \"hello\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String answer \u003d card.getChoice(3);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(true, card.evaluate(answer));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void editChoice_indexInvalid_exceptionThrown() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yoyo\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yolo\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"moin\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(IndexNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            card.editChoice(-1, \"hello\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 145
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/DeepCopyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class DeepCopyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void duplicateCards() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Deck d \u003d new Deck();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        JavascriptCard js \u003d new JavascriptCard(\"front\", \"back\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        d.addNewCard(js);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Deck duplicate \u003d d.duplicateMyself();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        JavascriptCard dupJsCard \u003d (JavascriptCard) duplicate.getCards().get(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        dupJsCard.editFront(\"duplicate\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(js.getFront(), \"front\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 22
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/FileReadWriteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class FileReadWriteTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testResolve() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(FileReadWrite.resolve(System.getProperty(\"user.home\"), \"./Desktop/b\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                FileReadWrite.resolve(\"~/Desktop/a\", \"../b\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //assertEquals(System.getProperty(\"user.home\") + \"/Desktop/b\", FileReadWrite.resolve(\"~/Desktop/a\", \"../b\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testNormalize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"a\", FileReadWrite.normalizePath(\"a/b/c/../../\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testReadWriteFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(\"~/TESTFILE.txt\", \"abc123\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(\"abc123\", FileReadWrite.read(\"~/TESTFILE.txt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReadWrite.delete(\"~/TESTFILE.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 30,
      "huiminlim": 9
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/PrinterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class PrinterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testSurroundQuotes() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"\\\"asd\\\"\", Printer.surroundQuotes(\"asd\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testIndentString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"    asd\\n\", Printer.indentString(\"asd\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"    asd\\n    123\\n\", Printer.indentString(\"asd\\n123\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testRepeatChar() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"111\", Printer.repeatChar(3, \u00271\u0027));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"   \", Printer.repeatChar(3, \u0027 \u0027));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"\", Printer.repeatChar(0, \u0027 \u0027));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 25
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/FileImporterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class FileImporterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void readJsFile_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Path path \u003d Paths.get(\"./src/test/java/dream/fcard/util/code/testData.js\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader br \u003d FileImporter.readFile(path.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertNotNull(br);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 20
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/JavaRunnerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaRunnerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void compileAndRun() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d \"package dream.fcard.util.data;\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"public class Test {\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    public static void main(String[] args) {\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        System.out.println(\\\"Hello from JavaRunnerTest\\\");\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        File file \u003d new File(\"./src/test\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/java/dream/fcard/util/data/Test.java\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        fw.write(code);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        JavaRunner.compile(\"./src/test\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/java/dream/fcard/util/data/Test.java\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String result \u003d JavaRunner.runJava(\"./src/test\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/java/dream/fcard/util/data/Test.java\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(\"Hello from JavaRunnerTest\\n\", result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 33
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/JavascriptRunnerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavascriptRunnerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void evaluateFromFile_success() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String fileName \u003d \"testData.js\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d StorageManager.getCodePath(fileName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeCode(fileName, \"var x \u003d 5;\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String output \u003d JavascriptRunner.evaluateFromFile(path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(output, \"undefined\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(StorageManager.getCodePath(fileName));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // cleanup"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void evaluateString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d \"const x \u003d x \u003d\u003e x + 5; x(4);\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(\"9\", JavascriptRunner.evaluateString(code));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 14,
      "timothyleong97": 20
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/data/Test.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class Test {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        System.out.println(\"Hello from JavaRunnerTest\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 7
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/JsonParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void validParse() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"123\").getInt());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(3.14, JsonParser.parseJsonInput(\"3.14\").getDouble());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(true, JsonParser.parseJsonInput(\"true\").getBoolean());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(\"abc\", JsonParser.parseJsonInput(\"\\\"abc\\\"\").getString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"{\\\"num\\\": 123}\").getObject().get(\"num\").getInt());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"[123]\").getArray().get(0).getInt());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueException ev) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException ef) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 29
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/exceptions/JsonFormatExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonFormatExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void errorMessageTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"hi\\nabc\\n ^\\n(1:2)\\n\", new JsonFormatException(\"abc\".toCharArray(), 1, \"hi\").getMessage());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/jsontypes/JsonValueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonValueTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void validAccess() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(123, new JsonValue(123).getInt());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(3.14, new JsonValue(3.14).getDouble());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(true, new JsonValue(true).getBoolean());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(\"abc\", new JsonValue(\"abc\").getString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(obj, new JsonValue(obj).getObject());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(arr, new JsonValue(arr).getArray());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void invalidAccess() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonWrongValueException e \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonValue v \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (JsonValueTypes t1 : JsonValueTypes.values()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            switch (t1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case INT:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(123);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case DOUBLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(3.14);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case BOOLEAN:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(\"abc\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case OBJECT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(obj);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case ARRAY:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(arr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            for (JsonValueTypes t2 : JsonValueTypes.values()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (t1.equals(t2)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                switch (t2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case INT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getInt);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case DOUBLE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getDouble);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case BOOLEAN:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getBoolean);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case STRING:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case OBJECT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getObject);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case ARRAY:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getArray);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(\"Expecting \" + t2 + \", however got \" + t1, e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 87
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/stats/DateTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.util.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void calculateDuration_fiveHoursApart() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 10, 30, 23, 59);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.calculateDuration(time1, time2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void calculateDuration_fiveHoursApartAcrossDay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 10, 30, 19, 02);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 10, 31, 00, 02);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.calculateDuration(time1, time2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void calculateDuration_fiveHoursApartAcrossMonth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 10, 31, 19, 02);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 11, 1, 00, 02);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.calculateDuration(time1, time2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void calculateDuration_startBeforeEnd_returnNegativeResult() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 10, 30, 23, 59);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.calculateDuration(time1, time2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(-5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_fiveHoursApart() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofHours(5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"5 hours \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_fiveHoursApartInMinutes() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofMinutes(300);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"5 hours \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_fiveHoursTwelveMinutesApart() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofHours(5).plus(Duration.ofMinutes(12));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"5 hours 12 minutes \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_fiveHoursTwelveMinutesApartInMinutes() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofMinutes(312);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"5 hours 12 minutes \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_fiveHoursTwelveMinutesFortySecondsApart() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofHours(5).plus(Duration.ofMinutes(12))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                .plus(Duration.ofSeconds(40));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"5 hours 12 minutes 40 seconds\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_sevenMinutesNineSecondsApart() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofMinutes(7)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            .plus(Duration.ofSeconds(9));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"7 minutes 9 seconds\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDuration_twentyThreeSecondsApart() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration givenDuration \u003d Duration.ofSeconds(23);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDuration(givenDuration);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"23 seconds\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDateTime_testOne() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime givenDateTime \u003d LocalDateTime.of(2019, 10, 31, 11, 04);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDateTime(givenDateTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"31/10/19, 11:04 AM\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDateTime_testTwo() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime givenDateTime \u003d LocalDateTime.of(2019, 9, 8, 22, 47);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String returnedString \u003d DateTimeUtil.getStringFromDateTime(givenDateTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"8/9/19, 10:47 PM\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, returnedString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getStringFromDateTime_invalidDateTime_throwDateTimeException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertThrows(DateTimeException.class, () -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            LocalDateTime givenDateTime \u003d LocalDateTime.of(2019, 14, 8, 22, 47);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            String returnedString \u003d DateTimeUtil.getStringFromDateTime(givenDateTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            String expectedString \u003d \"8/9/19 10:47 PM\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getAverageDuration_testOne() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 10, 30, 18, 59);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 10, 30, 22, 59);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Session sessionOne \u003d new Session(time1, time2); // duration: 4 hours"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time3 \u003d LocalDateTime.of(2019, 10, 5, 17, 31);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time4 \u003d LocalDateTime.of(2019, 10, 5, 23, 31);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Session sessionTwo \u003d new Session(time3, time4); // duration: 6 hours"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionList.addSession(sessionOne);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionList.addSession(sessionTwo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.getAverageDuration(sessionList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(5); // expected: 5 hours"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getAverageDuration_testTwo() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionList \u003d new SessionList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 4, 25, 6, 23);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 4, 25, 19, 47);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Session sessionOne \u003d new Session(time1, time2); // duration: 13 hours 24 min"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time3 \u003d LocalDateTime.of(2019, 7, 8, 2, 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time4 \u003d LocalDateTime.of(2019, 7, 9, 4, 51);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Session sessionTwo \u003d new Session(time3, time4); // duration: 26 hours 49 min"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionList.addSession(sessionOne);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionList.addSession(sessionTwo);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration calculatedDuration \u003d DateTimeUtil.getAverageDuration(sessionList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Duration expectedDuration \u003d Duration.ofHours(20).plus(Duration.ofMinutes(6))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            .plus(Duration.ofSeconds(30));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // expected: 19.5 hours + 36.5 min \u003d 20 hours 6 min 30 sec"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDuration, calculatedDuration);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getLastWeekCutoffDate_testOne() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.of(2019, 11, 6, 9, 23);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime calculatedDateTime \u003d DateTimeUtil.getLastWeekCutoffDate(time);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2019, 10, 30, 0, 0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDateTime, calculatedDateTime);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getLastWeekCutoffDate_testTwo() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.of(2019, 11, 5, 0, 19);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime calculatedDateTime \u003d DateTimeUtil.getLastWeekCutoffDate(time);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2019, 10, 29, 0, 0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedDateTime, calculatedDateTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 212
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/stats/SessionListUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.util.stats;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.stats.SessionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class SessionListUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session sessionOne \u003d new Session("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 7, 23, 9, 15),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 7, 24, 0, 5)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session sessionTwo \u003d new Session("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 8, 15, 6, 7),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 8, 15, 8, 12)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session sessionThree \u003d new Session("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 11, 2, 10, 20),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 11, 2, 15, 6)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session sessionFour \u003d new Session("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 10, 30, 10, 20),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 11, 1, 3, 1)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Session sessionFive \u003d new Session("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 10, 29, 18, 29),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime.of(2019, 10, 30, 15, 6)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private SessionList getSessionListForTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionListForTest \u003d new SessionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionListForTest.addSession(sessionOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionListForTest.addSession(sessionTwo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionListForTest.addSession(sessionThree);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionListForTest.addSession(sessionFour);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        sessionListForTest.addSession(sessionFive);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return sessionListForTest;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getSublistAfterCutoff_testOne() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList sessionListForTest \u003d getSessionListForTest();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.of(2019, 11, 6, 9, 38);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        LocalDateTime cutoff \u003d DateTimeUtil.getLastWeekCutoffDate(now);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // expected: should get only sessionThree and sessionFour, but not sessionFive"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList obtainedList \u003d SessionListUtil.getSublistAfterCutoff(sessionListForTest, cutoff);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e obtainedArrayList \u003d obtainedList.getSessionArrayList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        SessionList expectedList \u003d new SessionList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        expectedList.addSession(sessionThree);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        expectedList.addSession(sessionFour);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cSession\u003e expectedArrayList \u003d expectedList.getSessionArrayList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedArrayList, obtainedArrayList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getScoreAsPercentage_testOne() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String score \u003d \"5/10\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"50\"; // 5/10 \u003d 1/2 \u003d 50%"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String obtainedString \u003d SessionListUtil.getScoreAsPercentage(score);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, obtainedString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getScoreAsPercentage_testTwo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String score \u003d \"3/15\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"20\"; // 3/15 \u003d 1/5 \u003d 20%"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String obtainedString \u003d SessionListUtil.getScoreAsPercentage(score);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, obtainedString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getScoreAsPercentage_testThree() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String score \u003d \"3/7\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"42.86\"; // 3/7 \u003d 0.42857..."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String obtainedString \u003d SessionListUtil.getScoreAsPercentage(score);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, obtainedString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    void getScoreAsPercentage_testFour() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String score \u003d \"17/23\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String expectedString \u003d \"73.91\"; // 17/23 \u003d 0.73913..."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String obtainedString \u003d SessionListUtil.getScoreAsPercentage(score);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        assertEquals(expectedString, obtainedString);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 106
    }
  }
]
