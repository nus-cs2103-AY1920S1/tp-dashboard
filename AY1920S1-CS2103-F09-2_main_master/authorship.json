[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103-F09-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103-F09-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "https://app.netlify.com/sites/flashcardpro/deploys[image:https://api.netlify.com/api/v1/badges/342bdfcd-063b-4527-b762-2139c38ba234/deploy-status[Netlify"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image:https://coveralls.io/repos/github/AY1920S1-CS2103-F09-2/addressbook-level3/badge.svg?branch\u003dmaster[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* FlashCard Pro is an application designed for students of all fields who prefer to use a desktop app for managing flashcards, as well as teachers who would like to provide resources (in the form of custom flashcard decks) to support their students’ learning."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Who is FlashCard Pro for?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Have you ever felt like there should be more kinds of flashcards you could create in order to learn different things? Like flashcards that require you to complete code snippets, or flashcards with multiple choice?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "FlashcardPro allows you to create these kinds of flashcards!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* FlashCard Pro created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 7,
      "huiminlim": 4,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "mainClassName \u003d \u0027dream.fcard.core.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    // https://mvnrepository.com/artifact/org.mozilla/rhino"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    compile group: \u0027org.mozilla\u0027, name: \u0027rhino\u0027, version: \u00271.7.11\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u0027site-name\u0027: \u0027Flash Card Pro\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F09-2/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 8,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro was developed by the https://github.com/AY1920S1-CS2103-F09-2/main[F09-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Lim Hui Min"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::huiminlim.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "{empty}[http://github.com/huiminlim[github]] [\u003c\u003chuiminlim#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Responsibilities: Team Lead, in charge of Flash Cards"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Leong Jia Hao, Timothy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::timothyleong97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "{empty}[http://github.com/timothyleong97[github]] [\u003c\u003ctimothyleong97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d\u003d Tan Yan Zhen, Natalie"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "image::nattanyz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "{empty}[http://github.com/nattanyz[github]] [\u003c\u003cnattanyz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "\u003d\u003d\u003d Abdul Haliq"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "image::ahaliq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "{empty}[https://github.com/ahaliq[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d Shawn Chew"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "image::shawnpunchew11.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "{empty}[https://github.com/shawnpunchew11[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "Responsibilities: TBC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "..."
      }
    ],
    "authorContributionMap": {
      "nattanyz": 4,
      "AHaliq": 4,
      "shawnpunchew11": 4,
      "PhireHandy": 1,
      "timothyleong97": 5,
      "huiminlim": 5,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *Email us* : You can also reach us at `huimin.lim [at] u.nus.edu`, `timothy.leong [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "By: `Team F09-2`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ArchitectureDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-gui,*`GUI`*\u003e\u003e: The GUI of the App."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-Responder,*`Responder`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* \u003c\u003cDesign-Util,*`Utilities`*\u003e\u003e: Shared resources of the App."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user \u003c\u003cTBC\u003e\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ArchitectureSequenceDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[Design-GUI]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d GUI component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::UiClassDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[Design-Responder]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Responder component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[[fig-ResponderClassDiagram]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".Structure of the Responder Component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ResponderClassDiagram.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::ModelClassDiagram_FlashCardPro.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/model[`Model`]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::cards_class_diagram.png[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".`FlashCard`,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* There are 3 types of cards used by our App, the `JavascriptCard`, `FrontBackCard` and `MultipleChoiceCard`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `JavascriptCard` and `FrontBackCard` implements from `FlashCard`, an interface class."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `MultipleChoiceCard` inherits from `FrontBackCard`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The interface class `FlashCard` also implements `JsonInterface` class to allow loading and saving to Json format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".FlashCard Priority"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Each FlashCard has an associated priority level, which the user can indicate his/her value of the importance of the card."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The priority levels are described below:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| Priority| Value| Intended Action"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| HIGH_PRIORITY| 10| Valued as important by user, should be tested more often"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| LOW_PRIORITY| 1| Valued, but less important by user, should be tested less often"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The sequence diagram below shows how the `ExamRunner` component can use the `createSubsetForTest()` method in the `Deck` and make use of the priorities associated with the `FlashCards` to create a test that emphasises the `FlashCards` that the user deems as important."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "image::flashcards_priority cards.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Constructor of `ExamRunner` is called."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* In the constructor of `ExamRunner`, a method call is made to `Deck` to create a subset of cards for test."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `Deck` processes the method call, responds as such:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If there are less than 10 cards in `Deck`, return all the cards."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** If there are more than 10 cards in `Deck`, return a set of cards with both `HIGH_PRIORITY` and `LOW_PRIORITY` cards, which the proportion is weighted at 60% to 40% ration respectively."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `Deck` returns the test set to `ExamRunner`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The current implementation has yet to handle the situation where `ExamRunner` creates a test set when there are no cards in Deck. This will be implemented before the next code release."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/logic/storage/StorageManager.java[`StorageManager.java`]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/util/json/JsonParser.java[`JsonParser.java`]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "*API* : link:{repoURL}/src/main/java/dream/fcard/util/FileReadWrite.java[`FileReadWrite.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface to save deck by calling `FileReadWrite`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface to load deck by calling `FileReadWrite`, send string to `JsonParser` and creating deck objects from `JsonValue`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The `JsonParser` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* takes any string of JSON format and returns a `JsonValue`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The `FileReadWrite` component,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* resolves root directory for app save data"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* interface for user to provide their custom root directory"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* writes file and creates path directories if none"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "[[Design-Util]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Code Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ".Structure of the Code component within Utilities"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::CodeClassDiagram.png[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The `Code` component supports code-running flashcards in Java and Javascript. Cards will take in user input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "via the JavaScript card (Java card to be implemented soon) and"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "the `JavascriptRunner` class"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* can evaluate JS code from a file using the `FileImporter` class"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* can evaluate JS code as an input string"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "the `JavaRunner` class"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Read/write to the `Solution.java` file during runtime after user has typed"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Java code into the file"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Compile and run `Solution.java`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* the Java code written in each card is stored in the card itself, but this `Solution.java` will be overwritten"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "and used to run the code in each card."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "To be implemented: An in-app Flashcard Pro compiler and debugger for JS and Java as a playground for the user"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Classes used by multiple components are in the `dream.fcard.datastructures` package and root of `dream.fcard.util`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "// tag::parsejson[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The parsing is done by `JsonParser`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "It takes a string and attempts to read it as one of a `JsonValueTypes` and create its corresponding object wrapped in `JsonValue`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Since Objects and Arrays can recursively contain a json value, their contents are also read, created and wrapped."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "* `JsonParser#parseJsonInput()` -- constructs the `JsonValue` object from a string input"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Given below is the overview activity diagram of parsing a json string input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "image::jsonParserProcessDynamicValue.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "It will first be tested to see if its an integer and if it fails it will be tested for a double."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Consequently, boolean, string, json object, json array."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Json object values are themselves json values thus the activity diagram is called recursively"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Likewise for json array values."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "If all parsing types fail, there must be an error with the string input, thus a JsonFormatException is thrown."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "The JsonParser is designed to be a utility class with a pure function without any mutation of state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "Thus it should be self contained within a single function call."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d [Proposed] Saving User Statistics feature"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How saving executes"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "The GUI of the application is started up by the `UiManager` class, when the application is initialised."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "The `GUI` class handles operations on the GUI, such as rendering nodes to the application window,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "and passing user command input to the `Responder` class."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d Timed/Untimed Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "The timed/untimed test is a exam mechanism facilitated by the `ExamRunner` class which extends from the `Exam` interface."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Given below is an example usage scenario and how the timed/untimed mechanism behaves at each step."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 1. User keys in the command `test \u003cduration\u003e \u003cdeck name\u003e` (Eg. test 120 German)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 2. If `\u003cduration\u003e` is 0, untimed test will be initiated. Else, a timed test will be initiated."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 3. User will be showed the card front, and prompted for a String answer."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "Step 4. Answer will be evaluated against the card back, and if it is correct, score will be updated."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "The following activity diagram displays the action flow of the test mechanism."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "image::ExamRunnerActivityDiagram.png[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: how the timed/untimed test mechanism works"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "* **Alternative 1:** Use forEach or while loops to iterate through the deck"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Pros: Ensures that the entire deck will be iterated through"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Cons: Limited control wihtin the loop"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "* **Alternative 2: (Current Choice)** Use a nextCard method that the GUI can trigger on click"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Pros: High amount of control as every individual card can be controlled."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "** Cons: More code for a relatively small function"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d Running a code flashcard"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ".Activity diagram for creating a code flashcard"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "image::JSCardActivityDiagram.png[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The code flashcard is a card that allows users to answer coding questions by running code directly."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "The  following use case illustrates how the card works."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* System: FlashCard Pro"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Actor: User"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* Use case: Create a code flashcard"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user initialises the card for the appropriate language (i.e. Java or JS)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user enters starter code if necessary (e.g boilerplate code, helper methods)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". The user enters test cases (specifying inputs and corresponding expected outputs)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". FlashCard Pro saves the newly created card."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*Extensions:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ". a) The user enters 0 test cases."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    .. 1) FlashCard Pro prompts for at least 1 test case."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    .. 2) The user enters a test case."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* wishes to learn new materials by retrieval learning and self-testing"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* is an independent learner"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* contents of learning are largely textual"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Value proposition*: allow effective reinforcement learning of textual content by answering using CLI input to a question prompt from a GUI"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| add a new deck| create a new topic collection of flash cards to test myself"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| add a new card to a deck| include a new question into the topic of the deck to test myself"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| save my deck of flash cards into my local drive| I can share it with my friends"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | user| load my deck of flash cards into the app| I can reuse the deck of cards created"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` | |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |user that takes flash card tests |select an option out of four that best matches the front of a flash card |I can check that I have understood the concept the flash card aims to impart"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |learner who wants to track his/her progress |view the questions I have not done well in| improve my understanding on these concepts tested"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |learner who wants to prioritise some test questions over others |set which questions are more important | be exposed to these important questions more in the tests"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* * *` |beginner user |access a help page |i can learn about the features at a glance"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* *` |student with subjects of different language mediums |add flashcards of differing languages  |I can customise my flashcards to the subject I am interested to do"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "|`* *` |user creating flash cards |save collections of thematically similar flash cards | I can share my cards easily to other users"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| view the list of flashcards in a deck| remember the material at the back of the flashcard"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| edit the front and/or back of the flashcard in a deck|"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| delete a flashcard from a deck|"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| view the decks of flashcards in my library| I know what are the decks available for my usage"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| intermediate learner| vary the amount of difficult questions in a test| expose myself to a test with varying difficult each time I test myself"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| expert learner with MCQ flashcard test| remove the choices given by the MCQ choices and enter the answers via CLI| test my understanding of the concept without a MCQ choice prompt"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| learner attempting MCQ questions| have randomised choices each time I try the test| I will not copy the choice from the previous test"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user| restore my library state of my previous session| continue using FlashCard Pro without much time wasted"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user attempting a test| view my score after the test|"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "| `* * *`| user who attempted a test| track my progress across mutliple test| monitor my attempts and correctness"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(For all use cases below, the *System* is the `FlashCard Pro` and the *Actor* is the `learner`, unless specified otherwise)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Create a deck of cards"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner creates a new empty deck and specifies the name of the deck of cards."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. Learner adds individual cards to the deck and specifies the content of the front and back of the cards."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. FlashCard Pro detects deck name provided by learner is identical to an existing deck of cards in the library."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. FlashCard Pro informs the learner that deck creation is unsuccessful."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. Learner creates a new deck with another unique deck name."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Use case resumes from step 2."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2a. FlashCard Pro detects no front and/or back content specified by the learner."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a1. FlashCard Pro informs the learner that card creation is unsuccessful."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a2. Learner creates a new card with the correct front and/or back content."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** Steps 2a1-2a2 are repeated until the format of the command entered is correct."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(Was wondering if FlashCard Pro should create the deck, but with a numbering like untitled_1, untitled_2 etc)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Start a untimed test"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner starts untimed test with a deck of cards by specifying deck name."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. FlashCard Pro begins test."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. FlashCard Pro flashes text on the front of a flash card to learner."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. FlashCard Pro waits for learner\u0027s answer."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. Learner enters answer."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. FlashCard Pro matches answer with text on back of flash card."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. FlashCard Pro informs learner about correctness of the learner\u0027s answer."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8. FlashCard Pro displays the correct answer, the text on the back of the flash card."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 3-8 are repeated until all the flash cards in the deck are completed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Import an existing deck of cards from a JSON file"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. Learner specifies the filepath of the deck of cards to import, in a JSON file format."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. FlashCard Pro loads the file in the filepath."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. FlashCard Pro parses the fields in the JSON file."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. FlashCard Pro constructs the deck of cards."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. FlashCard Pro stores the deck of cards in the library."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2a. FlashCard Pro detects filepath is invalid."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2a1. FlashCard Pro informs the learner that import of deck of cards is unsuccessful."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 2b. FlashCard Pro detects that filepath does not lead to a JSON file."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 2b1. FlashCard Pro informs the learner that import of deck of cards is unsuccessful."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Running a test using Front Back Cards"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test with a deck of card and supplies deck name."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System obtains the deck of cards."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System shows front of card to user, waits for answer."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. User enters the answer."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. System evaluates the answer."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System reports the correctness of the answer."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8. System moves to next card."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Step 4-8 repeated until there are no cards in the deck remaining."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a deck of cards"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to create a deck."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System creates a new deck."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. User enters command to create a new card in the deck."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System creates a card."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System stores the card in the deck."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 2-5 repeats as long as the user wants to add a card."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Untimed Test with a deck of Multiple Choice Cards"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test on a deck."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(System creates a test subset)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System gets the deck the user wants to test on."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System randomises the choice ordering."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System displays the front of card and choices."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. User enters the choice of correct answer."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System evaluates the answer."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8  System shows the correctness of the answer."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "9. System moves to next card."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 4-9 are repeated until there are no more cards in the test set."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 6a. User enters an invalid choice."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a1. System checks if choice is valid."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a2. System tells User that choice entered is invalid."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a3. System requests User to enter another choice."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 6a1-6a3 repeats until the User enters a valid choice."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Timed Test with a deck of Multiple Choice Cards"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to start test on a deck."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "(System creates a test subset)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System gets the deck the user wants to test on."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System starts test session."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "4. System randomises the choice ordering."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "5. System displays the front of card and choices."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "6. User enters the choice of correct answer."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "7. System evaluates the answer."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "8  System shows the correctness of the answer."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "9. System moves to next card."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 4-9 are repeated until there are no more cards in the test set."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. System does not find a deck with the deck name specified by the user"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System tells user that there is no deck with specified name."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System exits test creation."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1b. System has no decks in library."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b1. System tells user that there are no decks in the library."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1b2. System exits test creation."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 6a. User enters an invalid choice."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a1. System checks if choice is valid."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a2. System tells User that choice entered is invalid."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Steps 6a1-6a3 repeats 3 times."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a4. User enters invalid choice for 4th time."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a5. System receives invalid choice for 4th time."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a6. System terminates test."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 6a7. System tells User that test has terminated due to incorrect inputs."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a Multiple Choice Card"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "1. User enters command to create a MCQ Card to a deck."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "2. System starts MCQ Card creation."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "3. System stores MCQ card in deck."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* 1a. User enters duplicated choices."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a1. System detects duplicated choices in choices provided by user."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a2. System tells User that there are duplicates in chocies provided."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "** 1a3. System ends card creation."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "+"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".  Should handle text input of english alphabets."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nattanyz": 5,
      "AHaliq": 29,
      "shawnpunchew11": 30,
      "timothyleong97": 48,
      "huiminlim": 298,
      "-": 273
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d FlashCard Pro - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "By: `Team F09-02`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro is an application designed for students of all fields who prefer to use a desktop app for managing flashcards, as well as teachers who would like to provide resources (in the form of custom flashcard decks) to support their students’ learning."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FlashCard Pro is optimised for users who are comfortable with Command Line Interface-based interaction, allowing them to work more efficiently than with traditional Graphical User Interface (GUI)-based flashcard apps, while still being able to use their flashcards in a familiar GUI format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d Flashcards"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "What is a flashcard? Flashcards are containers for information. Each card has a “front” and a “back”. Although FlashCard Pro is agnostic in its implementation, one recommended use case is such: the user stores a question on the “front” of the card and the answer on the “back”."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "After sets of flashcards (known as “decks”) have been created, the user may interact with the flashcards in various ways. For example, FlashCard Pro can be configured to show the “front” of the card, prompting the user to enter their guess for what is on the “back” of the card. The user’s attempt is gauged “correct” if it matches the definition of the card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "As with physical flashcards, the flashcards in FlashCard Pro can be shuffled, used in reverse, mixed between decks, etc. Unlike physical flashcards, flashcards in FlashCard Pro are dynamic, offering a range of possibilities from traditional memorisation-type uses to support for learning programming. For example, teachers may define basic coding problems which their students can attempt to answer. FlashCard Pro will evaluate the output of the student’s solution, allowing students to gauge their own coding knowledge, and teachers to evaluate their students’ progress."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ".  Download the latest `flashcardpro.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Commands are case-sensitive."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Show help page for commands available : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Shows the help page and guides you through the available commands for FlashCard Pro. You can also choose a specific command to look up how to use it"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `help [command/COMMAND_NAME]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Shows all the available commands and syntax in the application if user supplied no parameters except command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Shows the specific command syntax if the command is specified in the optional parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* All commands that are available, except for help, can be queried, and other non-valid commands will give a “command not found” message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the commands available for FlashCard Pro"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `help command/view`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the syntax to use command `view`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Importing flashcards from disk : `import`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Adds a deck of flashcards from a JSON file path to FlashCard Pro\u0027s library"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `import filepath/FILE_NAME`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Exporting flashcards to disk: `export`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Saves the deck of flashcards to a JSON file in the specified file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `export deck/DECK_NAME FILE_NAME`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "You can share the deck of cards in the JSON file saved to another user to use in FlashCard Pro via the `import` function."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* example"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Viewing user statistics : `stats`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Shows your usage statistics, such as time spent and usage count in general of for a deck of cards in a graphical format (i.e. pie charts, bar graphs etc)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `stats [deck/DECK_NAME]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `stats`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays the overview of the time spent and usage count of all decks of cards."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `stats deck/science_deck`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Display the overview of time spend and usage count of the deck of cards, `science_deck`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Viewing flashcards in library: `view`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "View the flashcard decks or the individual flashcards in a specific deck"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `view [deck/DECK_NAME]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `view`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays all the decks of cards in the library"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `view deck/science_deck`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Displays all the cards in the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Creating new flashcards : `create`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Create a new deck of flashcards"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `create deck/DECK_NAME`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Start test with flashcards : `test`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a test with a deck of flashcards, with the choice of a timed or untimed test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Starts the test and the timer for the specified duration `TIME_LIMIT_ALLOWED`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The duration TIME_LIMIT_ALLOWED refers to the time allowed for the test. The test will proceed with a countdown until the time hits 00:00."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The duration must be a positive integer in minutes e.g. 1, 2, 3, …"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `test [duration/TIME_LIMIT_ALLOWED] deck/DECK_NAME`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `test deck/science_deck`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a untimed test with the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `test duration/50 deck/science_deck`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Starts a timed test with the deck of cards, `science_deck`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Quit test or flashcard creation : `exit`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Exits the test or flashcard creation process"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d\u003d\u003d Editing the cards of an existing deck of flashcards : `edit`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "The edit command allows the user to change, add or remove the flashcards in any existing deck."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* You can select the following options depending on your choice of action for `action`: `add`, `change`, `remove`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* For options `remove`, you must furnish the options `index`, which corresponds to the index of the flashcard, and any input to `front` and `back` will be ignored"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* For options `edit`, you must furnish the options `index` (compulsory), as well as `front` and/or `back` depending on the change, and any command that lacks any of the three options will be regarded as an error and no flashcard wil be added"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* The `index` option must be a positive integer e.g. 1, 2, 3, … and must be less than or equal to the total number of cards in the specified deck"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* Any command with no input to `front`, `back` and `index` will be regarded as an error and no action will be taken"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Format: `edit deck/DECK_NAME action/DESIRED_ACTION [index/CARD_INDEX] [front/NEW_FRONT_TEXT] [back/NEW_BACK_TEXT]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `edit deck/science_deck`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Returns error as no input is added"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* `edit deck/science_deck action/edit index/1 front/what is a cell back/a cell is a building block`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "Edits the first flashcard of the deck `science_deck`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *help* `help [command/COMMAND_NAME]` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `help command/view`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *import* : `import filepath/FILE_NAME`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *export* : `export deck/DECK_NAME FILE_NAME`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *stats* : `stats [deck/DECK_NAME]` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `stats deck/science_deck`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *view* : `view [deck/DECK_NAME]` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `view deck/science_deck`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *create* : `create deck/DECK_NAME`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *test* : `test [duration/TIME_LIMIT_ALLOWED] deck/DECK_NAME` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `test deck/science_deck`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *exit* : `exit`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "* *edit* : `edit deck/DECK_NAME action/DESIRED_ACTION [index/CARD_INDEX] [front/NEW_FRONT_TEXT] [back/NEW_BACK_TEXT]` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "e.g. `edit deck/science_deck action/edit index/1 front/what is a cell back/a cell is a building block`"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 108,
      "-": 99
    }
  },
  {
    "path": "docs/diagrams/CodeClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package Code {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package Data {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "Class Solution"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class FileImporter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaRunner"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaScriptRunner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "JavaRunner ..\u003e Solution :\u003e externally runs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "JavaScriptRunner ..\u003e FileImporter :\u003e reads JS files with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 23
    }
  },
  {
    "path": "docs/diagrams/JSCardActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "(*) --\u003e \"Initialization\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "if \"User provides starter code\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  --\u003e[true] \"Type starter code\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  -right-\u003e \"Enter test cases and expected output\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "else"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "  -\u003e[false] \"Enter test cases and expected output\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "--\u003e[Ending process] (*)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 11
    }
  },
  {
    "path": "docs/team/huiminlim.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "\u003d Lim Hui Min - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/nattanyz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d Tan Yan Zhen, Natalie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 72
    }
  },
  {
    "path": "docs/team/timothyleong97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d Leong Jia Hao, Timothy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 72
    }
  },
  {
    "path": "src/main/java/dream/fcard/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/dream/fcard/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.Gui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // initialise the State of the application"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        State applicationState \u003d new State(StorageManager.loadDecks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // initialise UI of application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Gui.setApplicationState(applicationState);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Gui.start(primaryStage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 8,
      "timothyleong97": 7,
      "huiminlim": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 2,
      "huiminlim": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashcardpro.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 3,
      "-": 109
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final String MESSAGE_INVALID_MULTIPLE_CHOICE_CARD_INPUT \u003d \"Invalid Multiple Choice Option!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 18,
      "-": 95
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 1,
      "huiminlim": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 4,
      "-": 139
    }
  },
  {
    "path": "src/main/java/dream/fcard/core/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.core.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 3,
      "huiminlim": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/Gui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.core.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.CommandBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.CommandTextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.DeckListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.FlashCardDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.ScrollablePane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.StatusBar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.TitleBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Manages the GUI of the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Handles rendering of objects in GUI. Passes user command input to Responder."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Only one instance can exist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class Gui {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // the one and only instance of Gui allowed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Gui gui \u003d new Gui(); // no need for getter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static State applicationState;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Gui.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Stage applicationPrimaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // containers for UI components"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static VBox window \u003d new VBox();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static TitleBar titleBar \u003d new TitleBar();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static ScrollablePane scrollablePane \u003d new ScrollablePane();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static CommandBar commandBar \u003d new CommandBar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static CommandTextField commandTextField \u003d new CommandTextField();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static StatusBar statusBar \u003d new StatusBar();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Gui() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // empty constructor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Sets the applicationState attribute to the current State of the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Allows the GUI to pass State to its command text field."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param state The state of the application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setApplicationState(State state) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationState \u003d state;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Starts the application\u0027s GUI."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param primaryStage The window of the application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set the application primary stage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set the application icon"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        primaryStage.getIcons().add(getImage(GuiSettings.getApplicationIcon()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            Gui.onStartup();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            Gui.testUiComponents();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            //showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Temporary method for testing display of various UI components."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static void testUiComponents() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // Methods related to setting up GUI components upon application startup"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Initialises components of the main window and shows the main window upon startup."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static void onStartup() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        initializeStage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up initial UI components"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        setupCommandTextField();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        setTitle(\"Welcome!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        showStatus(\"No command entered yet...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add UI components to scene"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        setupScene();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // finally, display main window"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage.show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Initialises the stage by setting its size and title."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static void initializeStage() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage.setTitle(\"FlashCard Pro\"); // set title of application window"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage.setMinHeight(GuiSettings.getMinHeight());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage.setMinWidth(GuiSettings.getMinWidth());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Set up the command text field with the given state and add to its placeholder."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static void setupCommandTextField() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        commandTextField.setState(applicationState);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        commandBar.setCommandTextField(commandTextField);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Add the UI components to main window, and display the scene."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static void setupScene() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add children to window"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        window.getChildren().addAll(titleBar, scrollablePane, commandBar,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            statusBar);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // display window"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Scene scene \u003d new Scene(window, 400, 400);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        applicationPrimaryStage.setScene(scene);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Sets the title in the title bar of the application window."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Useful when the application changes state, e.g. displaying a different deck."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param title The title to be set in the title bar."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setTitle(String title) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        titleBar.setText(title);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Shows a given status in the status bar of the application window."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Useful for providing feedback to the user, e.g. when a command is entered."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param status The status to be shown in the status bar."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void showStatus(String status) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        statusBar.setText(status);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Shows a given error in the status bar of the application window."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Useful for informing the user when an error has occurred, e.g. when they enter an"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * unrecognised command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param errorMessage The error message to be shown in the status bar."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void showError(String errorMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        statusBar.setErrorMessage(errorMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Renders the front of the given FlashCard in the GUI."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard The FlashCard to be rendered."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void renderFront(FlashCard flashCard) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FlashCardDisplay node \u003d GuiHelper.renderFront(flashCard);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // display the Node in the Gui"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        displayInScrollablePane(node);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Renders the back of the given FlashCard in the GUI."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard The FlashCard to be rendered."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void renderBack(FlashCard flashCard) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FlashCardDisplay node \u003d GuiHelper.renderBack(flashCard);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // display the Node in the Gui"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        displayInScrollablePane(node);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Renders a deck of FlashCards in the GUI."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param deck The deck of FlashCards to be rendered."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void renderDeck(Deck deck) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        setTitle(deck.getName());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        DeckListView node \u003d GuiHelper.renderDeck(deck);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // display the Node in the Gui"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        replaceInScrollablePane(node);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Renders the statistics of the user in the GUI."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Takes in a Statistics object as parameter."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void renderStats() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // can only be done when Statistics class is implemented"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        setTitle(\"Your Stats\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Displays a given Node in the scrollable pane of the GUI."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param node The Node to be displayed in the scrollable pane of the GUI."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void displayInScrollablePane(Node node) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // show the Node in the display area"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        scrollablePane.add(node);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Replaces all Nodes currently in the scrollable pane of the GUI with the current Node."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param node The Node to be displayed in the scrollable pane of the GUI."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void replaceInScrollablePane(Node node) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        scrollablePane.replace(node);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 230
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/GuiHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.DeckListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.FlashCardCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.components.FlashCardDisplay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Handles logic for displaying objects in the GUI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class GuiHelper {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Generates a FlashCardDisplay object corresponding to the front of the flashCard to be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * displayed in the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard The FlashCard to be rendered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The FlashCardDisplay object to be displayed in the GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static FlashCardDisplay renderFront(FlashCard flashCard) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // get text to be rendered"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        StringBuilder cardText \u003d new StringBuilder(flashCard.getFront());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // if flashCard is a MultipleChoiceCard, show its choices too"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (flashCard.hasChoices()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            MultipleChoiceCard multipleChoiceCard \u003d (MultipleChoiceCard) flashCard;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            ArrayList\u003cString\u003e listOfChoices \u003d multipleChoiceCard.getListOfChoices();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            for (String choice : listOfChoices) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                cardText.append(i).append(\" \").append(choice);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // generate FlashCardDisplay containing text to be rendered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new FlashCardDisplay(cardText.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Generates a FlashCardDisplay object corresponding to the back of the flashCard to be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * displayed in the GUI."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard The FlashCard to be rendered."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The FlashCardDisplay object to be displayed in the GUI."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static FlashCardDisplay renderBack(FlashCard flashCard) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // get text to be rendered"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String cardText \u003d flashCard.getBack();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // generate FlashCardDisplay containing text to be rendered"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new FlashCardDisplay(cardText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Generates a DeckListView object containing FlashCardCells which correspond to each"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * FlashCard in the deck, to be displayed in the GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param deck The Deck to be rendered."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The DeckListView object to be displayed in the GUI."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static DeckListView renderDeck(Deck deck) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new DeckListView(deck);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Generates an ObservableList of FlashCardCells, given a Deck of FlashCards."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param deck The Deck to generate an ObservableList from."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return An ObservableList of FlashCardCells representing each flashcard in the deck."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static ObservableList\u003cFlashCardCell\u003e toFlashCardCellList(Deck deck) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ObservableList\u003cFlashCardCell\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        int i \u003d 1; // index of the card in the list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        for (FlashCard card : deck.getCards()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            FlashCardCell cell \u003d toFlashCardCell(card, i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            list.add(cell);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Generates a FlashCardCell object representing the given FlashCard, to be displayed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * in a list in the GUI."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard The FlashCard to be displayed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @return The FlashCardCell object to be displayed in the GUI."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static FlashCardCell toFlashCardCell(FlashCard flashCard, int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return new FlashCardCell(flashCard, index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 94
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Class containing information pertaining to sizing, colours and font styles of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Unless specified otherwise, the default sizing, colours and font styles are used."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Default sizing, colours and font styles can be overwritten using the setter methods provided."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Getters are used when generating UI components that match the prescribed styles."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class GuiSettings {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // the one and only instance of GuiSettings allowed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // application icon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static final String APPLICATION_ICON \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // default sizing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double padding \u003d 20; // padding around elements"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double spacing \u003d 10; // spacing between elements laid sequentially"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double minHeight \u003d 400;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double minWidth \u003d 400;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double radius \u003d 5;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // default colours"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String primaryTextColour \u003d \"#333333\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String errorTextColour \u003d \"#F74D68\"; // pinkish red accent colour used for errors"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String primaryUiColour \u003d \"#ABDFF6\"; // blue accent colour used for flashcards"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String secondaryUiColour \u003d \"#F0ECEB\"; // light grey used for title bar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String tertiaryUiColour \u003d \"#6C7476\"; // dark grey used for command box bg"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static String backgroundColour \u003d \"#FFFFFF\"; // white used for app background"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // default font styles"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: embed fonts in JAR file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font titleTextStyle \u003d Font.font(\"Montserrat\", FontWeight.BOLD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.ITALIC, 36);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font flashCardTextStyle \u003d Font.font(\"Montserrat\", FontWeight.NORMAL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.REGULAR, 18);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font commandTextStyle \u003d Font.font(\"Montserrat\", FontWeight.LIGHT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.REGULAR, 16);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font statusTextStyle \u003d Font.font(\"Montserrat\", FontWeight.LIGHT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.REGULAR, 12);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font subtitleTextStyle \u003d Font.font(\"Montserrat\", FontWeight.LIGHT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.REGULAR, 18);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static Font deckTitleTextStyle \u003d Font.font(\"Montserrat\", FontWeight.BOLD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FontPosture.REGULAR, 16);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // private constructor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private GuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // empty constructor body"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Accessor for the GuiSettings instance */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static GuiSettings getInstance() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        if (guiSettings \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Return the path to the application icon. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getApplicationIcon() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return APPLICATION_ICON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the default global padding of the application. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static double getPadding() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return padding;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the default global padding of the application. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setPadding(double padding) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.padding \u003d padding;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the default global spacing of the application. */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static double getSpacing() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return spacing;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the default global spacing of the application. */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setSpacing(double spacing) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.spacing \u003d spacing;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the default minimum height of the application window. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static double getMinHeight() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return minHeight;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the default minimum height of the application window. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setMinHeight(double minHeight) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.minHeight \u003d minHeight;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the default minimum width of the application window. */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static double getMinWidth() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return minWidth;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the default minimum width of the application window. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setMinWidth(double minWidth) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.minWidth \u003d minWidth;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the default background radius for UI components in the application. */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static double getRadius() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return radius;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the default background radius for UI components in the application. */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setRadius(double radius) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.radius \u003d radius;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the primary text colour of the application. */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getPrimaryTextColour() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return primaryTextColour;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the primary text colour of the application. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setPrimaryTextColour(String primaryTextColour) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.primaryTextColour \u003d primaryTextColour;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the error text colour of the application. */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getErrorTextColour() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return errorTextColour;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the error text colour of the application. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setErrorTextColour(String errorTextColour) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.errorTextColour \u003d errorTextColour;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the primary UI colour of the application. */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getPrimaryUiColour() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return primaryUiColour;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the primary UI colour of the application. */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setPrimaryUiColour(String primaryUiColour) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.primaryUiColour \u003d primaryUiColour;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the secondary UI colour of the application. */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getSecondaryUiColour() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return secondaryUiColour;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the secondary UI colour of the application. */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setSecondaryUiColour(String secondaryUiColour) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.secondaryUiColour \u003d secondaryUiColour;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the tertiary UI colour of the application. */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getTertiaryUiColour() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return tertiaryUiColour;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the tertiary UI colour of the application. */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setTertiaryUiColour(String tertiaryUiColour) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.tertiaryUiColour \u003d tertiaryUiColour;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the background colour of the application. */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static String getBackgroundColour() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return backgroundColour;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the background colour of the application. */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setBackgroundColour(String backgroundColour) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.backgroundColour \u003d backgroundColour;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the title text style of the application. */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getTitleTextStyle() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return titleTextStyle;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the title text style of the application. */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setTitleText(Font titleTextStyle) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.titleTextStyle \u003d titleTextStyle;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the flashcard text style of the application. */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getFlashCardTextStyle() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return flashCardTextStyle;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the flashcard text style of the application. */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setFlashCardTextStyle(Font flashCardTextStyle) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.flashCardTextStyle \u003d flashCardTextStyle;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the command text style of the application. */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getCommandTextStyle() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return commandTextStyle;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the command text style of the application. */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setCommandTextStyle(Font commandTextStyle) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.commandTextStyle \u003d commandTextStyle;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the status text style of the application. */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getStatusTextStyle() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return statusTextStyle;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the status text style of the application. */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setStatusTextStyle(Font statusTextStyle) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.statusTextStyle \u003d statusTextStyle;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the subtitle text style of the application. */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getSubtitleTextStyle() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return subtitleTextStyle;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the subtitle text style of the application. */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setSubtitleTextStyle(Font subtitleTextStyle) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.subtitleTextStyle \u003d subtitleTextStyle;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Get the deck title text style of the application. */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static Font getDeckTitleTextStyle() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        return deckTitleTextStyle;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Set the deck title text style of the application. */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void setDeckTitleTextStyle(Font deckTitleTextStyle) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        GuiSettings.deckTitleTextStyle \u003d deckTitleTextStyle;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 239
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/CommandBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing the placeholder for the command text field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class CommandBar extends VBox implements UiComponent\u003cVBox\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of CommandBar."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public CommandBar() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up height"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up padding"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPadding(new Insets(GuiSettings.getPadding()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set background colour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setStyle(\"-fx-background-color:\" + GuiSettings.getTertiaryUiColour() + \";\"); // temporary"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: abstract into UI component setBackgroundColour(String colour) method"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.setStyle(\"-fx-background-color:#FFFFFF;\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void add(Node node) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().add(node);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setCommandTextField(CommandTextField commandTextField) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.add(commandTextField);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 38
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/CommandTextField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.logic.respond.Responder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing the text field for user to enter commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class CommandTextField extends TextField implements UiComponent\u003cTextField\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private State state;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of CommandTextField."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public CommandTextField() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create text field"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add prompt text"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPromptText(\"Enter command here...\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // setup styles of commandTextField"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: fix text field background colour :("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.setStyle(\"-fx-border-color:\" + GuiSettings.getTertiaryUiColour() + \";\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.setStyle(\"-fx-control-inner-background:\" + GuiSettings.getTertiaryUiColour() + \";\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.setStyle(\"-fx-text-fill:#FFFFFF;\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setStyle(\"-fx-text-fill:\" + GuiSettings.getPrimaryTextColour() + \";\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setFont(GuiSettings.getCommandTextStyle());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                Responder.takeInput(this.getText(), this.state);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                // reset text field"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                this.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                // todo: temporary haxx, don\u0027t know what exceptions yet"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: add some way to modify commandTextField\u0027s appearance when command fails"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setState(State applicationState) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.state \u003d applicationState;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 49
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/DeckListView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing a list of flashcards in a deck."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class DeckListView extends VBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: attempt to implement using ListView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private ObservableList\u003cFlashCardCell\u003e listOfCardsInDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of DeckListView representing the given deck."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param deck The Deck of FlashCards to be displayed in the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public DeckListView(Deck deck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super(GuiSettings.getSpacing());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        listOfCardsInDeck \u003d GuiHelper.toFlashCardCellList(deck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().setAll(listOfCardsInDeck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: need to setCellFactory? (but cells are already created...)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 29
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/FlashCardCell.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing the row taken up by an individual flashcard when displayed in a list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class FlashCardCell extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Text cardIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private FlashCardDisplay flashCardDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of FlashCardCell to display the given cell."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param flashCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public FlashCardCell(FlashCard flashCard, int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create a HBox with the desired spacing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super(GuiSettings.getSpacing());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPadding(new Insets(GuiSettings.getPadding()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: show the index to the left of the card, rather than above it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cardIndex \u003d new Text(String.valueOf(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // temporarily, show only the front of the flashcard"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: show both front and back of flashcard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //@@author:huiminlim"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Put here temporary to tide over"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        builder.append(\"Front: \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        builder.append(flashCard.getFront());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        builder.append(\"Back: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        builder.append(flashCard.getBack());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //@author"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        flashCardDisplay \u003d new FlashCardDisplay(builder.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // let flashCardDisplay take up the maximum horizontal space in the row"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //HBox.setHgrow(flashCardDisplay, Priority.ALWAYS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // add both elements to the FlashCardCell"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.getChildren().addAll(cardIndex, flashCardDisplay);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 32,
      "huiminlim": 21
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/FlashCardDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing an individual FlashCard to be displayed in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class FlashCardDisplay extends HBox implements UiComponent\u003cHBox\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double maxWidth \u003d GuiSettings.getMinWidth() - 2 * GuiSettings.getPadding();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private static double textMaxWidth \u003d GuiSettings.getMinWidth() - 4 * GuiSettings.getPadding();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private Text flashCardText;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of FlashCardDisplay with the given text."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param text Text to be displayed in the FlashCardDisplay."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public FlashCardDisplay(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up dimensions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPrefHeight(180);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setMaxWidth(maxWidth);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPadding(new Insets(GuiSettings.getPadding()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up background colour and radius"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setStyle(\"-fx-background-color:\" + GuiSettings.getPrimaryUiColour() + \";\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        //this.setStyle(\"-fx-background-radius:\" + GuiSettings.getRadius() +\";\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        flashCardText \u003d new Text(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // style flashCardText"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        flashCardText.setFont(GuiSettings.getFlashCardTextStyle());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        flashCardText.setFill(Color.web(GuiSettings.getPrimaryTextColour()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        flashCardText.setWrappingWidth(this.getWidth());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        TextFlow textFlow \u003d new TextFlow(flashCardText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        textFlow.setMaxWidth(textMaxWidth);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add flashCardText to card"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().add(textFlow);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo: add constructor with two arguments (front and back)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 52
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JavaEditorApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Application controlling a Java editor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaEditorApplication extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JavaEditor.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder Java\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate Java code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic class code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"package dream.fcard.util.code.data;\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/**\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \" * Do not change the class name!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \" */\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"public class Main {\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    public static void main(String[] args) {\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        System.out.println(\\\"Hello world\\\");\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 52
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JavaEditorController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavaRunner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The controller for the Java Editor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaEditorController extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String filepath \u003d \"./src/main/java/dream/fcard/util/code/data/Main.java\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in Java and returns the output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FileReadWrite.write(filepath, code);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String result \u003d JavaRunner.compileAndRun(filepath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 37
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JsEditorApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The application for the JavaScript Editor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsEditorApplication extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JsEditor.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder JS\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate JavaScript code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic class code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"//use print() to print text\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 41
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JsEditorController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavascriptRunner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The application for the JavaScript Editor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsEditorController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in Java and returns the output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String result \u003d JavascriptRunner.evaluateString(code);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 32
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JsTestEvaluator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.JsTestCaseRunner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Controller for the pop up window that connects to a JS card. It will send the result of the user\u0027s attempt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * back to the evaluate function."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestEvaluator {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea textEditor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Button runCodeButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private TextArea consoleOutput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e\u003e returnCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JsTestCaseRunner runner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the code in the text editor in JavaScript and returns the output."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if code cannot be compiled."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void runCode() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d textEditor.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        runner \u003d new JsTestCaseRunner(code, card.getBack());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        returnCode.accept(runner.testCode()); // send results back to the card"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleOutput.setText(runner.getConsoleDisplay());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCodeReturner(Consumer\u003cPair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e\u003e returnResult) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.returnCode \u003d returnResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void setCard(JavascriptCard c) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 46
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JsTestRunnerApplication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.core.Main;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * The application window for the popup window that connects to a Javascript Card."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestRunnerApplication extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e\u003e sendResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestRunnerApplication(Consumer\u003cPair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e\u003e sendResult, JavascriptCard c) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.sendResult \u003d sendResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d c;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            FXMLLoader fxmlloader \u003d new FXMLLoader(Main.class.getResource(\"/view/Windows/JsTestEvaluator.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            AnchorPane ap \u003d fxmlloader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.setTitle(\"FlashCoder JS\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            TextArea textArea \u003d (TextArea) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            textArea.setText(boilerPlate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ap.getChildren().get(2).requestFocus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            JsTestEvaluator e \u003d ((JsTestEvaluator) fxmlloader.getController());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.setCodeReturner(sendResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.setCard(card);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * The boilerplate JavaScript code for the user when the editor is first loaded."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return basic code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String boilerPlate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return \"//use print() to print text\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 60
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/JsTestingSuite.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * A coordinator to take in a card, and start a popup window to test the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestingSuite {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private JavascriptCard card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Application jsEditor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private Consumer\u003cPair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e\u003e getResult \u003d r -\u003e receiveResult(r);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestingSuite(JavascriptCard card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Opens the popup window."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private void startCoding() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        final Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        stage.setTitle(\"Js Quiz Code Editor\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsEditor \u003d new JsTestRunnerApplication(getResult, card);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            jsEditor.start(stage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Once the user has run code, this method will trigger and receive the results."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param result the number of test cases, and how many are correct or wrong."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return a boolean denoting whether the user got the question completely correct or not."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean receiveResult(Pair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e result) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //Need to wire this up to Shawn\u0027s waiting ans function and need to add a popup button on the card render"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (result.fst().equals(result.snd().fst())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 52
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/ScrollablePane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component containing all content in the application window, excluding the title bar and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * command text field."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class ScrollablePane extends ScrollPane implements UiComponent\u003cScrollPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    private VBox paneContents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of ScrollablePane. Called when MainWindow initialises its components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public ScrollablePane() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        VBox.setVgrow(this, Priority.ALWAYS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set scrollable pane background colour, just in case"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setStyle(\"-fx-background-color:\" + GuiSettings.getBackgroundColour() + \";\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create container for all contents in the scrollable window"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.paneContents \u003d new VBox();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.paneContents.setPadding(new Insets(GuiSettings.getPadding()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.paneContents.setStyle(\"-fx-background-color:\" + GuiSettings.getBackgroundColour() + \";\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add content container to self"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setContent(this.paneContents);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set fit to height and width"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setFitToHeight(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setFitToWidth(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Adds a given Node to the scrollable pane."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Expected behaviour: append the given Node to what is currently displayed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param node Node to be added to the scrollable pane"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void add(Node node) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.paneContents.getChildren().add(node);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Replaces all Nodes currently in the scrollable pane with the current Node."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Expected behaviour: remove and replace anything currently in the scrollable pane."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param node Node to be added to the scrollable pane"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void replace(Node node) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // remove anything currently in the viewport"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.paneContents.getChildren().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add the node to the scrollable pane"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.add(node);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 61
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/StatusBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing status bar in the application window."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class StatusBar extends TextBar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of StatusBar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public StatusBar() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // reduce padding"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPadding(new Insets(GuiSettings.getPadding() / 2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Sets the text to be displayed in the StatusBar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param textToBeDisplayed The text to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setText(String textToBeDisplayed) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create label with appropriate text"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text \u003d new Text(textToBeDisplayed);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // style label"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text.setFont(GuiSettings.getStatusTextStyle());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text.setFill(Color.web(GuiSettings.getPrimaryTextColour()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // remove any existing title in titleBar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().clear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add label to titleBar"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().add(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setText(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text.setFill(Color.web(GuiSettings.getErrorTextColour()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 46
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/TextBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Class which TitleBar and StatusBar inherit from."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class TextBar extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    protected Text text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of TitleBar. Called when MainWindow initialises its components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public TextBar() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up height"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set up padding"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setPadding(new Insets(GuiSettings.getPadding()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // set background colour"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.setStyle(\"-fx-background-color:\" + GuiSettings.getSecondaryUiColour() + \";\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Sets the text to be displayed in the TextBar."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param textToBeDisplayed The text to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setText(String textToBeDisplayed) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create label with appropriate text"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text \u003d new Text(textToBeDisplayed);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // style label (dependent on subclass)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // remove any existing title in titleBar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add label to titleBar"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().add(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 48
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/TitleBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.gui.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * UI component representing title bar in the application window."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class TitleBar extends TextBar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Creates a new instance of TitleBar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public TitleBar() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * Sets the text to be displayed in the TitleBar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     * @param textToBeDisplayed The text to be displayed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public void setText(String textToBeDisplayed) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // create label with appropriate text"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text \u003d new Text(textToBeDisplayed);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // style label"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text.setFont(GuiSettings.getTitleTextStyle());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.text.setFill(Color.web(GuiSettings.getPrimaryTextColour()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: abstract into UIComponent.replace(Node newNode) method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // remove any existing title in titleBar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // add label to titleBar"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        this.getChildren().add(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 39
    }
  },
  {
    "path": "src/main/java/dream/fcard/gui/components/UiComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui.components;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * Represents a distinct part of the UI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " * @param \u003cT\u003e Type of Node contained in the UI Component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public interface UiComponent\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    // todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    default void setBackgroundColour(String colour) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        // todo: want to use setStyle, but method cannot be resolved"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 14
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/Exam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Interface to define behaviour of exams."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Look to eventually expand to timed and untimed tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public interface Exam {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void initExam() throws IndexNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 11,
      "huiminlim": 2
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/ExamRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * ..."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class ExamRunner implements Exam {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private final int deckSize;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private boolean examOngoing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public ExamRunner(Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.deckSize \u003d deck.getCards().size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.result \u003d new Result(deckSize);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Exam driver method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void initExam() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        System.out.println(\"Beginning test:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.examOngoing \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Method that pulls up the next card."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void nextCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (examOngoing) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                FlashCard nextCard \u003d deck.getCards().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                System.out.println(nextCard.getFront());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                String answer \u003d promptUserInput();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                result.mark(nextCard.evaluate(answer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                System.out.println(nextCard.getBack());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                deck.getCards().remove(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                this.examOngoing \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        /* for (FlashCard card : deck.getCards()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            //Load front of card"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            System.out.println(card.getFront());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            // Ask user for input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String answer \u003d promptUserInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            // Check if the answer is correct"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isAnswerCorrect;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isAnswerCorrect \u003d card.evaluate(answer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // for mcq test, if input is invalid index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // do something"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // decide when to handle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                throw new IndexNotFoundException(i.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isAnswerCorrect) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "                score++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            //Display the correct answer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            System.out.println(\"Correct Answer:\" + card.getBack());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        } */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private String promptUserInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        System.out.print(\"Your answer for this card:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 59,
      "AHaliq": 3,
      "timothyleong97": 3,
      "huiminlim": 17
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/exam/Result.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "package dream.fcard.logic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " * Result object that helps to keep track of score."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private final int maxScore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    private int finalScore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public Result(int maxScore) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.maxScore \u003d maxScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        this.finalScore \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public String getScore() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        return \"Final Score:\" + finalScore + \"/\" + maxScore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * Simulates marking a question and updates score if correct."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     * @param correct boolean on whether answer is correct or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    public void mark(boolean correct) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        if (correct) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "            this.finalScore++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawnpunchew11"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawnpunchew11": 29
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/Responder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface to take in user input and execute program behaviour."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "public class Responder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Takes in user input and the current state of the program. Uses the user input to decide which is the appropriate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * responseFunc to call."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param input A String representing the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param state The current State of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static void takeInput(String input, State state) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        for (Responses r : Responses.values()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            if (r.call(input, state)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhireHandy": 15,
      "AHaliq": 3,
      "timothyleong97": 3,
      "huiminlim": 2
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/ResponseFunc.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface for lambdas or commands classes for Responses enum."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public interface ResponseFunc {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Lambda\u0027s signature interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param commandInput string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param programState state object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    boolean funcCall(String commandInput, State programState) throws DeckNotFoundException, IndexNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 10,
      "timothyleong97": 3,
      "huiminlim": 6
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/Responses.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.gui.Gui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.logic.respond.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Enum of regex and response function pairs used by Responder to evaluate input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "enum Responses {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    LOGGER(\".*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    HELP(\"(?i)^(help)?(\\\\s)*(command/[\\\\w\\\\p{Punct}]+)?(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        System.out.println(\"Current command is HELP\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        /*Print out \"Available commands are:\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Help [Command]\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"Import FILEPATH\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"Root DIRECTORY_PATH\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"Export deck/ DECK_NAME path/ DIRECTORY_PATH\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Stats [deck/DECK_NAME]\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"View [deck/DECK_NAME]\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Create deck/DECK_NAME\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Test [duration/TIME_LIMIT_ALLOWED] deck/DECK_NAME\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Exit\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"Edit deck/DECK_NAME action/DESIRED_ACTION [index/CARD_INDEX] [front/NEW_FRONT_TEXT]\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                \"[back/NEW_BACK_TEXT]\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ROOT(\"(?i)^r(oot)?(\\\\s)+.+\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.normalizePath(commandInput.split(\" \")[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (FileReadWrite.pathValidDirectory(path)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            StorageManager.provideRoot(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            programState.reloadAllDecks(StorageManager.loadDecks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"Successfully changed root\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"argument is not a valid directory\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ROOT_NO_PATH(\"(?i)^r(oot)?(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"No directory specified, e.g. root ~/Desktop\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    IMPORT(\"(?i)^i(mport)?(\\\\s)+.+\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        System.out.println(\"Current command is IMPORT\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d commandInput.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck deck \u003d StorageManager.loadDeck(path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (deck !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            StorageManager.writeDeck(deck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            programState.addDeck(deck);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"Successfully added \" + path);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"File does not exist, or file does not match schema for a deck\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    IMPORT_NO_PATH(\"(?i)^i(mport)?(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"No path specified, e.g. import ~/Desktop/file.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXPORT(\"(?i)^exp(ort)?(\\\\s)+deck/(\\\\s)*.+(\\\\s)+path/(\\\\s)*.+\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        System.out.println(\"Current command is EXPORT\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] parts \u003d commandInput.split(\"deck/\")[1].split(\"path/\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String deckName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String pathName \u003d parts[1].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Deck d \u003d programState.getDeck(deckName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReadWrite.write(FileReadWrite.resolve(pathName, \"./\" + d.getName() + \".json\"), d.toJson().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"Deck does not exist\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXPORT_NO_PATH(\"(?i)^exp(ort)?(\\\\s)+deck/(\\\\s)*.+\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"No path specified, e.g. export deck/ deckName path/ ~/Desktop\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXPORT_NO_DECK(\"(?i)^exp(ort)?.*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"No deck specified, e.g. export deck/ deckName path/ ~/Desktop\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    STATS(\"(?i)^(stats)?(\\\\s)*(deck/[\\\\w\\\\p{Punct}]+)?(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        System.out.println(\"Current command is STATS\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // ArrayList\u003cDeck\u003e allDecks \u003d programState.getDecks();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // String inputName \u003d *name of deck to find*;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // for (Deck curr : allDecks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      if(curr.getName().equals(inputName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //         System.out.println(curr.getStats());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    VIEW(\"(?i)^(view)?(\\\\s)*(deck/[\\\\S\\\\p{Punct}]+)?(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //System.out.println(\"Current command is VIEW\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).info(\"Current command is VIEW\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // ArrayList\u003cDeck\u003e allDecks \u003d programState.getDecks();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //  String inputName \u003d *name of deck to find*;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //  for (Deck curr : allDecks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      if(curr.getName().equals(inputName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //          curr.viewDeck();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //  }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cDeck\u003e decks \u003d programState.getDecks();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Deck d \u003d decks.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Gui.renderDeck(d);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Deck #1: \" + decks.get(i).getName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    CREATE(\"(?i)^(create)?(\\\\s)+(deck/[\\\\S]+){1}[\\\\s]*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //System.out.println(\"Current command is CREATE_DECK\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).info(\"Current command is CREATE_DECK\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (programState.getCurrentState() !\u003d StateEnum.DEFAULT) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Create not allowed here\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String deckName \u003d commandInput.split(\"deck/\")[1].trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).info(\"CREATE_DECK: command parsing successful\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (programState.hasDeck(deckName)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            // REPORT DECK EXISTS"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(Responses.class).warning(\"CREATE_DECK: Deck with same name exist - \" + deckName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Gui.showError(\"Error: Deck with same name exists - \" + deckName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //System.out.println(\"Error: Deck with same name exist - \" + deckName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //programState.setCurrentState(StateEnum.CREATE_STATE_FRONT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            programState.addDeck(deckName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(Responses.class).info(\"CREATED_DECK: Deck added - \" + deckName);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            // PRINT INSTRUCTIONS TO USER HOW TO CREATE DECK"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Gui.showStatus(\"Deck created - \" + deckName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).info(\"CREATE_DECK: command execution successful\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    DECK_CREATE_MCQ_CARD(\"(?i)^(create)?(\\\\s)+\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(deck/[\\\\S]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(front/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(back/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"((choice/[\\\\S\\\\s]+)(\\\\s)*)+\" , (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"Current command is DECK_CREATE_MCQ_CARD\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"Current command is DECK_CREATE_MCQ_CARD\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                //System.out.println(commandInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_MCQ_CARD: command execution successful\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                Gui.showStatus(\"Deck created - \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // create frontbackcard"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    DECK_CREATE_REG_CARD(\"(?i)^(create)?(\\\\s)+\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(deck/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(front/[\\\\S\\\\s]+){1}(\\\\s)*\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(back/[\\\\S\\\\s]+){1}(\\\\s)*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"Current command is DECK_CREATE_REG_CARD\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"Current command is DECK_CREATE_REG_CARD\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String userInput \u003d commandInput.replaceFirst(\"create deck/\", \"\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String[] userInputFields \u003d userInput.trim().split(\" front/\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String deckName \u003d userInputFields[0];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String[] userCardFields \u003d userInputFields[1].trim().split(\" back/\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String front \u003d userCardFields[0];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String back \u003d userCardFields[1];"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                //System.out.println(deckName + \" \" + front + \" \" + back);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // Check if deck by the name exist"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_REG_CARD: command parsing successful\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Deck deck \u003d programState.getDeck(deckName);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    deck.addNewCard(new FrontBackCard(front, back));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_REG_CARD: Card added to \" + deckName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Throw exception to responder"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).warning(\"DECK_CREATE_REG_CARD: Deck not found - \" + deckName);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showError(d.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"DECK_CREATE_REG_CARD: command execution successful\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    TEST(\"(?i)^(test)?(\\\\\\\\s)+(duration/[\\\\\\\\w\\\\\\\\p{Punct}]+)?(\\\\\\\\s)+(deck/[\\\\\\\\w\\\\\\\\p{Punct}]+){1}(\\\\\\\\s)*\", ("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        System.out.println(\"Current command is TEST\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // ArrayList\u003cDeck\u003e allDecks \u003d programState.getDecks();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // String inputName \u003d *name of deck to find*;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Deck testDeck;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // for (Deck curr : allDecks) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      if(curr.getName().equals(inputName) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //          testDeck \u003d curr;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        //      }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // *Initiate test with Test Deck*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EXIT(\"(?i)^(exit)?\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //System.out.println(\"Current command is EXIT\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).info(\"Current command is EXIT\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        // Exit from application"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Added exit for convenience"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EDIT_DECK_EDIT_CARD(\"(?i)^(edit)?(\\\\s)+(deck/[\\\\S}]+){1}(\\\\s)+(action/[edit]+){1}((\\\\s)+\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(index/[\\\\d]+){1}(\\\\s)*){1}((\\\\s)+(front/[\\\\S\\\\s]+){1}(\\\\s)*)?((\\\\s)?\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(back/[\\\\S\\\\s]+))?(\\\\s)?\", ("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                //System.out.println(\"Current command is EDIT, edit card in deck\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"Current command is EDIT_DECK_EDIT_CARD, edit card in deck\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    EditCommand command \u003d new EditCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + d.getMessage());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Deck not found\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(d.getMessage());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + n.getMessage());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Index not valid\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(n.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + i.getMessage());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: Index not correct\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(i.getMessage());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_EDIT_CARD: command execution successful\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EDIT_DECK_REMOVE_CARD(\"(?i)^(edit)?(\\\\s)+(deck/[\\\\S}]+){1}(\\\\s)+(action/[remove]+){1}((\\\\s)+\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(index/[\\\\d]+){1}(\\\\s)*){1}((\\\\s)+(front/[\\\\S\\\\s]+){1}(\\\\s)*)?((\\\\s)*\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            + \"(back/[\\\\S\\\\s]+))?(\\\\s)*\", ("
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                //System.out.println(\"Current command is EDIT, removing deck\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"Current command is EDIT_DECK_REMOVE_CARD, removing deck\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    EditCommand command \u003d new EditCommand();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    command.funcCall(commandInput, programState);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (DeckNotFoundException d) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + d.getMessage());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Deck not found\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(d.getMessage());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + n.getMessage());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Index not valid\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(n.getMessage());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Error: \" + i.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: Index not correct\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Gui.showStatus(i.getMessage());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                LogsCenter.getLogger(Responses.class).info(\"EDIT_DECK_REMOVE_CARD: command execution successful\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                return true; // capture is valid, end checking other commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    UNKNOWN(\".*\", (commandInput, programState) -\u003e {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Sorry, I don\u0027t know what is this command.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //logger.warning(\"Unknown command entered.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // violates some rules, but workaround to prevent illegal forward reference"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        LogsCenter.getLogger(Responses.class).warning(\"Unknown command entered.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Gui.showError(\"Sorry, I don\u0027t know what is this command.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    });"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private String regex;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    private ResponseFunc func;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    Responses(String r, ResponseFunc f) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        this.regex \u003d r;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        this.func \u003d f;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * Given a string and program state, if string matches regex this enum will call its response"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * function."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param i input string"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @param s state object"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     * @return boolean if the string has matched"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean call(String i, State s) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            if (i.matches(regex)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "                return func.funcCall(i, s);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (DeckNotFoundException | IndexNotFoundException d) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            // gui handle"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PhireHandy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 61,
      "PhireHandy": 83,
      "timothyleong97": 3,
      "huiminlim": 199
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/CreateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.logic.respond.ResponseFunc;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a command that creates a new deck or card (?)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class CreateCommand implements ResponseFunc {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean funcCall(String i, State s) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 17
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.logic.respond.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.core.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.gui.Gui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.logic.respond.ResponseFunc;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Enum for actions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "enum Action {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    EDIT, REMOVE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Edit command class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class EditCommand implements ResponseFunc {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String deckName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Action action;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String front;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String back;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean hasFront;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean hasBack;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor for edit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public EditCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param commandInput string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param programState state object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws DeckNotFoundException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean funcCall(String commandInput, State programState)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throws DeckNotFoundException, IndexNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean success \u003d parseInput(commandInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean hasDeck \u003d programState.hasDeck(deckName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!hasDeck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DeckNotFoundException(\"Deck does not exist - \" + deckName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Deck deck \u003d programState.getDeck(deckName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //System.out.println(\"Deck obtained\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (action \u003d\u003d Action.REMOVE) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            performRemove(deck);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (action \u003d\u003d Action.EDIT) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                performEdit(deck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(i.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param commandInput"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean parseInput(String commandInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String userFields \u003d commandInput.replaceFirst(\"edit(\\\\s)+deck/\", \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String[] splitUserFields \u003d userFields.split(\" action/\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        splitUserFields \u003d splitUserFields[1].split(\" index/\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String inputAction \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        hasFront \u003d splitUserFields[1].contains(\"front/\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        hasBack \u003d splitUserFields[1].contains(\"back/\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String stringIndex \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (inputAction.toLowerCase().equals(\"edit\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            action \u003d Action.EDIT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (inputAction.toLowerCase().equals(\"remove\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            action \u003d Action.REMOVE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasFront \u0026\u0026 hasBack) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            splitUserFields \u003d splitUserFields[1].split(\" front/\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            stringIndex \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            splitUserFields \u003d splitUserFields[1].split(\" back/\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            front \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            back \u003d splitUserFields[1].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasFront \u0026\u0026 !hasBack) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            splitUserFields \u003d splitUserFields[1].split(\" front/\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            stringIndex \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            front \u003d splitUserFields[1].trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!hasFront \u0026\u0026 hasBack) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            splitUserFields \u003d splitUserFields[1].split(\" back/\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            stringIndex \u003d splitUserFields[0].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            back \u003d splitUserFields[1].trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!hasBack \u0026\u0026 !hasFront \u0026\u0026 action \u003d\u003d Action.REMOVE) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            stringIndex \u003d splitUserFields[1].trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!hasBack \u0026\u0026 !hasFront \u0026\u0026 action \u003d\u003d Action.EDIT) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(EditCommand.class).warning(\"EDIT_DECK_EDIT_CARD: No changes to front back\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Gui.showError(\"No back and front provided.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            index \u003d Integer.parseInt(stringIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Index provided is a invalid number - \" + stringIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param deck"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void performEdit(Deck deck) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasFront) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            deck.editFrontCardFromDeck(front, index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //System.out.println(\"Edit front card successsfullly\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasBack) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            deck.editBackCardInDeck(back, index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //System.out.println(\"Edit back card successsfullly\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param deck"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void performRemove(Deck deck) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            deck.removeCardFromDeck(index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException | IndexNotFoundException n) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            LogsCenter.getLogger(EditCommand.class).info(\"EDIT_DECK_REMOVE_CARD: Invalid index provided\" + index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(n.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 173
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/respond/exception/DuplicateFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.logic.respond.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Exception thrown when duplicates detected"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DuplicateFoundException extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param cause"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DuplicateFoundException(String cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 15
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/stats/Stats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.logic.stats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * ..."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class Stats {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 3,
      "timothyleong97": 4
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/storage/Schema.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of string constants used to define json files understood by the program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Schema {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DECK_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String DECK_CARDS \u003d \"cards\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TYPE_FIELD \u003d \"type\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String FRONT_FIELD \u003d \"front\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String BACK_FIELD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String CHOICES_FIELD \u003d \"choices\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String FRONT_BACK_TYPE \u003d \"front-back\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String JAVASCRIPT_TYPE \u003d \"javascript\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String MULTIPLE_CHOICE_TYPE \u003d \"multiple-choice\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 19
    }
  },
  {
    "path": "src/main/java/dream/fcard/logic/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.JavascriptCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface to managing storage for the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean isRootResolved \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String root;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String decksSubDir \u003d \"./decks\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine root directory of the application, main for project, directory containing jar"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * for jar files."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static void resolveRoot() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (isRootResolved) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        URL thisClassUrl \u003d StorageManager.class.getResource(\"StorageManager.class\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        switch (thisClassUrl.getProtocol()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String platformIndependentPath \u003d Paths.get(StorageManager.class"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        .getResource(\"StorageManager.class\").toURI()).toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                root \u003d FileReadWrite.resolve(platformIndependentPath, \"../../../../../../../../../\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (URISyntaxException i) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"error\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //root \u003d FileReadWrite.resolve(thisClassUrl.getPath(), \"../../../../../../../../../\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"jar\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                root \u003d FileReadWrite.resolve("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        new File(StorageManager.class.getProtectionDomain().getCodeSource().getLocation().toURI())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        .getPath(), \"../\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"jar is broken as unable to resolve path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        root \u003d FileReadWrite.resolve(root, \"./data\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isRootResolved \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * User provide directory to use for storage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to new directory for storage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void provideRoot(String path) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        root \u003d path;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isRootResolved \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns value of current root."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  root directory"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String getRoot() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Write a deck into decks storage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param deck  deck object to write"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void writeDeck(Deck deck) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, decksSubDir + \"/\" + deck.getName() + \".json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(path, deck.toJson().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Load all decks in storage."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  ArrayList of decks in storage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static ArrayList\u003cDeck\u003e loadDecks() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        resolveRoot();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.resolve(root, decksSubDir);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!FileReadWrite.fileExists(path)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try (Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(path))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return walk.filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .map(x -\u003e loadDeck(x.toString()))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Loads a single deck."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param filePath  Must be valid existing filepath to a deck json file."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return          deck object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Deck loadDeck(String filePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return parseDeckJsonFile(FileReadWrite.read(filePath));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"FILE DOES NOT EXIST\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parse input as a json deck string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json deck string"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      deck object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Deck parseDeckJsonFile(String input) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                ArrayList\u003cFlashCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                JsonObject deckJson \u003d JsonParser.parseJsonInput(input).getObject();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (JsonValue x : deckJson.get(Schema.DECK_CARDS).getArray()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    JsonObject cardJson \u003d x.getObject();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    FlashCard card \u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    switch(cardJson.get(Schema.TYPE_FIELD).getString()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.FRONT_BACK_TYPE:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new FrontBackCard("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.JAVASCRIPT_TYPE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new JavascriptCard("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    case Schema.MULTIPLE_CHOICE_TYPE:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        for (JsonValue choiceJson : cardJson.get(Schema.CHOICES_FIELD).getArray()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            choices.add(choiceJson.getString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        card \u003d new MultipleChoiceCard("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.FRONT_FIELD).getString(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                cardJson.get(Schema.BACK_FIELD).getString(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                choices);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        System.out.println(\"Unexpected card type, but silently continues\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    cards.add(card);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Deck(cards, deckJson.get(Schema.DECK_NAME).getString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueException e1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"JSON file wrong schema\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (DuplicateInChoicesException d) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"Duplicated choices detected in Multiple Choice Card.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IndexNotFoundException i) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(i.getMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e2) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"JSON file has errors\\n\" + e2.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 182,
      "huiminlim": 16
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/Deck.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.HIGH_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of cards."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Deck implements JsonInterface {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Name of this Deck object. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String deckName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of FlashCard objects in this Deck object. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e cards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of FlashCards with High priority levels. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e highPriorityList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of FlashCards with Low priority levels. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e lowPriorityList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck object with no name and cards."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Deck() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d \"untitled\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck object with name and FlashCard objects."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String name of the Deck object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Deck object with name and FlashCard objects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String name of the Deck object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck(ArrayList\u003cFlashCard\u003e initialCards, String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        cards \u003d initialCards;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        deckName \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        highPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        lowPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        addCardsToPriorityLists(initialCards);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Adds FlashCard objects to a specific Priority List."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list ArrayList of FlashCard objects to add to Priority lists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void addCardsToPriorityLists(ArrayList\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard card \u003d list.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isHighPriorityCard \u003d card.getPriority() \u003d\u003d HIGH_PRIORITY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isLowPriorityCard \u003d card.getPriority() \u003d\u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isHighPriorityCard) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                highPriorityList.add(card);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isLowPriorityCard) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                lowPriorityList.add(card);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns Json format of Deck."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue Json object of current Deck."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonArray cardJson \u003d new JsonArray();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (FlashCard card : cards) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            cardJson.add(card.toJson());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.DECK_NAME, deckName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.DECK_CARDS, cardJson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Adds new card to the ArrayList of card objects."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newCard FlashCard object to add to Deck."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void addNewCard(FlashCard newCard) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cards.add(newCard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a boolean value, if user provided index is valid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if a user provided index is valid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Uses provide index that is 1-based, i.e. 1, 2, 3, etc."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If index provided is within 1, 2, 3, ..., last card, then it is valid and return true."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else return false."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Boolean indicating if index provided by user is valid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return True if valid, false if invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean isIndexProvidedByUserValid(int indexProvided) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(cards.size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return indexProvided \u003c\u003d cards.size() \u0026\u0026 indexProvided \u003e 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Removes a specified FlashCard using index from the list of FlashCards."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of FlashCard to remove from list of FlashCards."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void removeCardFromDeck(int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cards.remove(indexProvided - 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set front of card."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newFront      String of new text to replace front of FlashCard."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Index of FlashCard in the Deck."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of FlashCard objects in Deck or \u003c 0."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFrontCardFromDeck(String newFront, int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        FlashCard cardToChange \u003d cards.get(indexProvided - 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardToChange.editFront(newFront);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set back of FlashCard object."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newBack       String of new text to replace back of FlashCard."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Index of card in the Deck."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of FlashCards in Deck or \u003c 0."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBackCardInDeck(String newBack, int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isUserProvidedIndexValid \u003d isIndexProvidedByUserValid(indexProvided);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isUserProvidedIndexValid) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String errorMessage \u003d \"Index entered is invalid: \" + indexProvided;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(errorMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        FlashCard cardToChange \u003d cards.get(indexProvided - 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        cardToChange.editBack(newBack);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns list of FlashCards in Deck."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of FlashCard objects currently in Deck."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getCards() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns name of the Deck."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String name of Deck."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return deckName;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns list storing all High priority FlashCards."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of FlashCards of priority level, High."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getHighPriorityList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return highPriorityList;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns list storing all low priority flashcards."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of flashcards of priority level low."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getLowPriorityList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return lowPriorityList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a list of FlashCard objects created for test."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Generates a subset of 10 FlashCard objects for test in ExamRunner."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Currently, fixed at 6 FlashCard objects of High priority."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * And 4 FlashCards of Low priority."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of shuffled FlashCards."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getSubsetForTest() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cFlashCard\u003e testSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int totalDeckSize \u003d cards.size();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (totalDeckSize \u003c\u003d 10) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //int sizeOfLowPrioritySet \u003d (int) Math.floor(totalDeckSize * 0.4);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //int sizeOfHighPrioritySet \u003d totalDeckSize - sizeOfLowPrioritySet;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int sizeOfLowPrioritySet \u003d 4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int sizeOfHighPrioritySet \u003d 6;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfHighPrioritySet; i++) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard chosenCard \u003d getRandomCard(highPriorityList);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            testSet.add(chosenCard);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfLowPrioritySet; i++) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FlashCard chosenCard \u003d getRandomCard(lowPriorityList);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            testSet.add(chosenCard);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Collections.shuffle(testSet);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return testSet;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a random FlashCard object from an ArrayList."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list ArrayList of FlashCards."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return FlashCard chosen randomly from ArrayList."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private FlashCard getRandomCard(ArrayList\u003cFlashCard\u003e list) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Random rand \u003d new Random(System.currentTimeMillis());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int chosenCardIndex \u003d rand.nextInt(list.size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return list.get(chosenCardIndex);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 32,
      "timothyleong97": 3,
      "huiminlim": 248
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Running state of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private StateEnum currentState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cDeck\u003e decks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a State object with no Deck objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public State() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        currentState \u003d StateEnum.DEFAULT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a State object with existing Deck objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param initialDecks ArrayList of Deck objects to include in State object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public State(ArrayList\u003cDeck\u003e initialDecks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        currentState \u003d StateEnum.DEFAULT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        decks \u003d initialDecks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Adds new empty Deck object to decks list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void addDeck(String deckName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        decks.add(new Deck(deckName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a deck object to decks list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param deck Deck object to add into State."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        decks.add(deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Removes the deck from the list of Deck objects, if there is a Deck object with a matching name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else, throw exception when no Deck object with matching name is found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void removeDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int deckIndex \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (deckIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        decks.remove(deckIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns the Deck object that matches in name, if a Deck with matching name exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else, throw exception when no Deck with matching name is found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String of name of Deck object looking for."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Deck object with name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws DeckNotFoundException Throw exception when no matching Deck with name specified."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deck getDeck(String name) throws DeckNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int indexOfDeck \u003d getDeckIndex(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (indexOfDeck \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DeckNotFoundException(\"Deck not found - \" + name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return decks.get(indexOfDeck);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cDeck\u003e getDecks() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return decks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Replace all decks with a new set of decks. Used by `root` command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param newDecks new decks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void reloadAllDecks(ArrayList\u003cDeck\u003e newDecks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        decks \u003d newDecks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns the index of a Deck given the Deck name, if a Deck with matching name exists."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else, return -1 if no Deck with matching name is found."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Note: this method is only used internally for State processing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Should not be confused with user seen indexes, since this is 0-based index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param name String of name of Deck."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Integer value of index of Deck stored in list of Deck objects."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int getDeckIndex(String name) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Deck currentDeck \u003d decks.get(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isUserInputMatchDeckName \u003d currentDeck.getName().equals(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isUserInputMatchDeckName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public StateEnum getCurrentState() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return currentState;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param deckName"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean hasDeck(String deckName) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Deck currentDeck \u003d decks.get((i));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String currentDeckName \u003d currentDeck.getName();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isMatchName \u003d currentDeckName.equals(deckName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isMatchName) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setCurrentState(StateEnum newState) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        currentState \u003d newState;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 30,
      "timothyleong97": 3,
      "huiminlim": 108
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/StateEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Enums describing state of program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public enum StateEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    CREATE_STATE_FRONT, CREATE_STATE_BACK, CREATE_INPUT, DEFAULT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 8
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/TestCase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * An object representing 1 input test case and 1 expected output file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class TestCase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private File input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private File expectedOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public TestCase(File input, File expectedOutput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.expectedOutput \u003d expectedOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Check if the given output matches what was in the given expected output file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param output generated by a code evaluator."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return an object that says true if test case passed, false otherwise, and the test cases for reviewing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e checkDiff(String output) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String expected \u003d FileReadWrite.read(expectedOutput.getAbsolutePath());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Pair\u003cString, String\u003e outputs \u003d new Pair\u003c\u003e(expected, output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Pair\u003cBoolean, Pair\u003cString, String\u003e\u003e obj;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (!expected.equals(output)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(false, outputs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(true, outputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasMissingInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return input \u003d\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasMissingExpectedOutput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return expectedOutput \u003d\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 46
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/FlashCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface all flash card types must implement."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public abstract class FlashCard implements JsonInterface, Comparable\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Text to display in front of FlashCard."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String front;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Text to display in back of FlashCard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String back;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Number indicating priority level of FlashCard."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected Integer priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return true if the input matches the FlashCard answer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else returns false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in String input fron user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value, true if user input matches FlashCard answer, else return false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract Boolean evaluate(String in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns front text of card."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of front text of card."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract String getFront();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return back text of card."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of back text of card."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract String getBack();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set the front text of card."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace in front."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract void editFront(String newText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set the back text of card."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace in back."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract void editBack(String newText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns JsonValue out of this Flashcard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns an integer value after checking if this card has higher priority than other card."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If this card has higher priority, return a positive number."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If this card has lower priority, return a negative number."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param otherCard FlashCard object to be compared to."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Integer value indicating comparison."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int compareTo(FlashCard otherCard) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.priority - otherCard.getPriority();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns priority level of flashcard."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Integer value of priority level."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns boolean value after checking if FlashCard has choice parameters."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * If FlashCard has choice parameters (in ArrayList), return true."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Else return false."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value, true if FlashCard has choices, else return false."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract boolean hasChoices();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 10,
      "timothyleong97": 3,
      "huiminlim": 90
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/FrontBackCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Card that evaluates input to match back of card."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class FrontBackCard extends FlashCard {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a FrontBackCard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Takes in 2 String, front text and back text."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public FrontBackCard(String frontString, String backString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        back \u003d backString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Default priority is 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a FrontBackCard with front and back string, and integer priority levle."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString   String of front text."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString    String of back text."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param priorityLevel Integer of priority level."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public FrontBackCard(String frontString, String backString, int priorityLevel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d backString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Default priority is 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns JsonValue of flashcard."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.TYPE_FIELD, Schema.FRONT_BACK_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.FRONT_FIELD, front);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.BACK_FIELD, back);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in String input by user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value, if correct return true, else return false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return in.equals(back);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the front text of card."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of front text to replace the front."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Edits the back text of card."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of new text to replace the back text."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns front string of card."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of front text."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns back string of card."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of back text."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns boolean value false."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Since no choices exist in this class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value false."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean hasChoices() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 23,
      "timothyleong97": 3,
      "huiminlim": 87
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/JavaCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.model.TestCase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Card that evaluates input as javascript code whose output has to match back of card."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaCard extends FlashCard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private ArrayList\u003cTestCase\u003e testCases;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JavaCard(String question, ArrayList\u003cTestCase\u003e testCases) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.testCases \u003d testCases;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //TODO: Evaluating Java code can be done inside here"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //irrelevant"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //irrelevant"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        //irrelevant"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public boolean hasChoices() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 50,
      "huiminlim": 1
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/JavascriptCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Card that evaluates input as javascript code whose output has to match back of card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Format of back of card is a string of assert functions, e.g. \"assert(f(4),10); assert(f(14),20);\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * which evaluate will then run against the user\u0027s typed code (user will have to define a function f"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * in a popup editor window)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class JavascriptCard extends FlashCard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param outputString"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JavascriptCard(String frontString, String outputString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        back \u003d outputString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor to create a Javascript card with user specified priority."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of front text."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param outputString String of back text."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param priorityLevel Integer priority level of card."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JavascriptCard(String frontString, String outputString, int priorityLevel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d frontString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d outputString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.TYPE_FIELD, Schema.JAVASCRIPT_TYPE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.FRONT_FIELD, front);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        obj.put(Schema.BACK_FIELD, back);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return new JsonValue(obj);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns boolean value false."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Since no choices exist in this class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value false."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean hasChoices() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 11,
      "timothyleong97": 5,
      "huiminlim": 93
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/MultipleChoiceCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static dream.fcard.model.cards.Priority.LOW_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.Schema;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * FrontBackCard with additional data of multiple choices."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class MultipleChoiceCard extends FrontBackCard {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of Choices for MultipleChoiceCard. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ArrayList\u003cString\u003e choices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** List of choices to display. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cString\u003e displayChoices;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Integer value of the option user should provide as answer. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int displayChoicesAnswerIndex; // Answer index is 1-based"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Integer value of the answer from user in user provided choice. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int answerIndex; // Answer index is 1-based"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct a multiple choice card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of front text."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString  Integer value of user visible original answer index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choicesArg  List of String choices from original choices."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public MultipleChoiceCard(String frontString, String backString, ArrayList\u003cString\u003e choicesArg)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throws DuplicateInChoicesException, IndexNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(frontString, backString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Checks if choices contain duplicate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean hasDuplicateInChoice \u003d hasChoiceContainDuplicate(choicesArg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasDuplicateInChoice) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DuplicateInChoicesException(\"Duplicates found in choices provided.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices \u003d choicesArg;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Answer index is 1-based."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            answerIndex \u003d Integer.parseInt(back);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException f) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isNotValidAnswerIndex \u003d isNotValidChoice(answerIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidAnswerIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d LOW_PRIORITY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Constructor of MCQ card, with front, back string, choices and priority level."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param frontString String of front text of card."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param backString  String of back text of card."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choicesArg  Choices available for user to choose."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws DuplicateInChoicesException Throw exception when duplicates exist in choices."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public MultipleChoiceCard(String frontString, String backString, ArrayList\u003cString\u003e choicesArg, int priorityLevel)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throws DuplicateInChoicesException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(frontString, backString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Checks if choices contain duplicate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean hasDuplicateInChoice \u003d hasChoiceContainDuplicate(choicesArg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (hasDuplicateInChoice) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new DuplicateInChoicesException(\"Duplicates found in choices provided.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices \u003d choicesArg;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            answerIndex \u003d Integer.parseInt(back);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException f) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns JsonValue of flashcard."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return JsonValue of flashcard."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public JsonValue toJson() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            JsonObject obj \u003d super.toJson().getObject();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            JsonArray choicesJson \u003d new JsonArray();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for (String option : choices) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                choicesJson.add(option);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            obj.put(Schema.TYPE_FIELD, Schema.MULTIPLE_CHOICE_TYPE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            obj.put(Schema.CHOICES_FIELD, choicesJson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return new JsonValue(obj);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Inherited FrontBackCard unexpected json object\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return super.toJson();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns of boolean value, true if answer is correct, else return false."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Evaluates if user input answer is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param in String input provided by user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean, if correct return true, else return false."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException Throw exception when input provided by user is not a valid choice."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Boolean evaluate(String in) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int userAnswer \u003d -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // User answer is 1-based indexing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            userAnswer \u003d Integer.parseInt(in);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NumberFormatException(\"Choice provided is invalid - \" + answerIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Assume options must be a non-negative integer"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(answerIndex)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice provided is invalid - \" + userAnswer);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return userAnswer \u003d\u003d displayChoicesAnswerIndex;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return the String of front of MultipleChoiceCard."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text in front of MultipleChoiceCard."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getFront() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return front;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return the String of back of MultipleChoiceCard."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text in back of MultipleChoiceCard."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getBack() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return back;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return the String text of choice given the index of the choice."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of targeted choice to obtain."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of text of targeted option."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of choices or \u003c 0."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getSpecificChoice(int indexProvided) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(indexProvided)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Use chocies indexing - 0-based indexing"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // choice index is the index that works with the Arraylist"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int choiceIndex \u003d indexProvided - 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return choices.get(choiceIndex);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns the list of shuffled choices."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of string choices, shuffled."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfChoices() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        shuffleChoices();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return displayChoices;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Shuffles the choices of choices and updates the index of correct answer."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private void shuffleChoices() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Obtain String of correct answer before sorting"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int indexOfAnswerFromProvidedList \u003d answerIndex - 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String correctAnswer \u003d choices.get(indexOfAnswerFromProvidedList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        displayChoices \u003d generateCopyOfChoices();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Collections.shuffle(displayChoices);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Find the index of the correct answer after sorting"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c displayChoices.size(); i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String currentChoice \u003d displayChoices.get(i);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean isCurrentChoiceEqualAnswer \u003d correctAnswer.equals(currentChoice);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (isCurrentChoiceEqualAnswer) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                displayChoicesAnswerIndex \u003d i + 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns a new ArrayList of choices as a copy."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList of choices as string."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cString\u003e generateCopyOfChoices() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c choices.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String newStringObject \u003d choices.get(i);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            newList.add(newStringObject);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Sets the front text of the MultipleChoiceCard."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of text to replace the front of MultipleChoiceCard."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editFront(String newText) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        front \u003d newText;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Sets the back text of the MultipleChoiceCard."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newText String of text to replace the back of MultipleChoiceCard."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editBack(String newText) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        back \u003d newText;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Sets one of string in choices, given new text and index."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param indexProvided Integer index of targeted choice to edit."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param newChoice     String text of new choice option to replace current choice."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IndexNotFoundException If index \u003e\u003d number of choices or \u003c 0."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void editSpecificChoice(int indexProvided, String newChoice) throws IndexNotFoundException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isNotValidChoice(indexProvided)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexNotFoundException(\"Choice index provided is invalid - \" + indexProvided);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // choice index is the index that works with the Arraylist"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int choiceIndex \u003d indexProvided - 1;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(choiceIndex, newChoice);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.remove(choiceIndex + 1);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns boolean value true."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Since choices exist in this class."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean value true."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean hasChoices() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns true if duplicates exist, false if no duplicates."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if ArrayList of choices contain duplicates."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choiceSet ArrayList of possible String of choices to check."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean true if ArrayList of choices have duplicates, false if no duplicates."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@@author huiminlim"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean hasChoiceContainDuplicate(ArrayList\u003cString\u003e choiceSet) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        HashMap\u003cString, Integer\u003e choiceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c choiceSet.size(); i++) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String choiceText \u003d choiceSet.get(i).trim();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            boolean hasChoice \u003d choiceMap.containsKey(choiceText);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (hasChoice) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                choiceMap.put(choiceText, 1);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns true if not in valid range, false if in valid range."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if the given choice index provided by the user is correct."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Note: the user provided index is 1-based indexing."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Valid indexes include 1, 2, 3, ..., choices."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param choiceIndex Integer Index provided by user."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Boolean true if not in valid range, false if in valid range."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author huiminlim"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private boolean isNotValidChoice(int choiceIndex) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return choiceIndex \u003c 1 || choiceIndex \u003e choices.size();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //@author"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 19,
      "huiminlim": 329
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/cards/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Class to handle all the preset priority."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final Integer LOW_PRIORITY \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static final Integer HIGH_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 11
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/DeckNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when deck object is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DeckNotFoundException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DeckNotFoundException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/DuplicateInChoicesException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when there is a duplicate in choices."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DuplicateInChoicesException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DuplicateInChoicesException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/model/exceptions/IndexNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an error when index is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IndexNotFoundException extends Throwable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public IndexNotFoundException(String cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/FileReadWrite.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of file read write and path manipulation functions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class FileReadWrite {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Resolve relative path from origin path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param origin        origin path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param relativePath  reltive path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return              absolute path relative from origin"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String resolve(String origin, String relativePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return normalizePath(Paths.get(normalizePath(origin)).resolve(relativePath).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Normalize relative path symbols and home if any into absolute path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to normalize"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      normalized path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String normalizePath(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (path.startsWith(\"~\" + File.separator)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            path \u003d System.getProperty(\"user.home\") + path.substring(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Paths.get(path).normalize().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path and content, makes directories if don\u0027t exist then writes the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path    path to file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param content content to write"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void write(String path, String content) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.write(content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path, attempts to read contents of file and return it as string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      file content string"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws FileNotFoundException    file does not exist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String read(String path) throws FileNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReader fr \u003d new FileReader(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                boolean empty \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if (!empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    sb.append(line);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    empty \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Delete the file of the given path. Can also delete empty directory."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true successful delete"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean delete(String path) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.delete();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine if file exists."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true if file exists"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean fileExists(String path) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine if path is a valid directory."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to directory"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      true if valid directory"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Boolean pathValidDirectory(String path) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(normalizePath(path));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return file.exists() \u0026\u0026 file.isDirectory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path to a file, extract the file name."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      name of file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String getFileName(String path) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new File(normalizePath(path)).getName();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 132
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/JsTestCaseRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.code.JavascriptRunner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * This class takes in a JS file, an ArrayList of test cases, and runs the input against each test case."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JsTestCaseRunner {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String userAttempt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String consoleDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public JsTestCaseRunner(String codeToRun, String expectedOutput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.expectedOutput \u003d expectedOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        this.userAttempt \u003d codeToRun;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public String getConsoleDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return consoleDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the user\u0027s attempt at writing a function against the assertions that the user has written."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return (TotalTestCases, ( TotalCorrect, TotalWrong)) in a Pair object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public Pair\u003cInteger, Pair\u003cInteger, Integer\u003e\u003e testCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String finalCode \u003d processJs(userAttempt, expectedOutput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String output \u003d JavascriptRunner.evaluateString(finalCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        consoleDisplay \u003d output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        output \u003d output.replaceAll(\"pass\", \"\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .replaceAll(\"fail\", \"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                .strip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Scanner sc \u003d new Scanner(output);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int total \u003d sc.nextInt();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int correct \u003d sc.nextInt();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        int wrong \u003d sc.nextInt();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return new Pair\u003c\u003e(total, new Pair\u003c\u003e(correct, wrong));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Inserts testing functionality around the user\u0027s code. Used to check correctness of user\u0027s code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param userInput      the user\u0027s testing code."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param expectedOutput the user\u0027s assertions."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the final piece of code that the evaluator can use to score the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private String processJs(String userInput, String expectedOutput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(\"var correct \u003d 0;\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"var wrong \u003d 0;\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"var total \u003d 0;\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"function assert(actual, expected) {\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    if (actual \u003d\u003d expected) {\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        correct++;\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        print(\u0027pass\u0027);\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    } else {\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        wrong++;\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        print(\u0027fail\u0027);\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    total++;\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(userInput).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(expectedOutput).append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(\"print(total, correct, wrong);\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 76
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/Printer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Collection of string utils."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Default indent text of 4 spaces."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String INDENT \u003d repeatChar(4, \u0027 \u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Surround a string with double quotes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be formatted"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String surroundQuotes(String str) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\\\"\" + str + \"\\\"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Indent each line with INDENT string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return indentString(str, INDENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a specific indent string, append it before each line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param ind indent string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str, String ind) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (String s : str.split(\"\\n\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(ind);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generates a string of repeated characters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param length number of repetitions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c      character to be repeated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting repeated character string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String repeatChar(int length, char c) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return String.valueOf(c).repeat(Math.max(0, length));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 60
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/FileImporter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Reads in code from a file and returns a BufferedReader if the file is valid or null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * if the file is invalid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class FileImporter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Stores code from a file into a BufferedReader"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param filepath the destination of the file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return a BufferedReader containing the code or null if file could not be read."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static BufferedReader readFile(String filepath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            System.err.println(\"The file you are trying to read from could not be found :(\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 27
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/JavaRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "//solution adapted from from https://www.journaldev.com/937/compile-run-java-program-another-java-program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "//Credits: Pankaj"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Type your Java code inside Main.java in the /data directory. Then run the main method in this class to see"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * your code being compiled and run during runtime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavaRunner {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Will look for a .java file in the given filepath and compile and run the code, returning any output"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * as a String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param filepath where the file resides."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the output from Java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if the file is not a Java classfile, or the file could not be read from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String compileAndRun(String filepath) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (!filepath.endsWith(\".java\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            throw new IOException(\"Your file is not a Java file\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String compileOutput \u003d runProcess(\"javac \" + filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return compileOutput + \"\\n\" + runProcess(\"java \" + filepath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Gets the {@code InputStream} from the generated {@code Process} and collects its output."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param ins the {@code InputStream}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the output from the Process\u0027s {@code InputStream}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if reading from the {@code InputStream} fails."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    private static String collectOutput(InputStream ins) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader in \u003d new BufferedReader("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                new InputStreamReader(ins));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        while ((line \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            sb.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Runs the given command on a {@code Process}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param command the command to run"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the output from the computer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @throws IOException if the command could not be run."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String runProcess(String command) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Process pro \u003d Runtime.getRuntime().exec(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(collectOutput(pro.getInputStream()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        sb.append(collectOutput(pro.getErrorStream()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        pro.destroy();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 62
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/JavascriptRunner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.mozilla.javascript.Context;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.mozilla.javascript.tools.shell.Global;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Evaluates Javascript code either from the console or from a .js file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Returns output as a string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class JavascriptRunner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Evaluates JS code from a given filepath. Uses FileImporter to read in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return the output from Rhino as a String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String evaluateFromFile(String filepath) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader reader \u003d FileImporter.readFile(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        if (reader \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return \"Error: File/filepath invalid, please try again.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String lines;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        while ((lines \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            sb.append(lines);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        return evaluateString(sb.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * Evaluates a piece of JavaScript code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @param code the JS code."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     * @return any output from running the code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static String evaluateString(String code) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Context cx \u003d Context.enter();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Global g \u003d new Global(cx);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            ByteArrayOutputStream bs \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            PrintStream printStream \u003d new PrintStream(bs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            g.setOut(printStream);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Object result \u003d cx.evaluateString(g, code, \"cmd\", 1, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String evaluatedObject \u003d Context.toString(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            String consoleLogs \u003d bs.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            if (consoleLogs.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return evaluatedObject;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                return consoleLogs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            Context.exit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 63
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/code/data/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " * Do not change the class name!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        System.out.println(\"Hello\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 10
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/datastructures/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.datastructures;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Product type of two types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * @param \u003cU\u003e   first object type"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * @param \u003cT\u003e   second object type"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Pair\u003cU, T\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private U first;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private T second;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Pair(U a, T b) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        first \u003d a;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        second \u003d b;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public U fst() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public T snd() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 25
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/JsonInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * All objects that can be represented by JSON should implement this interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public interface JsonInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns JSONValue representation of this object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return JSONValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    JsonValue toJson();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 15,
      "huiminlim": 1
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/JsonParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.datastructures.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Parses json string to JsonValue structures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a string input, parse it as a JsonValue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      JsonValue"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException Exceptions indicate incorrect syntax for json files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static JsonValue parseJsonInput(String input) throws JsonFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return processDynamicValue(input.toCharArray(), 0).snd();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json value, which can be of type specified in ValueTypes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * enum."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and DynamicValue; algebraic sum type of all possible ValueTypes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Pair\u003cInteger, JsonValue\u003e processDynamicValue(char[] input, int i)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Pair\u003cInteger, JsonValue\u003e obj;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, Integer\u003e res1 \u003d parseJsonInt(input, i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(res1.fst(), new JsonValue(res1.snd()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger, Double\u003e res2 \u003d parseJsonDouble(input, i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj \u003d new Pair\u003c\u003e(res2.fst(), new JsonValue(res2.snd()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException e2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    Pair\u003cInteger, Boolean\u003e res3 \u003d parseJsonBoolean(input, i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    obj \u003d new Pair\u003c\u003e(res3.fst(), new JsonValue(res3.snd()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } catch (JsonFormatException e3) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        Pair\u003cInteger, String\u003e res4 \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        obj \u003d new Pair\u003c\u003e(res4.fst(), new JsonValue(res4.snd()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } catch (JsonFormatException e4) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            Pair\u003cInteger, JsonObject\u003e res5 \u003d parseJsonObject(input,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            obj \u003d new Pair\u003c\u003e(res5.fst(), new JsonValue(res5.snd()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        } catch (JsonFormatException e5) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                Pair\u003cInteger, JsonArray\u003e res6 \u003d parseJsonArray(input,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                obj \u003d new Pair\u003c\u003e(res6.fst(), new JsonValue(res6.snd()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            } catch (JsonFormatException e6) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                if (e3.getErrorCode() \u003d\u003d 2 \u0026\u0026 e4.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw new JsonFormatException(input, i, \"Is of unknown format\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e4.getErrorCode() \u003d\u003d 2 \u0026\u0026 e5.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e3;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e4;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e6;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json array."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and array"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, JsonArray\u003e parseJsonArray(char[] input, int i)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027[\u0027) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expecting [\", 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027[\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Empty array did not close\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(input, i, \"Value pairs must be comma separated\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between value pairs"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            arr.add(valuePair.snd());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // process key value pairs"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Array did not close\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027]\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, arr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and object / key value pairs HashMap"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, JsonObject\u003e parseJsonObject(char[] input, int i)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expecting {\", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027{\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Empty object did not close\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first key"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(input, i, \"Key value pairs must be comma separated\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between key value pairs"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger, String\u003e keyPair \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d keyPair.fst();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                key \u003d keyPair.snd();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException ignored) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Object keys must be strings at \" + i);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse key"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] !\u003d \u0027:\u0027) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Expected : after key name\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // find \u0027:\u0027"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger, JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj.put(key, valuePair.snd());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Object did not close\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027}\u0027"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, obj);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as an int."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and int"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Integer\u003e parseJsonInt(char[] input, int i)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 (Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027-\u0027)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 (i \u003e\u003d input.length || checkIfLegalAfterValue(input[i]))) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Integer.parseInt(value.toString()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Text is not an Integer\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException(input, i, \"Expected Integer but encountered something\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a double."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and double"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Double\u003e parseJsonDouble(char[] input, int i)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 (Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027e\u0027 || input[i] \u003d\u003d \u0027.\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || input[i] \u003d\u003d \u0027-\u0027)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 (i \u003d\u003d input.length || checkIfLegalAfterValue(input[i]))) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Double.parseDouble(value.toString()));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(input, i, \"Text is not a Double\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException(input, i, \"Expected Double but encountered something else\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a boolean."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and boolean"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, Boolean\u003e parseJsonBoolean(char[] input, int i)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean value;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027t\u0027 \u0026\u0026 input[i] !\u003d \u0027f\u0027) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\", 2);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i + 3 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027t\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027r\u0027"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027u\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d true;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 4;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (i + 4 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027f\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027a\u0027"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027l\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027s\u0027 \u0026\u0026 input[i + 4] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 5;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003c input.length \u0026\u0026 !checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"Expected Boolean but encountered something else\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a string with double quotes surround. Escaped double quotes"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * are also replaced with regular double quotes"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and string"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger, String\u003e parseJsonString(char[] input, int i)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean escape \u003d false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected starting double quotes for string but encountered something else\", 2);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i++;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\"\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (input[i] \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (escape) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] \u003d\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else if (input[i] \u003d\u003d \u0027n\u0027) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\\\\u0027);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                value.append(input[i]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e input.length) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(input, i, \"String did not terminate with double quotes\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003c input.length \u0026\u0026 !checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    input, i, \"Expected string but encountered something else\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value.toString());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Check if character is a legal possibility after non object, array values."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c character to test"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return True if legal"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean checkIfLegalAfterValue(char c) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Character.isWhitespace(c) || c \u003d\u003d \u0027,\u0027 || c \u003d\u003d \u0027]\u0027 || c \u003d\u003d \u0027}\u0027 || c \u003d\u003d \u0027:\u0027;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Skip whitespace input[i] onwards till non whitespace encountered."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static int skipWhiteSpace(char[] input, int i) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 Character.isWhitespace(input[i])) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Replace instances of \" and n as escape characters for formatting as json string."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str   string to format"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      formatted string"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String formatStringForJson(String str) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\\\"\" + str.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\").replaceAll(\"\\n\", \"\\\\\\\\\\n\") + \"\\\"\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 391
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/exceptions/JsonFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Exception when string being parsed is of unexpected json format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonFormatException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 1 - failed due to content of file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 2 - failed due to wrong prediction of value data type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int errorCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception without message and default errorCode."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and errorCode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param err   errorCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg, Integer err) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d err;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and default errorCode."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with references to the source json file with an error code."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message for the error"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param err   error code"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(char[] input, Integer index, String msg, Integer err) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg + \"\\n\" + getPointToErrorString(input, index));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d err;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with references to the source json file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message for the error"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(char[] input, Integer index, String msg) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg + \"\\n\" + getPointToErrorString(input, index));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generate reference string for error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file character string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index where error occurred in string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  formatted reference string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String getPointToErrorString(char[] input, Integer index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int line \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int col \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder lineBuf \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d index \u0026\u0026 i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lineBuf.append(input[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                line++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                col \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                lineBuf \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (int i \u003d index + 1; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            lineBuf.append(input[i]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return lineBuf.toString() + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + Printer.indentString(\"^\", Printer.repeatChar(col - 1, \u0027 \u0027))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"(\" + line + \":\" + col + \")\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get error code of object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  errorCode"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getErrorCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return errorCode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 103
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/exceptions/JsonWrongValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.jsontypes.JsonValueTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Exception when access wrong value of a JsonValue object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonWrongValueException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonWrongValueException(JsonValueTypes expected, JsonValueTypes got) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(\"Expecting \" + expected + \", however got \" + got);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonArray.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * A representation of a json array."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonArray extends ArrayList\u003cJsonValue\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds an int to the array."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(int value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a double to the array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(double value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a boolean to the array."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(boolean value) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a string to the array."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(String value) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonObject to the array."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonObject value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonArray to the array."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      add result of array list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonArray value) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a int to the array at the specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, int value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a double to the array at the specified index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, double value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a boolean to the array at the specified index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, boolean value) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a string to the array at the specified index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, String value) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonObject to the array at the specified index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonObject value) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Adds a JsonArray to the array at the specified index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonArray value) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonArray."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (JsonValue entry : this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(entry.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[\\n\" + Printer.indentString(formattedString.toString()) + \"]\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 133,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * A representation of a json object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonObject extends HashMap\u003cString, JsonValue\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an int into the object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue put(String key, int value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an double into the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, double value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an boolean into the object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, boolean value) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an string into the object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, String value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an JsonObject into the object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonObject value) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Puts an JsonArray into the object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param key   key for the value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      result of the put function from HashMap"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonArray value) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonObject."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (HashMap.Entry\u003cString, JsonValue\u003e entry : entrySet()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key \u003d JsonParser.formatStringForJson(entry.getKey());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String value \u003d entry.getValue().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(key).append(\": \").append(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"{\\n\" + Printer.indentString(formattedString.toString()) + \"}\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 93,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonValue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.JsonParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Algebraic data type of JsonValueTypes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonValue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonValueTypes type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int valueInt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private double valueDouble;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean valueBoolean;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String valueString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonObject valueObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonArray valueArray;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as an int."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value int value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(int value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.INT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueInt \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a double."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value double value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(double value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.DOUBLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueDouble \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a boolean."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value boolean value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(boolean value) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.BOOLEAN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueBoolean \u003d value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value string value"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(String value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.STRING;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueString \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a JsonObject."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonObject value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonObject value) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.OBJECT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueObject \u003d value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the value as a JsonArray."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param value JsonArray value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonArray value) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d JsonValueTypes.ARRAY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueArray \u003d value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the type of this value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  type"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValueTypes getType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an int."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getInt() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.INT) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.INT, type);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueInt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an double."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public double getDouble() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.DOUBLE) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.DOUBLE, type);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueDouble;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an boolean."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean getBoolean() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.BOOLEAN) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.BOOLEAN, type);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueBoolean;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String getString() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.STRING) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.STRING, type);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueString;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an JsonObject."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject getObject() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.OBJECT) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.OBJECT, type);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueObject;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get the value if it is an JsonArray."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  value"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonWrongValueException  exception if value type is not a match"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonArray getArray() throws JsonWrongValueException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d JsonValueTypes.ARRAY) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueException(JsonValueTypes.ARRAY, type);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueArray;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get string representation of object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case INT:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Integer.toString(getInt());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case DOUBLE:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Double.toString(getDouble());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case BOOLEAN:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Boolean.toString(getBoolean());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return JsonParser.formatStringForJson(getString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case OBJECT:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getObject().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case ARRAY:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getArray().toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"ERROR: unexpected json value type \" + type);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"ERROR: json value type does not match value its holding\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 180,
      "timothyleong97": 3
    }
  },
  {
    "path": "src/main/java/dream/fcard/util/json/jsontypes/JsonValueTypes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Enum of value types json util can represent."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum JsonValueTypes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    INT, DOUBLE, BOOLEAN, STRING, OBJECT, ARRAY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 8
    }
  },
  {
    "path": "src/main/resources/view/Windows/JavaEditor.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.components.JavaEditorController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 20
    }
  },
  {
    "path": "src/main/resources/view/Windows/JsEditor.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.components.JsEditorController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 19
    }
  },
  {
    "path": "src/main/resources/view/Windows/JsTestEvaluator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            prefWidth\u003d\"620.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            fx:controller\u003d\"dream.fcard.gui.components.JsTestEvaluator\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cButtonBar layoutX\u003d\"4.0\" layoutY\u003d\"466.0\" prefHeight\u003d\"33.0\" prefWidth\u003d\"611.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003cbuttons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                \u003cButton fx:id\u003d\"runCodeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#runCode\" text\u003d\"Run\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "            \u003c/buttons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"consoleOutput\" editable\u003d\"false\" layoutY\u003d\"351.0\" prefHeight\u003d\"114.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        \u003cTextArea fx:id\u003d\"textEditor\" layoutX\u003d\"-4.0\" layoutY\u003d\"-1.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"620.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 19
    }
  },
  {
    "path": "src/test/java/dream/fcard/gui/GuiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "//@@ author nattanyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "package dream.fcard.gui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "/** Tests for Gui. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "public class GuiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Verify that flashcards with long text scroll in the expected manner. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void renderFront_longText_showScrollBar() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String longStringForTesting \u003d \"Lorem ipsum dolor sit amet, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"consectetur adipscing elit. Aliquam lacinia, nunc quis dictum consectetur, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"erat nulla molestie turpis, quis finibus justo ipsum a justo. Cras quis ullamcorper \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"nulla. Duis nec volutpat nibh. Praesent ut justo vestibulum, lacinia tortor mattis, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"euismod eros. Maecenas viverra erat ac eros consequat feugiat. Praesent vehicula non \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"turpis tempor elementum. Suspendisse ac lacus congue, blandit nisl eget, suscipit \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"eros. Donec aliquet, tellus eu consectetur ornare, odio ipsum lacinia ipsum, id \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"ullamcorper magna nibh quis nulla. Nulla sagittis, quam vel condimentum commodo, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"arcu ligula lobortis erat, non consequat tortor mi non libero. Etiam orci purus, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"maximus sed suscipit ut, consectetur sed arcu.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        FrontBackCard flashCardForTesting \u003d new FrontBackCard(longStringForTesting,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            \"Praesent ut est justo. Cras urna risus, ultricies posuere pharetra in, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "                + \"fringilla ac dolor. Donec a porttitor tellus, vitae ullamcorper risus.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Gui.renderFront(flashCardForTesting);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Verify that a node can be appended to the scrollable pane. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void displayInScrollablePane() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Verify that a node can replace currently existing nodes in the scrollable pane. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void replaceInScrollablePane() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Verify that the GUI can display an error message. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void showError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Gui.showError(\"Command not recognised :(\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nattanyz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    /** Verify that the GUI can display a deck of cards. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    public static void displayDeck_validDeck_showDeckInGui() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        ArrayList\u003cFlashCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String frontString \u003d \"Lorem ipsum dolor sit amet, \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"consectetur adipscing elit. Aliquam lacinia, nunc quis dictum consectetur, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"erat nulla molestie turpis, quis finibus justo ipsum a justo.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        String backString \u003d \"Duis nec volutpat nibh. Praesent ut justo vestibulum, lacinia tortor \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "            + \"mattis, euismod eros. Maecenas viverra erat ac eros consequat feugiat.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        cards.add(new FrontBackCard(frontString, backString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Deck deck \u003d new Deck(cards, \"Test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "        Gui.renderDeck(deck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nattanyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nattanyz": 64
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/respond/ResponsesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.respond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.logic.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class ResponsesTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void rootTest() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.resolve(\"./\", \"./testDir\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        new File(path).mkdirs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // make directory for testing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Responses.ROOT.call(\"root \" + path, new State());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(path, StorageManager.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // cleanup"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void rootNoPathTest() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, Responses.ROOT_NO_PATH.call(\"root\", new State()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void importTest() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String deckName \u003d \"test123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.normalizePath(\"~/\" + deckName + \".json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String root \u003d FileReadWrite.normalizePath(\"~/testDir\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test parameters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.provideRoot(root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        State s \u003d new State();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        d.addNewCard(new FrontBackCard(\"front\", \"back\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create stubs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(path, d.toJson().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Responses.IMPORT.call(\"import \" + path, s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test import"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(deckName, s.getDeck(deckName).getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(d.toJson().toString(), s.getDeck(deckName).toJson().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (DeckNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // check deck valid"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks/\" + deckName + \".json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(root);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // cleanup"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void importNoPathTest() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, Responses.IMPORT_NO_PATH.call(\"import\", new State()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void exportTest() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String deckName \u003d \"test123\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String path \u003d FileReadWrite.normalizePath(\"~\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String exportPath \u003d FileReadWrite.resolve(path, \"./\" + deckName + \".json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String root \u003d FileReadWrite.normalizePath(\"~/testDir\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test parameters"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.provideRoot(root);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        State s \u003d new State();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        d.addNewCard(new FrontBackCard(\"front\", \"back\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        s.addDeck(d);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create stubs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeDeck(d);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // store in root"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Responses.EXPORT.call(\"export deck/ \" + deckName + \" path/ \" + path, s);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // test export"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(d.toJson().toString(), FileReadWrite.read(exportPath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // check export valid"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(exportPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks/\" + deckName + \".json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(FileReadWrite.resolve(root, \"./decks\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(root);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // cleanup"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void exportNoPathTest() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, Responses.EXPORT_NO_PATH.call(\"export deck/ test\", new State()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void exportNoDeckTest() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, Responses.EXPORT_NO_DECK.call(\"export\", new State()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 116,
      "huiminlim": 7
    }
  },
  {
    "path": "src/test/java/dream/fcard/logic/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.logic.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.FrontBackCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.model.cards.MultipleChoiceCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.FileReadWrite;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void readWriteDecksTest() throws DuplicateInChoicesException, IndexNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FlashCard d1c1 \u003d new FrontBackCard(\"What year did NASA go to the moon?\", \"1969\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FlashCard d2c1 \u003d new MultipleChoiceCard("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"A baby puffin is called a what?\", \"1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Puffin\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Puffy\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Pofette\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Poofeen\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        )));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d1 \u003d new Deck(new ArrayList\u003c\u003e(Arrays.asList(d1c1)), \"deck1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Deck d2 \u003d new Deck(new ArrayList\u003c\u003e(Arrays.asList(d2c1)), \"deck2\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // create stubs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.provideRoot(\"~\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeDeck(d1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StorageManager.writeDeck(d2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // write decks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (Deck d : StorageManager.loadDecks()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (d.getName() \u003d\u003d \"deck1\") {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(d1.toJson().toString(), d.toJson().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (d.getName() \u003d\u003d \"deck2\") {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(d2.toJson().toString(), d.toJson().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // load decks and check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks/deck1.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks/deck2.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.delete(\"~/decks\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // delete files"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 51,
      "huiminlim": 3
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/StateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class StateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    //State s \u003d new State();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void getDeckIndex_validIndex_returnValidIndex() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //s.addDeck(new Deck());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 24
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/FrontBackCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class FrontBackCardTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void testEvaluate() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FrontBackCard card \u003d new FrontBackCard(\"asd\", \"123\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(true, card.evaluate(\"123\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(false, card.evaluate(\"abc\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 13,
      "huiminlim": 7
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/JavascriptCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JavascriptCardTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testEvaluate() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //JavascriptCard card \u003d new JavascriptCard(\"Echo 123\", \"123\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        //assertEquals(true, card.evaluate(\"console.log(\u0027123\u0027);\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/test/java/dream/fcard/model/cards/MultipleChoiceCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package dream.fcard.model.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author huiminlim"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.DuplicateInChoicesException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import dream.fcard.model.exceptions.IndexNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class MultipleChoiceCardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_correctChoice_sample() throws IndexNotFoundException, DuplicateInChoicesException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"1\", choices);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(card.getPriority());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "       //assertEquals(true, card.evaluate(\"hello\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_correctChoice_trueReturned() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(true, card.evaluate(\"hello\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void evaluate_wrongChoice_falseReturned() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"hello\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(false, card.evaluate(\"helo\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void editChoice_changeChoiceSuccessfully() throws IndexNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yoyo\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yolo\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"moin\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        card.editChoice(3, \"hello\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String answer \u003d card.getChoice(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(true, card.evaluate(answer));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    void editChoice_indexInvalid_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e choices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"bye\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yoyo\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"yolo\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        choices.add(\"moin\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        MultipleChoiceCard card \u003d new MultipleChoiceCard(\"What is hello?\", \"hello\", choices);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(IndexNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            card.editChoice(-1, \"hello\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "//@author"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 85
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/FileReadWriteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class FileReadWriteTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testResolve() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertEquals(FileReadWrite.resolve(System.getProperty(\"user.home\"), \"./Desktop/b\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                FileReadWrite.resolve(\"~/Desktop/a\", \"../b\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //assertEquals(System.getProperty(\"user.home\") + \"/Desktop/b\", FileReadWrite.resolve(\"~/Desktop/a\", \"../b\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testNormalize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"a\", FileReadWrite.normalizePath(\"a/b/c/../../\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testReadWriteFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        FileReadWrite.write(\"~/TESTFILE.txt\", \"abc123\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(\"abc123\", FileReadWrite.read(\"~/TESTFILE.txt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReadWrite.delete(\"~/TESTFILE.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 30,
      "huiminlim": 9
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/PrinterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class PrinterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testSurroundQuotes() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"\\\"asd\\\"\", Printer.surroundQuotes(\"asd\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testIndentString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"    asd\\n\", Printer.indentString(\"asd\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"    asd\\n    123\\n\", Printer.indentString(\"asd\\n123\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testRepeatChar() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"111\", Printer.repeatChar(3, \u00271\u0027));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"   \", Printer.repeatChar(3, \u0027 \u0027));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"\", Printer.repeatChar(0, \u0027 \u0027));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 25
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/FileImporterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class FileImporterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void readJsFile_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Path path \u003d Paths.get(\"./src/test/java/dream/fcard/util/code/testData.js\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        BufferedReader br \u003d FileImporter.readFile(path.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertNotNull(br);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 20
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/JavaRunnerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavaRunnerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void compileAndRun() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d \"package dream.fcard.util.data;\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"public class Test {\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    public static void main(String[] args) {\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"        System.out.println(\\\"Hello from JavaRunnerTest\\\");\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"    }\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"}\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        File file \u003d new File(\"./src/test\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/java/dream/fcard/util/data/Test.java\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        fw.write(code);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String result \u003d JavaRunner.compileAndRun(\"./src/test\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "                + \"/java/dream/fcard/util/data/Test.java\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(\"\\nHello from JavaRunnerTest\\n\", result);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 31
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/code/JavascriptRunnerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.code;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "class JavascriptRunnerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void evaluateFromFile_success() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        Path path \u003d Paths.get(\"./src/test/java/dream/fcard/util/code/testData.js\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String output \u003d JavascriptRunner.evaluateFromFile(path.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(output, \"undefined\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    void evaluateString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        String code \u003d \"const x \u003d x \u003d\u003e x + 5; x(4);\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        assertEquals(\"9\", JavascriptRunner.evaluateString(code));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 25
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/data/Test.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "package dream.fcard.util.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "public class Test {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "        System.out.println(\"Hello from JavaRunnerTest\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timothyleong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timothyleong97": 7
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/JsonParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void validParse() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"123\").getInt());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(3.14, JsonParser.parseJsonInput(\"3.14\").getDouble());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(true, JsonParser.parseJsonInput(\"true\").getBoolean());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(\"abc\", JsonParser.parseJsonInput(\"\\\"abc\\\"\").getString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"{\\\"num\\\": 123}\").getObject().get(\"num\").getInt());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(123, JsonParser.parseJsonInput(\"[123]\").getArray().get(0).getInt());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueException ev) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException ef) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 29
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/exceptions/JsonFormatExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonFormatExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void errorMessageTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"hi\\nabc\\n ^\\n(1:2)\\n\", new JsonFormatException(\"abc\".toCharArray(), 1, \"hi\").getMessage());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/test/java/dream/fcard/util/json/jsontypes/JsonValueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package dream.fcard.util.json.jsontypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import dream.fcard.util.json.exceptions.JsonWrongValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonValueTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void validAccess() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(123, new JsonValue(123).getInt());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(3.14, new JsonValue(3.14).getDouble());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(true, new JsonValue(true).getBoolean());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(\"abc\", new JsonValue(\"abc\").getString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(obj, new JsonValue(obj).getObject());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            assertEquals(arr, new JsonValue(arr).getArray());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void invalidAccess() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonWrongValueException e \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonValue v \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (JsonValueTypes t1 : JsonValueTypes.values()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            switch (t1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case INT:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(123);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case DOUBLE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(3.14);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case BOOLEAN:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(\"abc\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case OBJECT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(obj);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case ARRAY:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                v \u003d new JsonValue(arr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            for (JsonValueTypes t2 : JsonValueTypes.values()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (t1.equals(t2)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                switch (t2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case INT:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getInt);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case DOUBLE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getDouble);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case BOOLEAN:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getBoolean);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case STRING:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case OBJECT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getObject);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                case ARRAY:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    e \u003d assertThrows(JsonWrongValueException.class, v::getArray);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                assertEquals(\"Expecting \" + t2 + \", however got \" + t1, e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 87
    }
  }
]
